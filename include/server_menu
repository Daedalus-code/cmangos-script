#!/bin/bash

#################################
#   C M @ N G 0 S  -  M 3 N U   #
################################# .. ALPHA VERSION! expect nothing !

# By Rainman
# V20210103-barebone
# 0.4.9.1

# https://www.linuxatemyram.com, num num num

export NCURSES_NO_UTF8_ACS=1

# check, install missing dialog
if ! [ -x "$(command -v dialog)" ]; then
  echo "Dialog Not Installed"
  sleep 1
  # uname -a outputs linux
  if uname -a 2>&1 | grep -q -Eo "Linux"; then
    echo "Found Linux, Please Wait"
    # linux
    sudo apt-get install dialog -y 2>&1
    # uname -a outputs darwin
  elif uname -a 2>&1 | grep -q -Eo "Darwin"; then
    echo "Found Darwin, Please Wait"
    if ! [ -x "$(command -v brew)" ]; then
      echo "Brew Not Found"
      # install brew
      read -r -p "Install Brew? y/n "
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Please Wait"
        # https://brew.sh
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
    fi
    # darwin
    brew install dialog 2>&1
  fi
fi

### Get System Information #####################################################

# do this once, if not found
if [ ! -f /tmp/sys_info ]; then
  echo "Getting System Information!"
  # install lshw if missing
  if ! [ -x "$(command -v lshw)" ]; then
    sudo apt-get install lshw -y 2>&1
  fi
  # shellcheck disable=SC2024
  sudo lshw >/tmp/sys_info 2>&1
  sleep 1
fi

### Dialog Menu ################################################################

DIALOG_CANCEL=1
DIALOG_ESC=255
HEIGHT=21
WIDTH=45
CHOICE_HEIGHT=14

BACKTITLE="CMaNGOS features"
TITLE="<  C M a N G O S - M e n u  >"
MENU="Choose one of the following options:"

OPTIONS=(Manage "Start/Stop Server"
  Update "Update/Upgrade Server"
  Config "Server Configuration"
  Core "Core Configuration"
  Data "Database Configuration"
  Bots "Bot Configuration"
  Maps "P2P/Extract/Import Maps"
  Remote "Remote Access"
  Realm "Realm Information"
  System "System Information"
  Repo "Display Repo Space"
  Disk "Display Disk Space"
  Debug "Debug Menu (developer)"
  Remove "Uninstall Everything")

while true; do
  exec 3>&1
  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --cancel-label "Exit" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 1>&3)

  # error status
  EXIT_STATUS=$?
  exec 3>&-
  case $EXIT_STATUS in
  "$DIALOG_CANCEL")
    clear
    echo "Program terminated."
    exit
    ;;
  "$DIALOG_ESC")
    clear
    echo "Program aborted." >&2
    exit 1
    ;;
  esac

  clear

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  case $CHOICE in

  0)
    clear
    echo "Program terminated."
    ;;

  Manage)

    DIALOG_CANCEL=1
    DIALOG_ESC=255
    HEIGHT=12
    WIDTH=45
    CHOICE_HEIGHT=3

    BACKTITLE="Install Server"
    TITLE="Server Cores & Databases"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "CMaNGOS Classic"
      2 "CMaNGOS The Burning Crusade"
      3 "CMaNGOS Wrath of the Lich King")

    exec 3>&1
    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --cancel-label "Exit" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 1>&3)

    # error status
    EXIT_STATUS=$?
    exec 3>&-
    case $EXIT_STATUS in
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated."
      exit
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
    esac

    clear
    case $CHOICE in

    ### CMaNGOS Classic (vanilla) ##############################################

    1)

      # CODE MISSING !!

      ;;

      ### CMaNGOS The Burning Crusade (TBC) ####################################

    2)

      # CODE MISSING !!

      ;;

      ### CMaNGOS Wrath of the Lich King (WOTLK) ###############################

    3)

      # CODE MISSING !!

      ;;

    esac

    ;;

  Update)

    DIALOG_CANCEL=1
    DIALOG_ESC=255
    HEIGHT=12
    WIDTH=45
    CHOICE_HEIGHT=3
    BACKTITLE="Install, Update, Upgrade Server"
    TITLE="Server Cores & Databases"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "CMaNGOS Classic"
      2 "CMaNGOS The Burning Crusade"
      3 "CMaNGOS Wrath of the Lich King")

    exec 3>&1
    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --cancel-label "Exit" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 1>&3)

    # error status
    EXIT_STATUS=$?
    exec 3>&-
    case $EXIT_STATUS in
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated."
      exit
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
    esac

    clear
    case $CHOICE in

    ### CMaNGOS Classic (vanilla) ##############################################

    1)

      # preparing
      sudo apt update && sudo apt upgrade
      # install all the required packages to build CMaNGOS
      sudo apt-get install build-essential gcc g++ automake git-core autoconf make patch libmysql++-dev mysql-server libtool libssl-dev grep binutils zlibc libc6 libbz2-dev cmake subversion libboost-all-dev -y
      cd || exit     # change to home directory
      mkdir wow      # create folder named wow
      cd wow || exit # change to the wow directory
      git clone git://github.com/cmangos/mangos-classic.git
      git clone git://github.com/cmangos/classic-db.git
      cd mangos-classic || exit # change to the mangos-classic directory
      mkdir build               # make a new directory in mangos-classic called build
      cd build || exit          # change to the newly created directory called build
      # cmake command
      cmake .. -DCMAKE_INSTALL_PREFIX=\../run -DBUILD_EXTRACTORS=ON -DPCH=1 -DDEBUG=0 -DBUILD_PLAYERBOT=OFF
      make
      make install
      # CODE MISSING !!

      ;;

      ### CMaNGOS The Burning Crusade (TBC) ####################################

    2)

      # preparing
      sudo apt update && sudo apt upgrade
      # install all the required packages to build CMaNGOS
      sudo apt-get install build-essential gcc g++ automake git-core autoconf make patch libmysql++-dev mysql-server libtool libssl-dev grep binutils zlibc libc6 libbz2-dev cmake subversion libboost-all-dev -y
      cd || exit     # change to home directory
      mkdir wow      # create folder named wow
      cd wow || exit # change to the wow directory
      git clone git://github.com/cmangos/mangos-tbc.git
      git clone git://github.com/cmangos/tbc-db.git
      cd mangos-tbc || exit # change to the mangos-tbc directory
      mkdir build           # make a new directory in mangos-tbc called build
      cd build || exit      # change to the newly created directory called build
      # cmake command
      cmake .. -DCMAKE_INSTALL_PREFIX=\../run -DBUILD_EXTRACTORS=ON -DPCH=1 -DDEBUG=0 -DBUILD_PLAYERBOT=OFF
      make
      make install
      # CODE MISSING !!

      ;;

      ### CMaNGOS Wrath of the Lich King (WOTLK) ###############################

    3)

      # preparing
      sudo apt update && sudo apt upgrade
      # install all the required packages to build CMaNGOS
      sudo apt-get install build-essential gcc g++ automake git-core autoconf make patch libmysql++-dev mysql-server libtool libssl-dev grep binutils zlibc libc6 libbz2-dev cmake subversion libboost-all-dev -y
      cd || exit     # change to home directory
      mkdir wow      # create folder named wow
      cd wow || exit # change to the wow directory
      git clone git://github.com/cmangos/mangos-wotlk.git
      git clone git://github.com/cmangos/wotlk-db.git
      cd mangos-tbc || exit # change to the mangos-wotlk directory
      mkdir build           # make a new directory in mangos-wotlk called build
      cd build || exit      # change to the newly created directory called build
      # cmake command
      cmake .. -DCMAKE_INSTALL_PREFIX=\../run -DBUILD_EXTRACTORS=ON -DPCH=1 -DDEBUG=0 -DBUILD_PLAYERBOT=OFF
      make
      make install
      # CODE MISSING !!

      ;;

    esac

    ;;

  Config)

    # CODE MISSING !!

    ;;

  Core)

    # CODE MISSING !!

    ;;

  Data)

    # CODE MISSING !!

    ;;

  Bots)

    # CODE MISSING !!

    ;;

  Maps)

    echo "Importing Maps"
    N_FILES=$(unzip -l /seedbox/vanilla_maps.zip 2>&1 | grep -E ".map|.vmo|.vmtile|.vmtree|temp_gameobject_models|.dbc|.mmtile|.mmap" 2>&1 | wc -l 2>&1)
    unzip -o /seedbox/vanilla_maps.zip -d /home/wow/mangos-classic/run/ 2>&1 | pv -l -s "${N_FILES[0]}" >/dev/null
    # CODE MISSING !!

    ;;

  Remote)

    # CODE MISSING !!

    ;;

  Realm)

    # CODE MISSING !!

    ;;

  System)

    RESULT=$(# Hostname
      echo "Hostname.: $(hostname)"
      # Uptime
      echo "Uptime...: $(uptime 2>&1 | awk '{print $3,$4}' 2>&1 | sed 's/,//' 2>&1)"
      # Manufacturer
      echo "Mfr......: $(cat /tmp/sys_info 2>&1 | grep "vendor" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)"
      # Product Name
      echo "Product..: $(
        PRSERVER=$(cat /tmp/sys_info 2>&1 | grep "product" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)
        if [ -f /.dockerenv ]; then
          echo "Docker"
        else
          echo "$PRSERVER"
        fi
      )"
      # Version
      if [ -f /sys/class/dmi/id/product_version ]; then
        echo "Version..: $(cat /sys/class/dmi/id/product_version 2>&1)"
      else # just some random n because no version was found.
        RV=$((((RANDOM % 3) + 1)))
        echo "Version..: 0.0$RV"
      fi
      # Serial Number
      echo "Serial...: $(cat /tmp/sys_info 2>&1 | grep "serial" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)"
      # Machine Type
      echo "Machine..: $(
        VSERVER=$(lscpu 2>&1 | grep Hypervisor 2>&1 | wc -l 2>&1)
        if [ $VSERVER -gt 0 ]; then
          echo "VM"
        elif [ -f /.dockerenv ]; then
          echo "Docker"
        else
          echo "Physical"
        fi
      )"
      # Operating System
      echo "OS.......: $(
        if [ -f /.dockerenv ]; then
          uname
        else
          echo "$(hostnamectl 2>&1 | grep "Operating System" 2>&1 | cut -d ' ' -f5- 2>&1)"
        fi
      )"
      # Kernel
      echo "Kernel...: $(uname -r 2>&1)"
      # Architecture
      echo "Arch.....: $(arch 2>&1)"
      # Processor Name
      echo "CPU Name.: $(
        if [ -f /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq ]; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>/dev/null)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>/dev/null)
          if cat /tmp/sys_info | grep -q "Raspberry"; then
            CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
              cut -c -4 2>/dev/null)
            echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1') @ ${CPU_FREQ:?}GHz ($CPU_TEMP)"
          else
            echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')"
          fi
        else
          echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')"
        fi
      )"
      # Active User
      echo "Users....: $(
        if [ -f /.dockerenv ]; then
          getent group sudo
        else
          echo "$(w 2>&1 | cut -d ' ' -f1 2>&1 | grep -v USER 2>&1 | xargs -n1 2>&1 | tail -1 2>&1)"
        fi
      )"
      # System Main IP
      echo "IP.......: $(hostname -I 2>&1)"
      # Memory Free/Total
      echo "RAM Free.: $(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)/$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)"
      # Swap Usage
      echo "RAM Swap.: $(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)"
      # CPU Usage
      echo "CPU Load.: $(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"
    )
    display_result "System Information"

    ;;

  Repo)

    # repo space
    REPO_SIZE=$(du -h --max-depth=1 "$HOME"/wow/ 2>&1)
    RESULT=$(
      echo "Repositories: Core, Database & Backup"
      echo "$REPO_SIZE"
    )
    display_result "Repo Size"

    ;;

  Disk)

    RESULT=$(df -h 2>&1)
    display_result "Disk Space"

    ;;

  Debug)

    # fix ownership
    sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" /usr/local/bin/mangos 2>&1
    # remove file
    sudo rm /usr/local/bin/server_menu 2>&1
    # create file
    sudo touch /usr/local/bin/server_menu 2>&1
    # chmod file
    sudo chmod +x /usr/local/bin/server_menu 2>&1
    # nano file
    sudo nano /usr/local/bin/server_menu 2>&1
    # CODE MISSING !!

    ;;

  Remove)

    # CODE MISSING !!

    ;;

  esac
done
