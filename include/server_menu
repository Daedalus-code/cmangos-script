#!/bin/bash

#################################
#   C M a N G O S  -  M E N U   #
################################# .. ALPHA VERSION!

# By Rainman
# V20212502-barebone
# 0.2.7.6

# sources:
# https://medium.com/@takanori.ishikawa/how-to-show-progress-bar-while-unzipping-tons-of-files-7b1ea7a84b01
# https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script
# https://linuxcommand.org/lc3_adv_dialog.php

# check, install missing dialog
if ! [ -x "$(command -v dialog)" ]; then
  echo "Dialog Not Installed"
  sleep 1
  # uname -a outputs linux
  if uname -a 2>&1 | grep -q -Eo "Linux"; then
    echo "Found Linux, Please Wait"
    # linux
    sudo apt-get install dialog -y 2>&1
    # uname -a outputs darwin
  elif uname -a 2>&1 | grep -q -Eo "Darwin"; then
    echo "Found Darwin, Please Wait"
    if ! [ -x "$(command -v brew)" ]; then
      echo "Brew Not Found"
      # install brew
      read -r -p "Install Brew? y/n "
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Please Wait"
        # https://brew.sh
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
    fi
    # darwin
    brew install dialog 2>&1
  fi
fi

export NCURSES_NO_UTF8_ACS=1
DIALOG_CANCEL=1
DIALOG_ESC=255
HEIGHT=21
WIDTH=45
CHOICE_HEIGHT=14

BACKTITLE="CMaNGOS features"
TITLE="<  C M a N G O S - M e n u  >"
MENU="Choose one of the following options:"

OPTIONS=(Start "Start Server"
  Stop "Stop Server"
  Restart "Restart Server"
  Config "Server Configuration"
  Update "Update CMaNGOS Server"
  Install "Setup CMaNGOS Server"
  Maps "Download, Import Maps"
  Database "Database Configuration"
  Remote "Remote Access"
  Uninstall "Remove Everything"
  System "System Information"
  Disk "Display Disk Space"
  Repo "Display Repo Space"
  Debug "Debug Script")

while true; do
  exec 3>&1
  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --cancel-label "Exit" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 1>&3)

  # error status
  EXIT_STATUS=$?
  exec 3>&-
  case $EXIT_STATUS in
  "$DIALOG_CANCEL")
    clear
    echo "Program terminated."
    exit
    ;;
  "$DIALOG_ESC")
    clear
    echo "Program aborted." >&2
    exit 1
    ;;
  esac

  clear

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  case $CHOICE in

  0)
    clear
    echo "Program terminated."
    ;;

  Start)

    # look for install folders (mangos-classic)
    if find "/home/$(whoami)/wow" -type d -name "mangos-classic" &>/dev/null; then
      CORE_STATUS="1"
    else
      CORE_STATUS="0"
    fi
    # look for install folders (classic-db)
    if find "/home/$(whoami)/wow" -type d -name "classic-db" &>/dev/null; then
      DB_STATUS="1"
    else
      DB_STATUS="0"
    fi
    REPO_STATUS=$(echo "$CORE_STATUS+$DB_STATUS" 2>&1 | bc 2>&1)
    if [[ "$REPO_STATUS" -eq "2" ]]; then
      # all set with repos, core and database
      RESULT=$(echo "Found Install")
      display_result "Everything Set"
      # CODE MISSING !!
    else
      # all set with repos, core and database
      RESULT=$(echo "Nothing!")
      display_result "No Install Found"
      # CODE MISSING !!
    fi

    ;;

  Stop)

    # CODE MISSING !!

    ;;

  Restart)

    # CODE MISSING !!

    ;;

  Config)

    # CODE MISSING !!

    ;;

  Update)

    # CODE MISSING !!

    ;;

  Install)

    # CODE MISSING !!

    ;;

  Maps)

    echo "Importing Maps"
    N_FILES=$(unzip -l /seedbox/vanilla_maps.zip 2>&1 |
      grep -E ".map|.vmo|.vmtile|.vmtree|temp_gameobject_models|.dbc|.mmtile|.mmap" 2>&1 |
      wc -l 2>&1)
    unzip -o /seedbox/vanilla_maps.zip -d /home/wow/mangos-classic/run/ 2>&1 |
      pv -l -s "${N_FILES[0]}" >/dev/null
    # CODE MISSING !!

    ;;

  Database)

    # CODE MISSING !!

    ;;

  Remote)

    # CODE MISSING !!

    ;;

  System)

    # free Memory
    SYSTEM_FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
    # total Memory
    SYSTEM_TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)
    # free Space, mmc block device #0, partition #2, partition #2, dev/root, overlay
    SYSTEM_HDD=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root|overlay" 2>&1 |
      awk '{ print $3 }' 2>&1)
    # percentage of total used
    SYSTEM_HDD_P=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root|overlay" 2>&1 |
      awk '{ print $5 }' 2>&1)
    # total size
    SYSTEM_HDD_T=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root|overlay" 2>&1 |
      awk '{ print $2 }' 2>&1)
    # operating system, cpu type, kernal release
    SYSTEM_CPU=$(uname -p 2>&1)
    SYSTEM_OS=$(uname -o 2>&1)
    SYSTEM_KR=$(uname -r 2>&1)
    # cpu temp
    if uname -a 2>&1 | grep -q -Eo "aarch64|arm"; then
      SYSTEM_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 |
        cut -c -4 2>&1)
      SYSTEM_TEMP=$(echo "($SYSTEM_TEMP)")
    else
      SYSTEM_TEMP=""
    fi
    # system load, uptime
    SYSTEM_LOAD=$(uptime 2>&1 | grep -o "load.*" 2>&1)
    SYSTEM_UPTIME_DAYS=$(uptime 2>&1 | grep -Eo "[0-9]+ days" 2>&1)
    SYSTEM_UPTIME_HOURS=$(uptime 2>&1 | awk '{ print $5 }' 2>&1 |
      awk -F, '{ print $1 }' 2>&1)

    RESULT=$(
      echo "Load.....: $SYSTEM_LOAD"
      echo "System...: $SYSTEM_KR $SYSTEM_OS"
      echo "Uptime...: $SYSTEM_UPTIME_DAYS $SYSTEM_UPTIME_HOURS"
      echo "Hostname.: $HOSTNAME"
      echo "CPU-Type.: $SYSTEM_CPU $SYSTEM_TEMP"
      echo "Memory...: $SYSTEM_FREE_MEM/$SYSTEM_TOTAL_MEM"
      echo "HDD......: $SYSTEM_HDD/$SYSTEM_HDD_T $SYSTEM_HDD_P"
    )
    display_result "System Information"

    ;;

  Disk)

    RESULT=$(df -h)
    display_result "Disk Space"

    ;;

  Repo)

    # repo space
    REPO_SIZE=$(du -h --max-depth=1 "$HOME"/wow/ 2>&1)
    RESULT=$(
      echo "Repositories: Core, Database & Backup"
      echo "$REPO_SIZE"
    )
    display_result "Repo Size"

    ;;

  Debug)

    # fix ownership
    sudo chown -R "$(whoami)":"$(whoami)" /usr/local/bin/mangos
    # remove file
    sudo rm /usr/local/bin/server_menu 2>/dev/null
    # create file
    sudo touch /usr/local/bin/server_menu 2>/dev/null
    # chmod file
    sudo chmod +x /usr/local/bin/server_menu 2>/dev/null
    # nano file
    sudo nano /usr/local/bin/server_menu 2>/dev/null
    # CODE MISSING !!

    ;;

  esac
done
