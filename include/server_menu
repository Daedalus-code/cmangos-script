#!/bin/bash

#################################
#   C M @ N G 0 S  -  M 3 N U   #
################################# .. ALPHA VERSION! expect nothing !

# By Rainman
# V20210303-barebone
# 0.7.7.9

# https://www.linuxatemyram.com, num num num

# wget https://raw.githubusercontent.com/Daedalus-code/cmangos-script/master/include/server_menu
# bash server_menu

# shellcheck disable=SC2034

# color
B0='\e[34m'   # Blue
B1='\e[94m'   # Blue light
CY='\e[36m'   # Cyan
C1='\e[96m'   # Cyan light
G0='\e[32m'   # Green
G1='\e[92m'   # Green light
GR='\e[90m'   # Grey
N0='\033[0m'  # No color
P0='\e[0;35m' # Purple
P1='\e[1;35m' # Purple light
R0='\e[31m'   # Red
R1='\e[91m'   # Red light
Y0='\e[33m'   # Yellow
Y1='\e[93m'   # Yellow light

export NCURSES_NO_UTF8_ACS=1

# check, install missing dialog
if ! [ -x "$(command -v dialog)" ]; then
  echo "Dialog Not Installed"
  sleep 1
  # uname -a outputs linux
  if uname -a 2>&1 | grep -q -Eo "Linux"; then
    echo "Found Linux, Please Wait"
    # linux
    sudo apt-get install dialog -y 2>&1
    # uname -a outputs darwin
  elif uname -a 2>&1 | grep -q -Eo "Darwin"; then
    echo "Found Darwin, Please Wait"
    if ! [ -x "$(command -v brew)" ]; then
      echo "Brew Not Found"
      # install brew
      read -r -p "Install Brew? y/n "
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Please Wait"
        # https://brew.sh
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
    fi
    # darwin
    brew install dialog 2>&1
  fi
fi

### Functions ##################################################################

function continue {
  echo
  read -r -p "Press Enter to continue" </dev/tty
  echo
}

### Get System Information #####################################################

# do this once, if not found
if [ ! -f /tmp/sys_info ]; then
  echo "Getting System Information!"
  # install lshw if missing
  if ! [ -x "$(command -v lshw)" ]; then
    sudo apt-get install lshw -y 2>&1
  fi
  # shellcheck disable=SC2024
  sudo lshw >/tmp/sys_info 2>&1
  sleep 1
fi

### Dialog Menu ################################################################

DIALOG_CANCEL=1
DIALOG_ESC=255
HEIGHT=22
WIDTH=45
CHOICE_HEIGHT=15

BACKTITLE="CMaNGOS features"
TITLE="<  C M a N G O S - M e n u  >"
MENU="Choose one of the following options:"

OPTIONS=(Manage "Start/Stop Server"
  Update "Update/Upgrade Server"
  Config "Server Configuration"
  Core "Core Configuration"
  Data "Database Configuration"
  Bots "Bot Configuration"
  Maps "Extract/Import Maps"
  Seed "P2P Dashboard"
  Remote "Remote Access"
  Realm "Realm Information"
  System "System Information"
  Repo "Display Repo Space"
  Disk "Display Disk Space"
  Debug "Debug Menu (developer)"
  Remove "Uninstall Everything")

while true; do
  exec 3>&1
  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --cancel-label "Exit" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 1>&3)

  # error status
  EXIT_STATUS=$?
  exec 3>&-
  case $EXIT_STATUS in
  "$DIALOG_CANCEL")
    clear
    echo "Program terminated."
    exit
    ;;
  "$DIALOG_ESC")
    clear
    echo "Program aborted." >&2
    exit 1
    ;;
  esac

  clear

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  case $CHOICE in

  0)
    clear
    echo "Program terminated."
    ;;

  Manage)

    DIALOG_CANCEL=1
    DIALOG_ESC=255
    HEIGHT=9
    WIDTH=40
    CHOICE_HEIGHT=2

    BACKTITLE="Manage Server"
    TITLE="Start Stop Restart Realmd, Mangosd"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Re/Start Realmd, Mangosd"
      2 "Stop Realmd, Mangosd")

    exec 3>&1
    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --cancel-label "Exit" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 1>&3)

    # error status
    EXIT_STATUS=$?
    exec 3>&-
    case $EXIT_STATUS in
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated."
      exit
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
    esac

    clear
    case $CHOICE in

    ### CMaNGOS Classic (vanilla) ##############################################

    1)

      # CODE MISSING !!

      ;;

      ### CMaNGOS The Burning Crusade (TBC) ####################################

    2)

      # CODE MISSING !!

      ;;

      ### CMaNGOS Wrath of the Lich King (WOTLK) ###############################

    3)

      # CODE MISSING !!

      ;;

    esac

    ;;

  Update)

    function preparing_make {
      # preparing
      printf '%b' "${GR:?}Updating, please wait${N0:?}\n"
      sudo apt update && sudo apt upgrade
      sudo apt autoremove -y
      # install all the required packages to build CMaNGOS
      printf '%b' "${GR:?}Installing latest!${N0:?}\n"
      sudo apt-get install build-essential gcc g++ automake git-core autoconf make patch libmysql++-dev mysql-server libtool libssl-dev grep binutils zlibc libc6 libbz2-dev cmake subversion libboost-all-dev -y
      printf '%b' "${GR:?}Changing directory home!${N0:?}\n"
      cd /home/"$(whoami)"/ || exit # change to home directory
      printf '%b' "${GR:?}Creating directory wow!${N0:?}\n"
      mkdir wow &>/dev/null # create folder named wow
      printf '%b' "${GR:?}Changing directory wow!${N0:?}\n"
      cd /home/"$(whoami)"/wow || exit # change to the wow directory
    }

    function build_make {
      printf '%b' "${GR:?}Creating directory build!${N0:?}\n"
      mkdir build &>/dev/null # make a new directory in mangos-wotlk called build
      printf '%b' "${GR:?}Changing directory build!${N0:?}\n"
      cd build || exit # change to the newly created directory called build
      printf '%b' "${GR:?}Configurating!${N0:?}\n"
      # cmake command
      cmake .. -DCMAKE_INSTALL_PREFIX=\../run -DBUILD_EXTRACTORS=ON -DPCH=1 -DDEBUG=0 -DBUILD_PLAYERBOT=OFF
      printf '%b' "${GR:?}Starting, please wait${N0:?}\n"
      # start counting (seconds)
      START="$SECONDS"
      make
      make install &>/dev/null
      # get seconds since start
      DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
      # convert seconds
      TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
      echo
      printf '%b' "Build time: ${G1:?}$TIMER${N0:?}\n"
    }

    DIALOG_CANCEL=1
    DIALOG_ESC=255
    HEIGHT=10
    WIDTH=45
    CHOICE_HEIGHT=3
    BACKTITLE="Install, Update, Upgrade Server"
    TITLE="Server Cores & Databases"
    MENU="Choose one of the following expansions:"

    OPTIONS=(1 "CMaNGOS Classic"
      2 "CMaNGOS The Burning Crusade"
      3 "CMaNGOS Wrath of the Lich King")

    exec 3>&1
    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --cancel-label "Exit" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 1>&3)

    # error status
    EXIT_STATUS=$?
    exec 3>&-
    case $EXIT_STATUS in
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated."
      exit
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
    esac

    clear
    case $CHOICE in

    ### CMaNGOS Classic (vanilla) ##############################################

    1)

      # prepare make
      preparing_make
      # if already cloned
      if [[ ! -f /home/"$(whoami)"/wow/mangos-classic/README.md ]]; then
        # git clone repos
        git clone git://github.com/cmangos/mangos-classic.git 2>&1
        git clone git://github.com/cmangos/classic-db.git 2>&1
      fi
      # change directory into classic
      cd /home/"$(whoami)"/wow/mangos-classic || exit
      build_make
      continue
      # CODE MISSING !!

      ;;

      ### CMaNGOS The Burning Crusade (TBC) ####################################

    2)

      # prepare make
      preparing_make
      # if already cloned
      if [[ ! -f /home/"$(whoami)"/wow/mangos-tbc/README.md ]]; then
        # git clone repos
        git clone git://github.com/cmangos/mangos-tbc.git 2>&1
        git clone git://github.com/cmangos/tbc-db.git 2>&1
      fi
      # change directory into tbc
      cd /home/"$(whoami)"/wow/mangos-tbc || exit
      build_make
      continue
      # CODE MISSING !!

      ;;

      ### CMaNGOS Wrath of the Lich King (WOTLK) ###############################

    3)

      # prepare make
      preparing_make
      # if already cloned
      if [[ ! -f /home/"$(whoami)"/wow/mangos-wotlk/README.md ]]; then
        # git clone repos
        git clone git://github.com/cmangos/mangos-wotlk.git 2>&1
        git clone git://github.com/cmangos/wotlk-db.git 2>&1
      fi
      # change directory into wotlk
      cd /home/"$(whoami)"/wow/mangos-wotlk || exit
      # build make
      build_make
      continue
      # CODE MISSING !!

      ;;

    esac

    ;;

  Config)

    # CODE MISSING !!

    ;;

  Core)

    # CODE MISSING !!

    ;;

  Data)

    # CODE MISSING !!

    ;;

  Bots)

    # CODE MISSING !!

    ;;

  Seed)

    # get remote information from transmission, create a file
    transmission-remote -t all -i >/var/log/ms/transmission_list 2>&1
    # pidof transmission-daemon, cli, pid/status
    PIDOFP2P_CLI=$(pidof transmission-cli 2>&1)
    PIDOFP2P_DAE=$(pidof transmission-daemon 2>&1)
    # is transmission-cli installed?
    if ! [ -x "$(command -v transmission-cli)" ]; then
      P2P_TMISSION="Not Found"
      P2P_INTRANET="0.0.0.0:9091"
      P2P_SEED_NME="expansion_maps.zip"
      P2P_PEERS_CO="N/A"
      P2P_DOWNLOAD="N/A "
      P2P_UPLOADED="N/A "
      P2P_STATUS="N/A"
      P2P_PROGRE="N/A"
      P2P_RATIOS="N/A"
      P2P_PEERS_S2=""
      P2P_PEERS_DL=""
      P2P_SLASH_SM=""
    else
      if [ -f /var/log/ms/transmission_list ]; then
        # cat that file
        P2P_INFO=$(cat /var/log/ms/transmission_list 2>&1)
        # peers, connected, seeding to, downloading from
        P2P_PEERS_CO=$(echo "$P2P_INFO" 2>&1 | grep "Peers" 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
        P2P_PEERS_S2=$(echo "$P2P_INFO" 2>&1 | grep "Peers" 2>&1 | awk '{ print $7 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
        P2P_PEERS_DL=$(echo "$P2P_INFO" 2>&1 | grep "Peers" 2>&1 | awk '{ print $10 }' 2>&1)
        # get progress
        if echo "$P2P_INFO" 2>&1 | grep -q -o "Percent Done: 100%" 2>&1; then
          P2P_SEED_NME="vanilla_maps.zip"
        else
          P2P_SEED_NME="vanilla_maps.???"
        fi
        # get progress
        if echo "$P2P_INFO" 2>&1 | grep -q -o "Percent Done: 100%" 2>&1; then
          P2P_PROGRE="100%"
        else
          P2P_PROGRE=$(echo "$P2P_INFO" 2>&1 | grep -Eo "Percent Done:.*" 2>&1 |
            awk '{ print $3 }' 2>&1)
        fi
        # get download stats
        P2P_DOWNLOAD=$(echo "$P2P_INFO" 2>&1 | grep -o "Downloaded:.*" 2>&1 |
          awk '{ print $2 }' 2>&1)
        P2P_DOWNLOAD=$(echo "$P2P_DOWNLOAD ")
        # get upload stats
        P2P_UPLOADED=$(echo "$P2P_INFO" 2>&1 | grep -o "Uploaded:.*" 2>&1 |
          awk '{ print $2 }' 2>&1)
        P2P_UPLOADED=$(echo "$P2P_UPLOADED ")
        # get ratio
        P2P_RATIOS=$(echo "$P2P_INFO" 2>&1 | grep -o "Ratio:.*" 2>&1 |
          awk '{ print $2 }' 2>&1)
        # get status
        P2P_STATUS=$(echo "$P2P_INFO" 2>&1 | grep -o "State:.*" 2>&1 |
          awk '{ print $2 }' 2>&1)
      fi
      # transmission-daemon status
      case "$(pidof transmission-daemon 2>&1 | wc -w 2>&1)" in

      "0") # not runnning

        P2P_TMISSION="Offline"
        P2P_INTRANET="0.0.0.0:9091"
        P2P_SEED_NME="expansion_maps.zip"
        P2P_PEERS_CO="N/A"
        P2P_DOWNLOAD="N/A "
        P2P_UPLOADED="N/A "
        P2P_STATUS="N/A"
        P2P_PROGRE="N/A"
        P2P_RATIOS="N/A"
        P2P_PEERS_S2=""
        P2P_PEERS_DL=""
        P2P_SLASH_SM=""

        ;;

      "1") # running

        P2P_TMISSION="Online"
        P2P_INTRANET="$(hostname -I 2>&1 | xargs 2>&1):9091"
        P2P_SEED_NME="vanilla_maps.zip"
        P2P_SLASH_SM="/"

        ;;

      "*") # something

        P2P_TMISSION="Online+"
        P2P_INTRANET="$(hostname -I 2>&1 | xargs 2>&1):9091"
        P2P_PEERS_CO="N/A"
        P2P_PEERS_S2="N/A"
        P2P_PEERS_DL="N/A"
        P2P_SLASH_SM=""

        ;;

      esac
    fi

    # p2p dashboard
    P2P_DASH=$(echo "
SeedBox..: $P2P_TMISSION
Access...: $P2P_INTRANET
Filename.: $P2P_SEED_NME
Download.: ${P2P_DOWNLOAD:?}Unlimited
Upload...: ${P2P_UPLOADED:?}128kb/s
Status...: $P2P_STATUS
Progress.: $P2P_PROGRE
Ratio....: $P2P_RATIOS
Peers....: $P2P_PEERS_CO$P2P_SLASH_SM$P2P_PEERS_S2$P2P_SLASH_SM$P2P_PEERS_DL
")
    RESULT=$(
      echo "CMaNGOS Maps (P2P/Import)"
      echo "$P2P_DASH"
    )
    display_result "SeedBox"
    # CODE MISSING !!

    ;;

  Maps)

    DIALOG_CANCEL=1
    DIALOG_ESC=255
    HEIGHT=10
    WIDTH=40
    CHOICE_HEIGHT=3
    BACKTITLE="Install, Import, Maps"
    TITLE="Server Expansion Maps"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Extract Maps (from client)"
      2 "Start, Import, Seed Maps"
      3 "Stop, Install, Remove SeedBox")

    exec 3>&1
    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --cancel-label "Exit" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 1>&3)

    # error status
    EXIT_STATUS=$?
    exec 3>&-
    case $EXIT_STATUS in
    "$DIALOG_CANCEL")
      clear
      echo "Program terminated."
      exit
      ;;
    "$DIALOG_ESC")
      clear
      echo "Program aborted." >&2
      exit 1
      ;;
    esac

    clear
    case $CHOICE in

    1) ;;

      # CODE MISSING !!

    2)

      # remove old files
      rm /var/tmp/optional.out &>/dev/null
      dialog --backtitle "Start, Import, Seed Maps" \
        --title "Maps Checkbox " \
        --checklist "Choose from following" 0 0 0 \
        1 "CMaNGOS Classic" off \
        2 "CMaNGOS The Burning Crusade" off \
        3 "CMaNGOS Wrath of the Lich King" off \
        2>/var/tmp/optional.out
      OPTIONAL=$(cat /var/tmp/optional.out | tr -d ' ')
      clear
      # outputs
      CLASSIC_MAPS=$(printf '%b' "Setting up ${GR:?}Classic Maps${N0:?} for Download/Import!\n")
      TBC_MAPS=$(printf '%b' "Setting up ${GR:?}The Burning Crusade Maps${N0:?} for Download/Import!\n")
      WOTLK_MAPS=$(printf '%b' "Setting up ${GR:?}Wrath of the Lich King Maps${N0:?} for Download/Import!\n")
      # options
      if [[ "$OPTIONAL" -eq "1" ]]; then
        echo "$CLASSIC_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "2" ]]; then
        echo "$TBC_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "3" ]]; then
        echo "$WOTLK_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "12" ]]; then
        echo "$CLASSIC_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        echo "$TBC_MAPS"
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "13" ]]; then
        echo "$CLASSIC_MAPS"
        echo "$WOTLK_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "23" ]]; then
        echo "$TBC_MAPS"
        echo "$WOTLK_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      elif [[ "$OPTIONAL" -eq "123" ]]; then
        echo "$CLASSIC_MAPS"
        echo "$TBC_MAPS"
        echo "$WOTLK_MAPS"
        rm /var/tmp/optional.out &>/dev/null
        # CODE MISSING !!
        continue
      fi
      exit

      ;;

    3)

      # CODE MISSING !!

      ;;

    esac

    ;;

  Remote)

    # CODE MISSING !!

    ;;

  Realm)

    # CODE MISSING !!

    ;;

  System)

    RESULT=$(# Hostname
      echo "Hostname.: $(hostname)"
      # Uptime
      echo "Uptime...: $(uptime 2>&1 | awk '{print $3,$4}' 2>&1 | sed 's/,//' 2>&1)"
      # Manufacturer
      echo "Mfr......: $(cat /tmp/sys_info 2>&1 | grep "vendor" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)"
      # Product Name
      echo "Product..: $(
        PRSERVER=$(cat /tmp/sys_info 2>&1 | grep "product" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)
        if [ -f /.dockerenv ]; then
          echo "Docker"
        else
          echo "$PRSERVER"
        fi
      )"
      # Version
      if [ -f /sys/class/dmi/id/product_version ]; then
        echo "Version..: $(cat /sys/class/dmi/id/product_version 2>&1)"
      else # just some random n because no version was found.
        RV=$((((RANDOM % 3) + 1)))
        echo "Version..: 0.0$RV"
      fi
      # Serial Number
      echo "Serial...: $(cat /tmp/sys_info 2>&1 | grep "serial" 2>&1 | head -1 2>&1 | rev 2>&1 | awk -F: '{ print $1 }' 2>&1 | rev 2>&1 | xargs 2>&1)"
      # Machine Type
      echo "Machine..: $(
        VSERVER=$(lscpu 2>&1 | grep Hypervisor 2>&1 | wc -l 2>&1)
        if [ $VSERVER -gt 0 ]; then
          echo "VM"
        elif [ -f /.dockerenv ]; then
          echo "Docker"
        else
          echo "Physical"
        fi
      )"
      # Operating System
      echo "OS.......: $(
        if [ -f /.dockerenv ]; then
          uname
        else
          echo "$(hostnamectl 2>&1 | grep "Operating System" 2>&1 | cut -d ' ' -f5- 2>&1)"
        fi
      )"
      # Kernel
      echo "Kernel...: $(uname -r 2>&1)"
      # Architecture
      echo "Arch.....: $(arch 2>&1)"
      # Processor Name
      echo "CPU Name.: $(
        if [ -f /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq ]; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>&1)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>&1)
          if cat /tmp/sys_info | grep -q "Raspberry"; then
            CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 |
              cut -c -4 2>&1)
            echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1') @ ${CPU_FREQ:?}GHz ($CPU_TEMP)"
          else
            echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')"
          fi
        else
          echo "$(lscpu | grep 'Model name' | cut -f 2 -d ":" | awk '{$1=$1}1')"
        fi
      )"
      # Active User
      echo "Users....: $(
        if [ -f /.dockerenv ]; then
          getent group sudo
        else
          echo "$(w 2>&1 | cut -d ' ' -f1 2>&1 | grep -v USER 2>&1 | xargs -n1 2>&1 | tail -1 2>&1)"
        fi
      )"
      # System Main IP
      echo "IP.......: $(hostname -I 2>&1)"
      # Memory Free/Total
      echo "RAM Free.: $(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)/$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)"
      # Swap Usage
      echo "RAM Swap.: $(free --mega 2>&1 | grep "Swap" 2>&1 | awk '{ print $4 }' 2>&1)"
      # CPU Usage
      echo "CPU Load.: $(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"
    )
    display_result "System Information"

    ;;

  Repo)

    # repo space
    REPO_SIZE=$(du -h --max-depth=1 "$HOME"/wow/ 2>&1)
    RESULT=$(
      echo "Repositories: Core, Database & Backup"
      echo "$REPO_SIZE"
    )
    display_result "Repo Size"

    ;;

  Disk)

    RESULT=$(df -h 2>&1)
    display_result "Disk Space"

    ;;

  Debug)

    # fix ownership
    sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" /usr/local/bin/mangos 2>&1
    # remove file
    sudo rm /usr/local/bin/server_menu 2>&1
    # create file
    sudo touch /usr/local/bin/server_menu 2>&1
    # chmod file
    sudo chmod +x /usr/local/bin/server_menu 2>&1
    # nano file
    sudo nano /usr/local/bin/server_menu 2>&1
    # CODE MISSING !!

    ;;

  Remove)

    # CODE MISSING !!

    ;;

  esac
done
