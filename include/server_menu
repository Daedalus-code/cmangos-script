#!/bin/bash

#################################
#   C M @ N G 0 S  -  M 3 N U   #
################################# .. ALPHA VERSION! expect nothing !

# By Rainman
# V20212702-barebone
# 0.3.3.6

# sources:
# https://www.osrsbox.com/blog/2019/04/13/installing-a-wow-vanilla-server-on-ubuntu-linux/
# https://www.osrsbox.com/blog/2019/04/14/configuring-a-wow-vanilla-server-on-ubuntu-linux/
# https://www.2daygeek.com/bash-shell-script-view-linux-system-information/
# https://apple.stackexchange.com/questions/4286/is-there-a-mac-os-x-terminal-version-of-the-free-command-in-linux-systems
# https://medium.com/@takanori.ishikawa/how-to-show-progress-bar-while-unzipping-tons-of-files-7b1ea7a84b01
# https://askubuntu.com/questions/1705/how-can-i-create-a-select-menu-in-a-shell-script
# https://linuxcommand.org/lc3_adv_dialog.php

# check, install missing dialog
if ! [ -x "$(command -v dialog)" ]; then
  echo "Dialog Not Installed"
  sleep 1
  # uname -a outputs linux
  if uname -a 2>&1 | grep -q -Eo "Linux"; then
    echo "Found Linux, Please Wait"
    # linux
    sudo apt-get install dialog -y 2>&1
    # uname -a outputs darwin
  elif uname -a 2>&1 | grep -q -Eo "Darwin"; then
    echo "Found Darwin, Please Wait"
    if ! [ -x "$(command -v brew)" ]; then
      echo "Brew Not Found"
      # install brew
      read -r -p "Install Brew? y/n "
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Please Wait"
        # https://brew.sh
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      fi
    fi
    # darwin
    brew install dialog 2>&1
  fi
fi

### Get System Information #####################################################

# do this once, if not found
if [ ! -f /tmp/sys_info ]; then
  echo "Getting System Information!"
  # Hostname
  echo "Hostname.: $(hostname)" >/tmp/sys_info 2>&1
  # Uptime
  echo "Uptime...: $(uptime | awk '{print $3,$4}' | sed 's/,//')" >>/tmp/sys_info 2>&1
  # Manufacturer
  echo "Mfr......: $(cat /sys/class/dmi/id/chassis_vendor)" >>/tmp/sys_info 2>&1
  # Product Name
  echo "Product..: $(cat /sys/class/dmi/id/product_name)" >>/tmp/sys_info 2>&1
  # Version
  echo "Version..: $(cat /sys/class/dmi/id/product_version)" >>/tmp/sys_info 2>&1
  # Serial Number
  echo "Serial...: $(cat /sys/class/dmi/id/product_serial)" >>/tmp/sys_info 2>&1
  # Machine Type
  echo "Machine..: $(
    VSERVER=$(lscpu | grep Hypervisor | wc -l)
    if [ $VSERVER -gt 0 ]; then echo "VM"; else echo "Physical"; fi
  )" >>/tmp/sys_info 2>&1
  # Operating System
  echo "OS.......: $(hostnamectl | grep "Operating System" | cut -d ' ' -f5-)" >>/tmp/sys_info 2>&1
  # Kernel
  echo "Kernel...: $(uname -r)" >>/tmp/sys_info 2>&1
  # Architecture
  echo "Arch.....: $(arch)" >>/tmp/sys_info 2>&1
  # Processor Name
  echo "CPU Name.: $(awk -F':' '/^model name/ {print $2}' /proc/cpuinfo | uniq | sed -e 's/^[ \t]*//')" >>/tmp/sys_info 2>&1
  # Active User
  echo "Users....: $(w | cut -d ' ' -f1 | grep -v USER | xargs -n1 | tail -1)" >>/tmp/sys_info 2>&1
  # System Main IP
  echo "IP.......: $(hostname -I)" >>/tmp/sys_info 2>&1
  # Memory Usage
  echo "RAM Free.: $(free | awk '/Mem/{printf("%.2f%"), $3/$2*100}')" >>/tmp/sys_info 2>&1
  # Swap Usage
  echo "RAM Swap.: $(free | awk '/Swap/{printf("%.2f%"), $3/$2*100}')" >>/tmp/sys_info 2>&1
  # CPU Usage
  echo "CPU Load.: $(cat /proc/stat | awk '/cpu/{printf("%.2f%\n"), ($2+$4)*100/($2+$4+$5)}' | awk '{print $0}' | head -1)" >>/tmp/sys_info 2>&1
  echo "OK!"
fi

### Dialog Menu ################################################################

export NCURSES_NO_UTF8_ACS=1
DIALOG_CANCEL=1
DIALOG_ESC=255
HEIGHT=21
WIDTH=45
CHOICE_HEIGHT=14

BACKTITLE="CMaNGOS features"
TITLE="<  C M a N G O S - M e n u  >"
MENU="Choose one of the following options:"

OPTIONS=(Start "Start Server"
  Stop "Stop Server"
  Restart "Restart Server"
  Config "Server Configuration"
  Update "Update Server, Script"
  Install "Setup Server"
  Maps "Download, Import Maps"
  Database "Database Configuration"
  Remote "Remote Access"
  Uninstall "Remove Everything"
  System "System Information"
  Disk "Display Disk Space"
  Repo "Display Repo Space"
  Debug "Debug Script")

while true; do
  exec 3>&1
  CHOICE=$(dialog --clear \
    --backtitle "$BACKTITLE" \
    --title "$TITLE" \
    --cancel-label "Exit" \
    --menu "$MENU" \
    $HEIGHT $WIDTH $CHOICE_HEIGHT \
    "${OPTIONS[@]}" \
    2>&1 1>&3)

  # error status
  EXIT_STATUS=$?
  exec 3>&-
  case $EXIT_STATUS in
  "$DIALOG_CANCEL")
    clear
    echo "Program terminated."
    exit
    ;;
  "$DIALOG_ESC")
    clear
    echo "Program aborted." >&2
    exit 1
    ;;
  esac

  clear

  display_result() {
    dialog --title "$1" \
      --no-collapse \
      --msgbox "$RESULT" 0 0
  }

  case $CHOICE in

  0)
    clear
    echo "Program terminated."
    ;;

  Start)

    # look for install folders (mangos-classic)
    if find "/home/$(whoami)/wow" -type d -name "mangos-classic" &>/dev/null; then
      CORE_STATUS="1"
    else
      CORE_STATUS="0"
    fi
    # look for install folders (classic-db)
    if find "/home/$(whoami)/wow" -type d -name "classic-db" &>/dev/null; then
      DB_STATUS="1"
    else
      DB_STATUS="0"
    fi
    REPO_STATUS=$(echo "$CORE_STATUS+$DB_STATUS" 2>&1 | bc 2>&1)
    if [[ "$REPO_STATUS" -eq "2" ]]; then
      # all set with repos, core and database
      RESULT=$(echo "Found Install")
      display_result "Everything Set"
      # CODE MISSING !!
    else
      # all set with repos, core and database
      RESULT=$(echo "Nothing!")
      display_result "No Install Found"
      # CODE MISSING !!
    fi

    ;;

  Stop)

    # CODE MISSING !!

    ;;

  Restart)

    # CODE MISSING !!

    ;;

  Config)

    # CODE MISSING !!

    ;;

  Install)

    HEIGHT=15
    WIDTH=40
    CHOICE_HEIGHT=4
    BACKTITLE="Install Server"
    TITLE="Server Cores & Databases"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "CMaNGOS Classic"
      2 "CMaNGOS The Burning Crusade"
      3 "CMaNGOS Wrath of the Lich King")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    1)

      # preparing
      sudo apt update && sudo apt upgrade
      # install all the required packages to build CMaNGOS
      sudo apt install build-essential gcc g++ automake git-core autoconf make patch libmysql++-dev mysql-server libtool libssl-dev grep binutils zlibc libc6 libbz2-dev cmake subversion libboost-all-dev -y
      cd || exit     # change to home directory
      mkdir wow      # create folder named wow
      cd wow || exit # change to the wow directory
      git clone git://github.com/cmangos/mangos-classic.git
      git clone git://github.com/cmangos/classic-db.git
      cd mangos-classic || exit # change to the mangos-classic directory
      mkdir build               # make a new directory in mangos-classic called build
      cd build || exit          # change to the newly created directory called build
      # cmake command
      cmake .. -DCMAKE_INSTALL_PREFIX=\../run -DBUILD_EXTRACTORS=ON -DPCH=1 -DDEBUG=0 -DBUILD_PLAYERBOT=OFF
      make
      make install
      # CODE MISSING !!

      ;;

    2)
      echo "You chose Option 2"
      ;;
    3)
      echo "You chose Option 3"
      ;;
    esac

    ;;

  Update)

    # CODE MISSING !!

    ;;

  Maps)

    echo "Importing Maps"
    N_FILES=$(unzip -l /seedbox/vanilla_maps.zip 2>&1 |
      grep -E ".map|.vmo|.vmtile|.vmtree|temp_gameobject_models|.dbc|.mmtile|.mmap" 2>&1 |
      wc -l 2>&1)
    unzip -o /seedbox/vanilla_maps.zip -d /home/wow/mangos-classic/run/ 2>&1 |
      pv -l -s "${N_FILES[0]}" >/dev/null
    # CODE MISSING !!

    ;;

  Database)

    # CODE MISSING !!

    ;;

  Remote)

    # CODE MISSING !!

    ;;

  System)

    RESULT=$(cat /tmp/sys_info)
    display_result "System Information"

    ;;

  Disk)

    RESULT=$(df -h)
    display_result "Disk Space"

    ;;

  Repo)

    # repo space
    REPO_SIZE=$(du -h --max-depth=1 "$HOME"/wow/ 2>&1)
    RESULT=$(
      echo "Repositories: Core, Database & Backup"
      echo "$REPO_SIZE"
    )
    display_result "Repo Size"

    ;;

  Debug)

    # fix ownership
    sudo chown -R "$(whoami)":"$(groups | awk '{ print $1 }')" /usr/local/bin/mangos 2>&1
    # remove file
    sudo rm /usr/local/bin/server_menu 2>&1
    # create file
    sudo touch /usr/local/bin/server_menu 2>&1
    # chmod file
    sudo chmod +x /usr/local/bin/server_menu 2>&1
    # nano file
    sudo nano /usr/local/bin/server_menu 2>&1
    # CODE MISSING !!

    ;;

  esac
done
