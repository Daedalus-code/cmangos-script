#!/bin/bash

# script

############################################################################
#                      C M a N G O S  -  H E L P E R                       #
#               Continued Massive Network Game Object Server               #
############################################################################

# Built on a Linux ubuntu 5.4.0-1028-raspi - (Raspberry Pi4_8GB)
# https://ubuntu.com/download/raspberry-pi

# C(ontinued)-MaNGOS (Classic fork)

# By Rainman
# V20210502
# 4.7.3.8

# codes
while :; do
  clear

  # config directory
  # shellcheck disable=SC1091
  source /scripts/server.txt # please edit if wrong.

  # color

  CY='\e[36m'   # Cyan
  G0='\e[1;32m' # Green
  G1='\e[92m'   # Green light
  GR='\e[90m'   # Grey
  N0='\033[0m'  # No color
  P1='\e[0;35m' # Purple
  R0='\e[31m'   # Red
  R1='\e[91m'   # Red light
  Y0='\e[33m'   # Yellow
  Y1='\e[93m'   # Yellow light

  # dialog, ncurses no utf8 acs
  # ! -> https://github.com/scarygliders/X11RDP-o-Matic/issues/45
  export NCURSES_NO_UTF8_ACS=1

  # get database info
  if mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT SUM(online) FROM ${db_characters:?}.characters;" &>/dev/null; then
    menu_on_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT SUM(online) FROM ${db_characters:?}.characters;" 2>/dev/null)
  else
    menu_on_count=$(printf '%b' "${R0:?}0${N0:?}")
  fi
  if mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM ${db_characters:?}.guild;" &>/dev/null; then
    menu_gu_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM ${db_characters:?}.guild;" 2>/dev/null)
  else
    menu_gu_count=$(printf '%b' "${R0:?}0${N0:?}")
  fi

  # get date
  NOW="$(date +"%m.%d.%Y")"

  # get load
  load="$(while IFS= read -r i; do echo "${i%?}"; done </proc/loadavg 2>/dev/null | awk '{ print $1,$2,$3 }')"

  # service status
  world_service=mangosd
  realm_service=realmd

  # realmd service
  case "$(pidof $realm_service | wc -w)" in
  0) menu_realmd="${GR:?}Realm${N0:?}" ;;
  1) menu_realmd="${G0:?}Realm${N0:?}" ;;
  *) menu_realmd="${Y0:?}Realm${N0:?}" ;;
  esac

  # mangosd service
  case "$(pidof $world_service | wc -w)" in
  0) menu_mangosd="${GR:?}MaNGOS${N0:?}" ;;
  1) menu_mangosd="${G0:?}MaNGOS${N0:?}" ;;
  *) menu_mangosd="${Y0:?}MaNGOS${N0:?}" ;;
  esac
  # codes done

  # menu

  printf "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -${N0:?}
    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |${P1:?}
   |_____|_|_|_|__,|_|___|_____|_____|_____|${N0:?}
           C(ontinued)-MaNGOS Helper${GR:?}
              - - - - - - - - - -${N0:?}
               Online Players $menu_on_count
                   Guilds $menu_gu_count

                $load
                $menu_mangosd $GR|$N0 $menu_realmd

   A : Login (command)      t : Characters
   a : Create account       u : Accounts
   c : Check for updates    g : Guilds
   m : Update CMaNGOS       e : Config
   d : Update Database      p : Patch
   w : Update Helper        o : Ping
   s : Shutdown server      l : Logs
   r : Restart server       Q : Quit

"
  read -r -n1 -s
  case "$REPLY" in

  # menu done

  "a")

    # codes
    ac_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM ${db_realmd:?}.account;" 2>/dev/null)
    bn_count=$(mysql --defaults-extra-file="$sql_mycnf" -N --execute="SELECT count(*) FROM $db_realmd.account_banned;" 2>/dev/null)
    # codes done

    clear

    # menu

    printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -
${N0:?}                                       __
   .---.-.----.----.-----.--.--.-----.|  |_
   |  _  |  __|  __|  _  |  |  |     ||   _|${P1:?}
   |___._|____|____|_____|_____|__|__||____|
           ${N0:?}C(ontinued)-MaNGOS Helper
             ${GR:?}- - - - - - - - - -${N0:?}

                Accounts${G0:?}...:${N0:?} $ac_count
                Banned${G0:?}.....:${N0:?} $bn_count

                    ${P1:?}Info:

           ${G0:?}Select account operation${N0:?}

              c : Create account
              d : Delete account

>"

    read -r -n1 -s
    case "$REPLY" in

    # create account

    "c")

      clear
      printf "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -${N0:?}

           ${N0:?}0: Vanilla${G0:?}
           1: The Burning Crusade
           2: Wrath of the Lich King

           ${N0:?}0: Player${G0:?}
           1: Moderator
           2: Game Master
           3: Administrator${N0:?}

      Minimum 5 characters account name.

        Create new account (${P1:?}username${N0:?})
        Set the (${P1:?}expansion${N0:?}) version.
        Set the (${P1:?}account${N0:?}) privilege.

        ${P1:?}Example${N0:?}: 'username' '0' '0'"

      # menu done

      # username, password, expansion, gmlevel

      echo
      echo
      echo "Username"
      read -r USR
      if [[ -z "$USR" ]]; then
        printf "empty"
        echo
      else
        printf '%b' "[${G0:?}ok${N0:?}] $USR"
        echo
        echo "Password"
        read -r -s PWD
        if [[ -z "$PWD" ]]; then
          printf "empty"
          echo
        else
          printf "[${G0:?}ok${N0:?}] Password"
          echo
          echo "Expansion - 0"
          read -r -s XPV
          if [[ -z "$XPV" ]]; then
            printf "empty"
            echo
          else
            printf '%b' "[${G0:?}ok${N0:?}] Expansion ($XPV)"
            echo
            echo "GMlevel - 0-3"
            read -r -s LVL
            if [[ -z "$LVL" ]]; then
              printf "empty"
              echo
            else
              printf '%b' "[${G0:?}ok${N0:?}] GMlevel ($LVL)"
              echo "${user_nc:?}
${pass_nc:?}
.account create $USR $PWD
.account set addon $USR $XPV
.account set gmlevel $USR $LVL" >"${folder_wow:?}"/tmp.txt
              nc -q 1 "${host_nc:?}" "${port_nc:?}" <"${folder_wow:?}"/tmp.txt
              rm "${folder_wow:?}"/tmp.txt
              echo
              echo
              printf '%b' "[${G0:?}ok${N0:?}] Account '${P1:?}$USR${N0:?}' ($XPV/$LVL) created."
              echo
              echo
            fi
          fi
        fi
      fi
      echo

      ;;

      # username, password, expansion, gmlevel done

      # create account done

      # delete account

    "d")

      # codes
      # check for backup
      # realmd backup
      FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        realmd_backup="[${R0:?}old${N0:?}]"
        echo
      else
        realmd_backup="[${G0:?}ok${N0:?}]"
        echo
      fi
      # characters backup
      FILE="$folder_wow/backup/$db_characters-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        charac_backup="[${R0:?}old${N0:?}]"
        echo
      else
        charac_backup="[${G0:?}ok${N0:?}]"
        echo
      fi
      # codes done

      # menu

      clear

      echo
      printf '%b' "${R0:?}
 @@@@@@@  @@@@@@@@ @@@      @@@@@@@@ @@@@@@@ @@@@@@@@
 @@!  @@@ @@!      @@!      @@.        @@!   @@!
 @!@  !@! @!!!.:   @!!      @!!.:!     @!!   @!!!:.
 .!.  .!! !.:      !!.      .!:        !.:   !!.
 .: :  .  : .:  .. : .: : . . :. :.:    .    : .: .:.${N0:?}

 Note: Make sure you have backup laying around!
 $realmd_backup$charac_backup

 Delete by id ->
 ${P1:?}Examples${N0:?}: 'id' - 'id1,id2' - 'id1 AND id5'
 Delete by username ->
 ${P1:?}Examples${N0:?}: 'username' - 'username1,username2'
 Select (${G0:?}username${N0:?}) or (${G0:?}id${N0:?}) - Press Enter To Confirm"

      echo
      echo
      read -r -p " Show list" </dev/tty
      echo
      mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT username, gmlevel, id FROM $db_realmd.account;"
      echo
      printf '%b' " Delete directly from '${P1:?}$db_realmd.account${N0:?}'"
      echo

      printf "

>"
      read -r ID
      echo
      if [[ -z "$ID" ]]; then
        printf '%s\n' "empty"
      else
        deleted=$(printf '%b' "${R1:?}DELETE${N0:?} '$ID' ${R1:?}?!${N0:?}")
        echo
        read -r -p "$deleted

Are You Sure? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # delete by id -> examples: ('id') (id1,id2,) & (id1 AND id5)
          mysql --defaults-extra-file="$sql_mycnf" --execute="DELETE FROM $db_realmd.account WHERE id = $ID;" &>/dev/null
          mysql --defaults-extra-file="$sql_mycnf" --execute="DELETE FROM $db_realmd.account WHERE id IN ($ID);" &>/dev/null
          mysql --defaults-extra-file="$sql_mycnf" --execute="DELETE FROM $db_realmd.account WHERE id BETWEEN $ID;" &>/dev/null
          # delete by username -> examples: ('username') & (username1,username2,)
          mysql --defaults-extra-file="$sql_mycnf" --execute="DELETE FROM $db_realmd.account WHERE username='$ID';" &>/dev/null
          mysql --defaults-extra-file="$sql_mycnf" --execute="DELETE FROM $db_realmd.account WHERE username IN ($ID);" &>/dev/null
          sleep 1
          echo
          echo " kek!"
          printf "(∩ ᐛ )⊃━━ "
          sleep 3
          printf "^${Y0:?}｡·.·${N0:?}ﾟ${Y0:?}★☆ﾟ.｡*${N0:?}(つ﹏⊂)${Y0:?}?･ ｡★·"
          sleep 2
          printf ".${N0:?}..poof!"
          sleep 1
          echo
          echo
          printf '%b' "$ID ${N0:?}..vanished!"
          sleep 1
          echo
          echo
        fi
      fi
      echo

      ;;

    *)
      echo "empty"
      echo
      ;;
    esac
    read -r -p "Press Enter to continue" </dev/tty
    echo

    ;;

    # menu done

    # delete account done

    # Login (command)

    # * f★★ck; b7122@rd >> @ct1vlz1★n && chln@.

  "A")

    while :; do
      clear

      # codes
      # service status
      world_service=mangosd
      realm_service=realmd

      # realmd service
      case "$(pidof $realm_service | wc -w)" in
      0) command_realmd="[${R0:?}off${N0:?}]" ;;
      1) command_realmd="[${G0:?}ok${N0:?}]" ;;
      *) command_realmd="[${Y0:?}ok${N0:?}]" ;;
      esac

      # mangosd service
      case "$(pidof $world_service | wc -w)" in
      0) command_mangosd="[${R0:?}off${N0:?}]" ;;
      1) command_mangosd="[${G0:?}ok${N0:?}]" ;;
      *) command_mangosd="[${Y0:?}ok${N0:?}]" ;;
      esac

      # Thank you! -> https://stackoverflow.com/questions/59862020

      # shellcheck disable=SC2034  # Unused variables left for readability
      # init_colors
      init_colors() {
        reset=$(tput sgr0)
        bold=$(tput bold)
        black=$(tput setaf 0)
        red=$(tput setaf 1)
        green=$(tput setaf 2)
        yellow=$(tput setaf 3)
        blue=$(tput setaf 4)
        magenta=$(tput setaf 5)
        cyan=$(tput setaf 6)
        white=$(tput setaf 7)
        user_color=$bold
      }

      # colorstring reads from stdin and uses parameter 1 as an escape sequence
      # with more parameters the first is used as a color, the other as the string to be modified
      # It will set colors until the last space sqquence
      colorstring() {
        case $# in
        0) # invalid
          echo "colorstring called without parameters"
          ;;
        1)
          sed -r "s/^.*[^ ]/$1&${reset}/"
          ;;
        *)
          color="$1"
          shift
          sed -r "s/^.*[^ ]/${color}&${reset}/" <<<"$@"
          ;;
        esac
      }
      dot_field() {
        # todo: Change implementation when field can be 2 words with a space in between
        printf "%-14.14s" "$1" | colorstring "${white}" | tr ' ' '.'
        # The : must be printed in a second statement when you don't want cyan dots.
        printf ':'
      }
      # todo: Change implementation when field can be 2 words with a space in between
      space_number() {
        printf "%-9.9s" "$1" | colorstring "${green}"
      }
      # todo: add logic when only 4 parameters are given
      printline() {
        echo "      $(dot_field "$1") $(space_number "$2")$(dot_field "$3") $(space_number "$4")$(dot_field "$5") $(space_number "$6")"
      }
      # init the color variables
      init_colors

      # uptime
      cm_uptime="${N0:?}Time""$W""$(uptime)${N0:?}"

      # log data

      # Realmd.log

      # look for error
      if grep -E -q ".*ERROR*." "${folder_core:?}"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "error"
        cm_realmd_log="[${R0:?}Error${N0:?}]"
      else
        # if nothing, print "ok"
        cm_realmd_log="[${G0:?}ok${N0:?}]"
      fi
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "empty"
        cm_realmd_log_empty="[${Y0:?}Empty${N0:?}]"
      fi
      # Realmd.log done

      # Server.log

      # look for error
      if grep -E -q ".*ERROR*." "$folder_core"/run/logs/Server.log &>/dev/null; then
        # if any, print "error"
        cm_server_log="[${R0:?}Error${N0:?}]"
      else
        # if nothing, print "ok"
        cm_server_log="[${G0:?}ok${N0:?}]"
      fi
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Server.log &>/dev/null; then
        # if any, print "empty"
        cm_server_log_empty="[${Y0:?}Empty${N0:?}]"
      fi
      # look for serious error
      if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log &>/dev/null; then
        # if any, print "serious"
        cm_server_log_serious="[${R1:?}Serious${N0:?}]"
      fi

      # Server.log done

      # check for backup

      # realmd backup
      FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        realmd_backup="[${R0:?}old${N0:?}]"
        echo
      else
        realmd_backup="[${G0:?}ok${N0:?}]"
        echo
      fi
      # characters backup
      FILE="$folder_wow/backup/$db_characters-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        charac_backup="[${R0:?}old${N0:?}]"
        echo
      else
        charac_backup="[${G0:?}ok${N0:?}]"
        echo
      fi

      # world server latest build
      if grep -q -o -a "\sBuilt\son\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "built date"
        latest_world_built=$(grep -o -a "\sBuilt\son\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        latest_world_built="${GR:?}Built on Nov 23 2004 at 10:00:01${N0:?}"
      fi
      # built for
      if grep -q -o -a "\sBuilt\sfor\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "built for"
        built_for=$(grep -o -a "\sBuilt\sfor\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        built_for="${GR:?}Built for Linux_x00 (next-to-nothing)${N0:?}"
      fi
      # EventAI
      if grep -q -o -a "\sACID\s1.12.x\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "EventAI"
        eventai=$(grep -o -a "\sACID\s1.12.x\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        eventai="${GR:?}ACID 0.00.x (Classic) for CMaNGOS-CLASSIC (0.00.X Client)${N0:?}"
      fi
      # World DB
      if grep -q -o -a "\s1.11\s*.*" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "World DB"
        world_db=$(grep -Eo "Classic DB version.*" "$folder_core"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        world_db="${GR:?}0.00 'Into the Abyss of nothing.' For Classic core z0000.${N0:?}"
      fi
      # cpu temp
      if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
        menu_cpu_temp=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
          cut -c -4 2>/dev/null)
        menu_print_cpu_temp=$(printf '%b' "Temp${G0:?}........:${N0:?} ${menu_cpu_temp:?}c")
      else
        menu_print_cpu_temp=""
      fi
      # commit
      if grep -E "Using commit.*(.*)" "${folder_core:?}"/run/logs/Server.log &>/dev/null; then
        commit_hash=$(grep -E "Using commit.*(.*)" "${folder_core:?}"/run/logs/Server.log 2>/dev/null |
          grep -o "(.*)" 2>/dev/null | tr -d '()' 2>/dev/null | sed 's/^ *//' 2>/dev/null)
      else
        commit_hash="0000000000000000000000000000000000000000"
      fi
      # codes done

      printf '%b' "      $cm_uptime

      Realm${G0:?}.......:${G1:?} ${server_name:?}${N0:?}
      $menu_print_cpu_temp
      World${G0:?}.......:${N0:?} $latest_world_built
      System${G0:?}......:${N0:?} $built_for
      Commit Hash${G0:?}.:${GR:?} $commit_hash${N0:?}

      r : ${P1:?}Login${N0:?}   - Remote access  service.mangosd${G0:?}.:${N0:?} $command_mangosd
      l : ${P1:?}Logs${N0:?}    - Analyze logs   service.realmd${G0:?}..:${N0:?} $command_realmd
      b : ${P1:?}Backup${N0:?}  - New backup
      h : ${P1:?}Reset${N0:?}   - Reset --hard   characters.sql${G0:?}..:${N0:?} $charac_backup
      p : ${P1:?}htop${N0:?}    - Process view   realmd.sql${G0:?}......:${N0:?} $realmd_backup
      m : ${P1:?}Maps${N0:?}    - Download maps
      w : ${P1:?}Stats${N0:?}   - World stats
      q : ${P1:?}Quit${N0:?}    - Back to menu   Realmd.log${G0:?}......:${N0:?} $cm_realmd_log_empty$cm_realmd_log
      i : ${P1:?}Info${N0:?}    - Helper info    Server.log${G0:?}......:${N0:?} $cm_server_log_empty$cm_server_log$cm_server_log_serious
"
      echo
      read -r -s -n1
      case "$REPLY" in

      # Information

      "i")

        clear
        printf '%b' "${N0:?}
       _____     __  __       _   _  _____  ____   _____
      / ____|   |  \/  |     | \ | |/ ____|/ __ \ / ____|
     | |        | \  / |     |  \| | |  __  |  | | (___
     | |ontinued| |\/| | __ _| .   | | |_ | |  | |\___ \\
     | |____    | |  | |/ _  | |\  | |__| | |__| |____) |
      \_____|   |_|  |_| (_| |_| \_|\_____|\____/ \____/
      http://cmangos.net\__,_|     Doing things right!

      ${G0:?}C(ontinued)-MaNGOS (Classic fork)${N0:?}

      EventAI
      ${GR:?}$eventai${N0:?}
      World DB
      ${GR:?}$world_db${N0:?}

      ${P1:?}https://github.com/cmangos/mangos-classic${N0:?}
      ${P1:?}https://github.com/cmangos/classic-db${N0:?}

      ${G0:?}C(ontinued)-MaNGOS - Helper${N0:?}

      ${P1:?}https://github.com/Daedalus-code/cmangos-script${N0:?}

      This script was built on a ubuntu system - (Raspberry Pi4)
      https://ubuntu.com/download/raspberry-pi

      Functions and features for admins running a WoW Vanilla server.

      Planned Features: Time will tell.

      ---What

      * Install this script on a ubuntu system, make everything more easy.
      * Connect to a MySQL server outside or localhost
      * Download latest core/database updates
      * Upgrade Database with latest fixes
      * Compile CMaNGOS with latest fixes
      * Download/Install classic maps
      * Setup RA for account tools
      * Profit

${G0:?}>${N0:?} hit Enter to go back.
${N0:?}"
        echo
        read -r -p ">" </dev/tty

        ;;

        # Information done

        # seedbox menu

      "m")

        # codes
        if ! [ -x "$(command -v transmission-cli)" ]; then
          seed_transmission="${GR:?}Not Installed!${N0:?}"
        else
          # get remote information from transmission, create a file
          transmission-remote -l >/var/log/ms/transmission_list 2>/dev/null

          if [ -f /var/log/ms/transmission_list ]; then
            # cat that file
            P2P_INFO=$(cat /var/log/ms/transmission_list 2>/dev/null)
            # get file
            P2P_NAME=$(echo "$P2P_INFO" 2>/dev/null | grep -o "vanilla_maps.zip" 2>/dev/null)
            # get progress
            P2P_PROG=$(echo "$P2P_INFO" 2>/dev/null | awk '{ print $2 }' 2>/dev/null |
              tail -2 2>/dev/null | head -1 2>/dev/null | grep -Eo "n/a|idle|downloading|[0-100]+.[0.9]+%" 2>/dev/null)
            # get download stats
            P2P_DWNS=$(echo "$P2P_INFO" 2>/dev/null | awk '{ print $3 }' 2>/dev/null |
              tail -2 2>/dev/null | head -1 2>/dev/null | grep -Eo "[0-9]+.[0-9]+" 2>/dev/null)
            # get upload stats
            P2P_UPLS=$(echo "$P2P_INFO" 2>/dev/null | awk '{ print $5 }' 2>/dev/null |
              tail -1 2>/dev/null | grep -Eo "[0-9]+.[0-9]+" 2>/dev/null)
            # get ratio
            P2P_RATI=$(echo "$P2P_INFO" 2>/dev/null | awk '{ print $8 }' 2>/dev/null |
              head -2 2>/dev/null | tail -1 2>/dev/null | grep -Eo "[0-9]+.[0-9]+" 2>/dev/null)
            # get status
            P2P_STAT=$(echo "$P2P_INFO" 2>/dev/null | awk '{ print $9 }' 2>/dev/null |
              head -2 2>/dev/null | tail -1 2>/dev/null | grep -v "vanilla_maps.zip" 2>/dev/null)
          fi

          # transmission-daemon service
          transmission_service=transmission-daemon
          # transmission-daemon status
          case "$(pidof $transmission_service | wc -w)" in
          0) seed_transmission="${R0:?}Offline${N0:?}" ;;
          1) seed_transmission="${G0:?}Seeding${N0:?}" ;;
          *) seed_transmission="${Y0:?}Seeding${N0:?}" ;;
          esac
        fi
        if ! [ -x "$(command -v transmission-cli)" ]; then
          intranet_seed=$(printf '%b' "${GR:?}Not Installed!${N0:?}" 2>/dev/null)
        else
          intranet_seed=$(printf '%b' "${intranet:?}:9091" 2>/dev/null)
        fi
        # codes done

        # menu

        clear
        echo
        printf '%b' "${G1:?}      CMaNGOS - ${G0:?}WoW Vanilla Maps Seedbox${N0:?}

      Seedbox${G0:?}....:${N0:?} $seed_transmission
      Access${G0:?}.....:${N0:?} $intranet_seed
      Filename${G0:?}...:${N0:?} $P2P_NAME
      Download${G0:?}...:${N0:?} ${P1:?}Unlimited${N0:?}
      Upload${G0:?}.....:${N0:?} ${P1:?}128kb/s${N0:?}
      Status${G0:?}.....:${N0:?} $P2P_STAT
      Progress${G0:?}...:${N0:?} $P2P_PROG
      Downloaded${G0:?}.:${N0:?} $P2P_DWNS
      Uploaded${G0:?}...:${N0:?} $P2P_UPLS
      Ratio${G0:?}......:${N0:?} $P2P_RATI

      t : ${P1:?}Install${GR:?} i : info$N0
      u : ${P1:?}Remove${N0:?}
      r : ${P1:?}Start${N0:?}
      s : ${P1:?}Stop${N0:?}
      m : ${P1:?}Maps${N0:?}

${G0:?}>${N0:?} hit Enter to go back.
${N0:?}"
        read -r -s -n1
        case "$REPLY" in

        # transmission-remote information

        "i")

          echo
          transmission-remote -t 1 -i 2>/dev/null
          read -r -p "Press Enter to continue" </dev/tty
          echo

          ;;

          # transmission-remote information

          # remove transmission-daemon

        "u")

          echo
          read -r -p "Remove Seedbox? (transmission) (y/n) " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            echo "Please wait"
            sudo apt-get remove transmission-* --purge -y &>/dev/null
          fi

          ;;

          # remove transmission-daemon done

          # setup seedbox (transmission)
          # ubuntu

        "t")

          echo
          read -r -p "Setup Seedbox? (transmission-daemon) (y/n) " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            # already installed?
            if ! [ -x "$(command -v transmission-daemon)" ]; then
              # check for updates regardless
              echo "Please wait"
              sudo apt-get update 2>/dev/null
              # make sure unzip exist
              sudo apt-get install unzip -y 2>/dev/null
              # install transmission-daemon
              sudo apt-get install transmission-daemon -y &>/dev/null
              # temporary stop ^
              sudo service transmission-daemon stop &>/dev/null
              # remove old config
              sudo rm /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
              # create 'seedbox' directory
              cd || exit
              sudo mkdir "/seedbox" &>/dev/null
              # fix folder owner
              sudo chown -R debian-transmission:debian-transmission /seedbox/ &>/dev/null
              # setup transmission-daemon configuration file
              # settings.json
              cat >"$folder_wow"/settings.json <<'EOF'
{
    "alt-speed-down": 50,
    "alt-speed-enabled": false,
    "alt-speed-time-begin": 540,
    "alt-speed-time-day": 127,
    "alt-speed-time-enabled": false,
    "alt-speed-time-end": 1020,
    "alt-speed-up": 50,
    "bind-address-ipv4": "0.0.0.0",
    "bind-address-ipv6": "::",
    "blocklist-enabled": true,
    "blocklist-url": "http://john.bitsurge.net/public/biglist.p2p.gz",
    "cache-size-mb": 16,
    "dht-enabled": true,
    "download-dir": "/seedbox",
    "download-queue-enabled": true,
    "download-queue-size": 5,
    "encryption": 1,
    "idle-seeding-limit": 30,
    "idle-seeding-limit-enabled": false,
    "incomplete-dir": "/seedbox",
    "incomplete-dir-enabled": false,
    "lpd-enabled": true,
    "message-level": 1,
    "peer-congestion-algorithm": "",
    "peer-id-ttl-hours": 6,
    "peer-limit-global": 100,
    "peer-limit-per-torrent": 50,
    "peer-port": 51413,
    "peer-port-random-high": 65535,
    "peer-port-random-low": 49152,
    "peer-port-random-on-start": false,
    "peer-socket-tos": "default",
    "pex-enabled": true,
    "port-forwarding-enabled": true,
    "preallocation": 1,
    "prefetch-enabled": true,
    "queue-stalled-enabled": true,
    "queue-stalled-minutes": 30,
    "ratio-limit": 2,
    "ratio-limit-enabled": false,
    "rename-partial-files": true,
    "rpc-authentication-required": false,
    "rpc-bind-address": "0.0.0.0",
    "rpc-enabled": true,
    "rpc-host-whitelist": "",
    "rpc-host-whitelist-enabled": false,
    "rpc-password": "{8cdc09d82992af11050cd6ca97c14f9117df07a1PiXvOluY",
    "rpc-port": 9091,
    "rpc-url": "/transmission/",
    "rpc-username": "mangos",
    "rpc-whitelist": "*.*.*.*",
    "rpc-whitelist-enabled": true,
    "scrape-paused-torrents-enabled": true,
    "script-torrent-done-enabled": false,
    "script-torrent-done-filename": "",
    "seed-queue-enabled": false,
    "seed-queue-size": 10,
    "speed-limit-down": 100,
    "speed-limit-down-enabled": false,
    "speed-limit-up": 128,
    "speed-limit-up-enabled": true,
    "start-added-torrents": true,
    "trash-original-torrent-files": false,
    "umask": 2,
    "upload-slots-per-torrent": 5,
    "utp-enabled": true
}
EOF
              # install to correct folder
              sudo mv "$folder_wow"/settings.json /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
              sleep 1
              # start transmission-daemon
              sudo service transmission-daemon start &>/dev/null
              echo
              printf '%b' "[${G0:?}ok${N0:?}] - Seedbox should be running now!"
              echo
              sleep 1
              # add magnet link: vanilla.maps.zip.torrent
              transmission-remote -a "magnet:?xt=urn:btih:1cdcaa3d77a7f4df79935d885e639903e37dda24&dn=vanilla%5Fmaps.zip&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce" &>/dev/null
              echo
              printf '%b' "[${G0:?}ok${N0:?}] - torrent added"
              echo
              sleep 1
              # reload
              sudo systemctl daemon-reload 2>/dev/null
              sleep 1
            else
              printf '%b' "SeedBox already installed."
              echo
              sleep 2
            fi
          fi

          ;;

          # setup seedbox (transmission) done

          # start seedbox (transmission)

        "r")

          echo
          read -r -p "Re/start seedbox? (transmission-daemon) (y/n) " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            echo "Please wait"
            sudo service transmission-daemon stop &>/dev/null
            sleep 1
            sudo service transmission-daemon start &>/dev/null
            sleep 1
            # enable service
            sudo systemctl enable transmission-daemon &>/dev/null
            # reload
            sudo systemctl daemon-reload &>/dev/null
            echo
            printf '%b' "[${G0:?}ok${N0:?}] - seedbox started."
            echo
            sleep 1
          fi

          ;;

          # start seedbox (transmission) done

          # stop seedbox (transmission)

        "s")

          echo
          read -r -p "Stop seedbox? (transmission-daemon) (y/n) " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            echo "Please wait"
            sudo service transmission-daemon stop &>/dev/null
            sleep 1
            # disable service
            sudo systemctl disable transmission-daemon &>/dev/null
            # reload
            sudo systemctl daemon-reload &>/dev/null
            echo
            printf '%b' "[${R0:?}off${N0:?}] - seedbox stopped."
            echo
            sleep 1
          fi

          ;;

          # stop seedbox (transmission) done

          # install maps

        "m")

          echo
          read -r -p "Install maps? (vanilla_maps.zip) (y/n) " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            # codes
            MAPS="$folder_core"/run/maps/5332742.map
            MMAPS="$folder_core"/run/mmaps/5332742.mmtile
            VMAPS="$folder_core"/run/vmaps/Zulgurub_Ziggurat.wmo.vmo
            # codes done

            if [ -f "$MAPS" ] && [ -f "$MMAPS" ] && [ -f "$VMAPS" ]; then
              printf '%b' "Maps already installed."
              echo
              sleep 2
            else
              sudo unzip /seedbox/vanilla_maps.zip -d "$folder_core"/run
              echo
              printf '%b' "[${G0:?}ok${N0:?}] - maps installed."
              echo
              sleep 1
            fi
          fi

          ;;

        esac

        ;;

        # install maps done

        # seedbox menu done

        # htop

      "p")

        if ! [ -x "$(command -v htop)" ]; then
          echo "Please wait"
          sudo apt-get install htop -y 2>/dev/null
        fi
        htop

        ;;

        # htop done

        # reset --hard (everything)

      "h")

        printf " ${R0:?}WARNING${N0:?}: 'reset --hard' (${P1:?}everything${N0:?}) Are You Sure? (y/n)"
        echo
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          echo
          echo
          printf "${P1:?}mangos-classic${N0:?}: "
          cd "$folder_core" || exit
          git reset --hard
          printf "${P1:?}classic-db${N0:?}: "
          cd "${folder_db:?}" || exit
          git reset --hard
          printf "${P1:?}cmangos-script${N0:?}: "
          cd "${folder_helper:?}" || exit
          git reset --hard
          echo
          echo
          read -r -p "Press Enter to continue" </dev/tty
          echo
        fi

        ;;

        # reset --hard (everything) done

        # dive into logs

      "l")

        # codes
        # server.log.old
        dive_server_old_empty=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty.|.*empty*." "$folder_core"/run/logs/Server.log.old 2>/dev/null)
        dive_server_old_error=$(grep -c -E ".*ERROR*." "$folder_core"/run/logs/Server.log.old 2>/dev/null)
        dive_server_old_serio=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log.old 2>/dev/null)
        dive_server_old_ignor=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "$folder_core"/run/logs/Server.log.old 2>/dev/null)
        # server.log
        dive_server_empty=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty.|.*empty*." "$folder_core"/run/logs/Server.log 2>/dev/null)
        dive_server_error=$(grep -c -E ".*ERROR*." "$folder_core"/run/logs/Server.log 2>/dev/null)
        dive_server_serio=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log 2>/dev/null)
        dive_server_ignor=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "$folder_core"/run/logs/Server.log 2>/dev/null)
        # realmd.log
        dive_realmd_empty=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log 2>/dev/null)
        dive_realmd_error=$(grep -c -E ".*ERROR*." "$folder_core"/run/logs/Realmd.log 2>/dev/null)
        dive_realmd_serio=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Realmd.log 2>/dev/null)
        # DBErrors.log
        dive_DBError_corr=$(grep -c -E "does\snot\shave\scorresponding" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        dive_DBError_exis=$(grep -c -E "doesn't\sexist" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        dive_DBError_quer=$(grep -c -E "query\sERROR" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        dive_DBError_used=$(grep -c -E "Option\swill\snever\sbe\sused" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        dive_DBError_cras=$(grep -c -E "can\scrash\sclient" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        # char.log
        dive_char_created=$(grep -c -E "Create\sCharacter" "$folder_core"/run/logs/Char.log 2>/dev/null)
        dive_char_login_c=$(grep -c -E "Login" "$folder_core"/run/logs/Char.log 2>/dev/null)
        dive_char_logouts=$(grep -c -E "Logout" "$folder_core"/run/logs/Char.log 2>/dev/null)
        # EventAIErrors.log
        dive_EventAIError=$(grep -c -E "skipping" "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)
        dive_EventAInoeff=$(grep -c -E "Action\swill\snot\shave\sany\seffect." "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)
        dive_EventAInonex=$(grep -c -E "nonexistent|non-existing" "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)
        dive_EventAI_NULL=$(grep -c -E ".*NULL*." "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)
        dive_EventAINotUs=$(grep -c -E "but\snot\sused" "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)

        # Server.log, .old, Realmd.log
        dive_log_empty=$(printf "${Y0:?}Empty..${N0:?}")
        dive_log_error=$(printf "${R0:?}Error..${N0:?}")
        dive_log_ignor=$(printf "${R0:?}Ignore.${N0:?}")
        dive_log_serio=$(printf "${R1:?}Serious${N0:?}")
        # DBErrors.log
        dive_log_corre=$(printf "${R0:?}NotCorresponding${N0:?}")
        dive_log_exist=$(printf "${R0:?}Doesn'tExist....${N0:?}")
        dive_log_query=$(printf "${R0:?}QueryERROR......${N0:?}")
        dive_log_never=$(printf "${R0:?}WillNeverBeUsed.${N0:?}")
        dive_log_crash=$(printf "${R0:?}CanCrashClient!.${N0:?}")
        # EventAIErrors.log
        dive_log_skipp=$(printf "${R0:?}Skipping${N0:?}")
        dive_log_noeff=$(printf "${R0:?}NoEffect${N0:?}")
        dive_log_nonex=$(printf "${R0:?}NonExist${N0:?}")
        dive_log_NULL0=$(printf "${R0:?}NULL....${N0:?}")
        dive_log_NotUs=$(printf "${R0:?}NotUsed.${N0:?}")
        # Char.log
        dive_log_creat=$(printf "${Y0:?}Created${N0:?}")
        dive_log_login=$(printf "${Y0:?}Login..${N0:?}")
        dive_log_logou=$(printf "${Y0:?}Logout.${N0:?}")
        # empty table
        dive_log_none=$(printf "\e[2mempty..${N0:?}")
        dive_log_zero=$(printf "0")
        # codes done

        printf "      Server.log        Server.log.old    Realmd.log"
        echo
        printline "$dive_log_empty" "$dive_server_empty" "$dive_log_empty" "$dive_server_old_empty" "$dive_log_empty" "$dive_realmd_empty"
        printline "$dive_log_error" "$dive_server_error" "$dive_log_error" "$dive_server_old_error" "$dive_log_error" "$dive_realmd_error"
        printline "$dive_log_ignor" "$dive_server_ignor" "$dive_log_ignor" "$dive_server_old_ignor" "$dive_log_ignor" "$dive_realmd_serio"
        printline "$dive_log_serio" "$dive_server_serio" "$dive_log_serio" "$dive_server_old_serio" "$dive_log_serio" "$dive_realmd_serio"
        echo
        printf "      DBErrors.log        Char.log          EventAIErrors.log"
        echo
        printline "$dive_log_corre" "$dive_DBError_corr" "$dive_log_creat" "$dive_char_created" "$dive_log_skipp" "$dive_EventAIError"
        printline "$dive_log_exist" "$dive_DBError_exis" "$dive_log_login" "$dive_char_login_c" "$dive_log_noeff" "$dive_EventAInoeff"
        printline "$dive_log_query" "$dive_DBError_quer" "$dive_log_logou" "$dive_char_logouts" "$dive_log_nonex" "$dive_EventAInonex"
        printline "$dive_log_never" "$dive_DBError_used" "$dive_log_none" "$dive_log_zero" "$dive_log_NULL0" "$dive_EventAI_NULL"
        printline "$dive_log_crash" "$dive_DBError_cras" "$dive_log_none" "$dive_log_zero" "$dive_log_NotUs" "$dive_EventAINotUs"

        # count error from logs
        error_charac=$(grep -c "ERROR:.*" "$folder_core"/run/logs/Char.log 2>/dev/null)
        error_dberro=$(grep -c "ERROR:.*" "$folder_core"/run/logs/DBErrors.log 2>/dev/null)
        error_eventa=$(grep -c "ERROR:.*" "$folder_core"/run/logs/EventAIErrors.log 2>/dev/null)

        echo "
      1 : Raw ERROR Output
      2 : tail ERROR Output"
        echo

        read -n1 -s
        case "$REPLY" in

        "1")

          # get raw error from logs
          ERROR_ERROR=$(grep --no-filename -Eo "ERROR:.*" "$folder_core"/run/logs/*.log 2>/dev/null)
          # get raw empty from logs
          EMPTY_ERROR=$(grep --no-filename -Eo ".*empty*." "$folder_core"/run/logs/*.log 2>/dev/null)
          printf '%b' "${Y1:?}$EMPTY_ERROR${N0:?}\n"
          printf '%b' "${R0:?}$ERROR_ERROR${N0:?}\n"

          ;;

        "2")

          # tail logs for error
          echo "Tail logs.."
          printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
          tail -f "$folder_core"/run/logs/*.log 2>/dev/null |
            grep -Eo "ERROR:.*|.*empty*." 2>/dev/null

          ;;

        "q") exit ;;
        "Q") ;;
        *) ;;
        esac

        printf '%b' "
Server${R0:?}........: $dive_server_error ${Y1:?}$dive_server_empty${N0:?}
Realmd${R0:?}........: $dive_realmd_error ${Y1:?}$dive_realmd_empty${N0:?}
Char${R0:?}..........: $error_charac${N0:?}
DBErrors${R0:?}......: $error_dberro${N0:?}
EventAIErrors${R0:?}.: $error_eventa${N0:?}\n"
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # dive into logs done

        # Get database info (kinda heavy..)

      "w")

        on_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT SUM(online) FROM ${db_characters:?}.characters;" 2>/dev/null)
        gu_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM ${db_characters:?}.guild;" 2>/dev/null)
        ac_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_realmd.account;" 2>/dev/null)
        bn_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_realmd.account_banned;" 2>/dev/null)
        # on_count at TOP ^
        ch_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.characters;" 2>/dev/null)

        # gu_count at TOP ^
        me_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.guild_member;" 2>/dev/null)
        ma_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.mail;" 2>/dev/null)
        pe_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.character_pet;" 2>/dev/null)

        ti_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.gm_tickets;" 2>/dev/null)
        co_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.corpse;" 2>/dev/null)
        pv_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.pvpstats_players;" 2>/dev/null)
        gi_count=$(mysql --defaults-extra-file="${sql_mycnf:?}" -N --execute="SELECT count(*) FROM $db_characters.character_gifts;" 2>/dev/null)

        printline "Accounts" "$ac_count" "Guilds" "$gu_count" "Tickets" "$ti_count"
        printline "Banned" "$bn_count" "Members" "$me_count" "Corpses" "$co_count"
        printline "Online" "$on_count" "Mail" "$ma_count" "PvP" "$pv_count"
        printline "Characters" "$ch_count" "Pets" "$pe_count" "Gifts" "$gi_count"

        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # Get database info (kinda heavy..) done

        # backup sql

      "b")

        # create directory, backup
        mkdir "$folder_wow"/backup &>/dev/null
        # well (: backup probably hours old by now
        echo
        printf "Making fresh backup${G0:?}.${N0:?}"
        sleep 1
        printf "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="$sql_mycnf" "$db_characters" >"$folder_wow"/backup/"$db_characters"-"$NOW".sql
        printf "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G0:?}ok${N0:?}] $db_characters-$NOW.sql"
        sleep 2
        echo
        # backup characters sql
        printf "Making fresh backup${G0:?}.${N0:?}"
        sleep 1
        printf "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="$sql_mycnf" "$db_realmd" >"$folder_wow"/backup/"$db_realmd"-"$NOW".sql
        printf "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G0:?}ok${N0:?}] $db_realmd-$NOW.sql"
        sleep 1
        # well (: backup probably hours old by now done

        ;;

        # backup sql done

        # remote access

      "r")

        echo
        read -r -p " Want to login? (y/n) " -n 1 -r
        echo
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          clear
          printf '%b' "
${R0:?}      ._________________.
      |.---------------.|
      || ${N0:?}mangos>${R0:?}       ||
      ||               ||
      ||               ||
      ||               ||
      ||               ||
      ||_______________||
      /.-.-.-.-.-.-.-.-.\\
     /.-.-.-.-.-.-.-.-.-.\\
    /.-.-.-.-.-.-.-.-.-.-.\\
   /______/__________\___${G0:?}o${R0:?}_\\
   \_______________________/${N0:?}"
          echo
          printf "
     CMaNGOS Command Center

  ${G0:?}>${N0:?} hit Enter two times to go back.
  ------------------------------------------------
  'commands' will list all of the available commands
  'quit' and then hit Enter two times to exit

  Tip: Set '${P1:?}Message of the Day${N0:?}' inside mangosd.conf"
          echo
          echo
          nc "$host_nc" "$port_nc"
          echo
        fi

        ;;

        # remote access done

      "q")
        echo
        break
        ;;
      *)
        echo
        echo "empty"
        ;;
      esac
    done

    ;;

    # Login (command) done * Free Hong Kong.

    # Checking for updates

  "c")

    # updated and installed
    FILE_CORE="/var/log/ms/installed_core"
    if [ -f "$FILE_CORE" ]; then
      ok_core="[${G0:?}ok${N0:?}]"
    fi
    FILE_CORE="/var/log/ms/installed_core"
    if [ ! -f "$FILE_CORE" ]; then
      ok_core="[${Y1:?}ok${N0:?}]"
    fi
    FILE_DB="/var/log/ms/installed_db"
    if [ -f "$FILE_DB" ]; then
      ok_db="[${G0:?}ok${N0:?}]"
    fi
    FILE_DB="/var/log/ms/installed_db"
    if [ ! -f "$FILE_DB" ]; then
      ok_db="[${Y1:?}ok${N0:?}]"
    fi
    FILE_MS="/var/log/ms/installed_ms"
    if [ -f "$FILE_MS" ]; then
      ok_ms="[${G0:?}ok${N0:?}]"
    fi
    FILE_MS="/var/log/ms/installed_ms"
    if [ ! -f "$FILE_MS" ]; then
      ok_ms="[${Y1:?}ok${N0:?}]"
    fi

    # check if 'mangos-classic' exist
    FILE="$folder_core/README.md"
    if [ ! -f "$FILE" ]; then
      # remove old file
      rm /var/log/ms/installed_core &>/dev/null
      # fresh install ?
      printf '%b' "Cloning repository 'mangos-classic' Please wait this might take a while
(${G1:?}${github_cmangos:?}${N0:?})\n"
      sudo mkdir "$folder_wow" &>/dev/null
      sudo chown -R "${user:?}":"${group:?}" "$folder_wow"
      cd "$folder_wow" || exit
      read -r -p "--recursive? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        recursive="--recursive"
        git clone "${github_cmangos:?}" "$recursive"
      else
        git clone "${github_cmangos:?}"
      fi
      echo "Done"
      sleep 1
    else
      # check for updates

      # CMaNGOS Core (mangos-classic)
      printf "[ Checking for ${G0:?}+${R0:?}-${N0:?} Updates${N0:?} ] .. "
      echo
      echo
      cd "$folder_core" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_core &>/dev/null
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (\e[4;32m$latest_head${N0:?}) \e[4;32mNew Updates For Core${N0:?}! - $latest_date
${GR:?}(m) Update CMaNGOS > Compile latest${N0:?}\n"
      else
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "$ok_core (\e[4;32m$latest_head${N0:?}) Core Updated - $latest_date"
        echo
      fi
    # check if 'mangos-classic' exist done
    fi

    # check if 'classic-db' exist
    FILE="$folder_db/README.md"
    if [ ! -f "$FILE" ]; then
      # remove old file
      rm /var/log/ms/installed_db &>/dev/null
      # fresh install ?
      printf '%b' "Cloning repository 'classic-db' Please wait this might take a while
(${G1:?}${github_database:?})${N0:?}\n"
      sudo mkdir "$folder_wow" &>/dev/null
      sudo chown -R "${user:?}":"${group:?}" "$folder_wow"
      cd "$folder_wow" || exit
      git clone "${github_database:?}"
      cd "$folder_db" || exit
      ./InstallFullDB.sh
      echo "Done"
      sleep 1
    else

      # check for updates

      # check if 'classic-db' exist

      # Classic Database (classic-db)

      cd "${folder_db:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_db &>/dev/null
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (\e[4;32m$latest_head${N0:?}) \e[4;32mNew Updates For Database${N0:?}! - $latest_date
${GR:?}(d) Update Database > Update classic-db${N0:?}\n"
      else
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "$ok_db (\e[4;32m$latest_head${N0:?}) Database Updated - $latest_date"
        echo
      fi
    # check if 'classic-db' exist done
    fi

    # check if 'cmangos-script' exist
    FILE="$folder_helper/README.md"
    if [ ! -f "$FILE" ]; then
      # remove old file
      rm /var/log/ms/installed_ms &>/dev/null
      # fresh install ?
      echo "Cloning repository 'cmangos-script' Please wait"
      sudo mkdir "$folder_helper" &>/dev/null
      sudo chown -R "${user:?}":"${group:?}" "$folder_helper"
      cd "$folder_helper" || exit
      git clone "${github_helper:?}"
      echo "Done"
      sleep 1
    else
      # check for updates

      # CMaNGOS Helper

      cd "${folder_helper:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_ms &>/dev/null
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (\e[4;32m$latest_head${N0:?}) \e[4;32mNew Updates For Helper${N0:?}! - $latest_date
${GR:?}(w) Update Helper > Update Helper${N0:?}\n"
      else
        latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        latest_head=$(git rev-parse --short HEAD)
        printf '%b' "$ok_ms (\e[4;32m$latest_head${N0:?}) Helper Updated - $latest_date"
        echo
      fi
    # check if 'cmangos-script' exist done
    fi
    # check if 'InstallFullDB.config' exist
    FILE="$folder_db/InstallFullDB.config"
    if [ ! -f "$FILE" ]; then
      cd "$folder_db" || exit
      ./InstallFullDB.sh &>/dev/null
    fi

    # check if 'InstallFullDB.config' exist done
    echo
    read -r -p "Press Enter to continue" </dev/tty
    echo

    ;;

    # Checking for updates done

    # update CMaNGOS

  "m")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y 2>/dev/null
    fi
    # required 'packagelist' to build CMaNGOS
    # ubuntu server
    packagelist=(autoconf
      automake
      binutils
      build-essential
      checkinstall
      cmake
      g++
      gcc
      git
      git-core
      grep
      libboost-all-dev
      libbz2-dev
      libc6
      libmysql++-dev
      libssl-dev
      libtool
      make
      patch
      subversion
      unzip
      zip
      zlibc
      psmisc)
    # codes done
    HEIGHT=13
    WIDTH=41
    CHOICE_HEIGHT=6
    BACKTITLE="update CMaNGOS"
    TITLE="Update mangos-classic [core]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Compile latest build"
      2 "Install systemd unit files"
      3 "Reinstall (delete /build)"
      4 "Reset --hard origin/master"
      5 "Delete Core /mangos-classic"
      6 "Backup configurations")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # compile latest build

    "1")

      read -r -p "Compile latest build? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
          cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
        else

          if ! [ -x "$(command -v "${packagelist[@]}")" ]; then
            sudo apt-get install "${packagelist[@]}" -y 2>/dev/null
          fi
          printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
          echo
          sleep 1

          # service status
          realm_service=realmd
          world_service=mangosd

          # realmd service
          case "$(pidof $realm_service | wc -w)" in
          0) ;;
          *) sudo service realmd stop ;;
          esac

          # mangosd service
          case "$(pidof $world_service | wc -w)" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "${user:?}":"${group:?}" "$folder_wow"
        mkdir "$folder_core"/run &>/dev/null
        mkdir "$folder_core"/run/logs &>/dev/null
        mkdir "$folder_core"/run/logs/old &>/dev/null
        touch "$folder_core"/run/logs/Server.log &>/dev/null
        cp "$folder_core"/run/logs/*.log "$folder_core"/run/logs/old
        # ahbot.conf
        cp "$folder_core"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$folder_core"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "$folder_core"/run/logs || exit &>/dev/null
        mv -t "$folder_core"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$user":"$group" "$folder_wow"
        mkdir "$folder_core"/build &>/dev/null
        cd "${folder_build:?}" || exit
        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        cmake .. ${cmake:?}
        cd "$folder_build" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          cpu_temp=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          cmake_temp=$(printf '%b' "CPU: ${G0:?}$cpu_temp ${N0:?}°")
        else
          cmake_temp=$(printf '%b' "")
        fi

        # get cpu model name
        CPU_MODEL=$(lscpu 2>/dev/null | grep 'Model name' 2>/dev/null |
          cut -f 2 -d ":" 2>/dev/null | awk '{$1=$1}1' 2>/dev/null)
        if [ ! -z "$CPU_MODEL" ]; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL${Y0:?}\n")
        else
          CPU_MODEL=""
        fi

        # count system cores
        CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null)
        if [[ "$CORES" -ge "1" ]]; then
          # report count
          CORES_COUNT=$(printf '%b' "${Y1:?}This system has ${CY:?}$CORES${Y1:?} cores!
$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        cat <<EOF

$CORES_COUNT $cmake_temp

Compiling using multiple cores:

 1 : 1 core
 2 : 2 cores
 3 : 3 cores
 4 : 4 cores
 8 : 8 cores
 h : 16 cores
 w : 32 cores
 t : 64 cores
 H : 128 cores

 c : custom

 q : quit

EOF
        read -r -n1 -s
        case "$REPLY" in

        "c")

          printf '%b' "${GR:?}[  0%] Enter amount of core(s): ${N0:?}"
          read -r CUSTOM
          cores=("$CUSTOM")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j"$CUSTOM" # custom n cores

          ;;

        "1")

          cores=("1")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make # 1 core

          ;;

        "2")

          cores=("2")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j2 # 2 cores

          ;;

        "3")

          cores=("3")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j3 # 3 cores

          ;;

        "4")

          cores=("4")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j4 # 4 cores

          ;;

        "8")

          cores=("8")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j8 # 8 cores

          ;;

        "h")

          cores=("16")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j16 # 16 cores, h1gh-

          ;;

        "w")

          cores=("32")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j32 # 32 cores, -w@y

          ;;

        "t")

          cores=("64")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j64 # 64 cores, t0

          ;;

        "H")

          cores=("128")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j128 # 128 cores, h3ll

          ;;

        "q") exit ;;
        "Q") echo "case sensitive!!" ;;
        *)
          echo "Invalid option. Restart please.."
          exit
          ;;

        esac

        # compiling using multiple cores done

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          cpu_temp=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          cmake_temp=$(printf '%b' "CPU: ${G0:?}$cpu_temp${N0:?}° with ${cores[0]} core(s).")
        else
          cmake_temp=""
        fi
        echo
        printf '%b' "$cmake_temp

Select install operation"
        echo
        echo " 1) make install"
        echo " 2) checkinstall with backup"
        echo
        read -r n
        case $n in

        "1")

          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${user:?}":"${group:?}" /var/log/ms
          # create installed mark
          echo "Core was installed at ${NOW:?}" >/var/log/ms/installed_core

          echo "make install"

          cd "$folder_build" || exit
          sudo make install

          ;;

        "2")

          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${user:?}":"${group:?}" /var/log/ms
          # create installed mark
          echo "Core was installed at ${NOW:?} with backup" >/var/log/ms/installed_core

          echo "checkinstall"

          cd "$folder_build" || exit
          sudo checkinstall

          ;;

        *)
          echo "invalid option"

          ;;

        esac

        sudo chown -R "$user":"$group" "$folder_wow"

        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # compile latest build done

      # install systemd Services
      # ubuntu

    "2")

      read -r -p "Install systemd Services? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # /etc/systemd/system/realmd.service
        echo "[Unit]
Description=WoW Vanilla realmd service
After=network.target mysql.service

[Service]
Type=simple
User=$user
ExecStart=$folder_core/run/bin/realmd -c $folder_core/run/etc/realmd.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"$folder_wow"/realmd.service 2>/dev/null
        # /etc/systemd/system/mangosd.service
        echo "[Unit]
Description=WoW Vanilla mangosd service
After=network.target mysql.service realmd.service getty@tty3.service

[Service]
Type=simple
User=$user
StandardInput=tty
TTYPath=/dev/tty3
TTYReset=yes
TTYVHangup=yes
WorkingDirectory=$folder_core/run/bin
ExecStart=$folder_core/run/bin/mangosd -c $folder_core/run/etc/mangosd.conf -a $folder_core/run/etc/ahbot.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"$folder_wow"/mangosd.service 2>/dev/null
        # install services
        sudo mv "$folder_wow"/*.service /etc/systemd/system/ &>/dev/null
        # enable services
        sudo systemctl enable realmd
        sleep 1
        sudo systemctl enable mangosd
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        sleep 1
        echo
        printf '%b' "[${G0:?}ok${N0:?}]

/etc/systemd/system/'${P1:?}realmd.service${N0:?}'
/etc/systemd/system/'${P1:?}mangosd.service${N0:?}'

Check if correct information, or just restart server."
        echo
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # install systemd Services done

      # reinstall (delete /build)

    "3")

      read -r -p "Reinstall (delete /build)? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
          cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
        else

          if ! [ -x "$(command -v "${packagelist[@]}")" ]; then
            sudo apt-get install "${packagelist[@]}" -y 2>/dev/null
          fi
          printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
          echo
          sleep 1

          # service status
          realm_service=realmd
          world_service=mangosd

          # realmd service
          case "$(pidof $realm_service | wc -w)" in
          0) ;;
          *) sudo service realmd stop ;;
          esac

          # mangosd service
          case "$(pidof $world_service | wc -w)" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        cd || exit
        sudo mkdir wow &>/dev/null
        sudo chown -R "${user:?}":"${group:?}" "$folder_wow"
        sudo rm -r "$folder_core"/build/ &>/dev/null
        cd "$folder_wow" || exit
        git clone "$github_cmangos" 2>/dev/null
        sudo mkdir "$folder_core"/build &>/dev/null
        sudo chown -R "${user:?}":"${group:?}" "$folder_wow"
        mkdir "$folder_core"/run &>/dev/null
        mkdir "$folder_core"/run/logs &>/dev/null
        mkdir "$folder_core"/run/logs/old &>/dev/null
        touch "$folder_core"/run/logs/Server.log &>/dev/null
        cp "$folder_core"/run/logs/*.log "$folder_core"/run/logs/old
        # ahbot.conf
        cp "$folder_core"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$folder_core"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "$folder_core"/run/logs || exit &>/dev/null
        mv -t "$folder_core"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$user":"$group" "$folder_wow"
        mkdir "$folder_core"/build &>/dev/null
        cd "${folder_build:?}" || exit
        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        cmake .. ${cmake:?}
        cd "$folder_build" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          cpu_temp=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          cmake_temp=$(printf '%b' "CPU: ${G0:?}$cpu_temp ${N0:?}°")
        else
          cmake_temp=$(printf '%b' "")
        fi

        # get cpu model name
        CPU_MODEL=$(lscpu 2>/dev/null | grep 'Model name' 2>/dev/null |
          cut -f 2 -d ":" 2>/dev/null | awk '{$1=$1}1' 2>/dev/null)
        if [ ! -z "$CPU_MODEL" ]; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL${N0:?}\n")
        else
          CPU_MODEL=""
        fi

        # count system cores
        CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null)
        if [[ "$CORES" -ge "1" ]]; then
          # report count
          CORES_COUNT=$(printf '%b' "${Y1:?}This system has ${CY:?}$CORES${Y1:?} cores!
$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        cat <<EOF

$CORES_COUNT $cmake_temp

Compiling using multiple cores:

 1 : 1 core
 2 : 2 cores
 3 : 3 cores
 4 : 4 cores
 8 : 8 cores
 h : 16 cores
 w : 32 cores
 t : 64 cores
 H : 128 cores

 c : custom

 q : quit

EOF
        read -r -n1 -s
        case "$REPLY" in

        "c")

          printf '%b' "${GR:?}[  0%] Enter amount of core(s): ${N0:?}"
          read -r CUSTOM
          cores=("$CUSTOM")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j"$CUSTOM" # custom n cores

          ;;

        "1")

          cores=("1")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make # 1 core

          ;;

        "2")

          cores=("2")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j2 # 2 cores

          ;;

        "3")

          cores=("3")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j3 # 3 cores

          ;;

        "4")

          cores=("4")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j4 # 4 cores

          ;;

        "8")

          cores=("8")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j8 # 8 cores

          ;;

        "h")

          cores=("16")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j16 # 16 cores, h1gh-

          ;;

        "w")

          cores=("32")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j32 # 32 cores, -w@y

          ;;

        "t")

          cores=("64")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j64 # 64 cores, t0

          ;;

        "H")

          cores=("128")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${cores[0]}${G0:?} core(s)${N0:?}\n"
          make -j128 # 128 cores, h3ll

          ;;

        "q") exit ;;
        "Q") echo "case sensitive!!" ;;
        *)
          echo "Invalid option. Restart please.."
          exit
          ;;

        esac

        # compiling using multiple cores done

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          cpu_temp=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          cmake_temp=$(printf '%b' "CPU: ${G0:?}$cpu_temp${N0:?}° with ${cores[0]} core(s).")
        else
          cmake_temp=""
        fi
        echo
        printf '%b' "$cmake_temp

Select install operation"
        echo
        echo " 1) make install"
        echo " 2) checkinstall with backup"
        echo
        read -r n
        case $n in

        "1")
          echo "make install"

          cd "$folder_build" || exit
          sudo make install

          ;;

        "2")
          echo "checkinstall"

          cd "$folder_build" || exit
          sudo checkinstall

          ;;

        *)
          echo "invalid option"

          ;;

        esac

        sudo chown -R "$user":"$group" "$folder_wow"

        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /build) done

      # reset --hard origin/master ?

    "4")

      read -r -p "Reset --hard origin/master? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$folder_core" || exit
        git reset --hard origin/master
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # delete core directory (everything)

    "5")

      printf '%b' "${GR:?}Deleting Core! $folder_core${N0:?}\n"
      read -r -p "Backup configurations first? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo mkdir "${folder_wow:?}"/backup 2>/dev/null
        sudo mkdir "${folder_wow:?}"/backup/configurations 2>/dev/null
        sudo cp -R "$folder_core"/run/etc/* "${folder_wow:?}"/backup/configurations 2>/dev/null
        sudo chown -R "$user":"$group" "$folder_wow"
      fi
      read -r -p "Delete Core Directory? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo cp -R "$folder_core"/run/etc/* "${folder_wow:?}"/backup/configurations 2>/dev/null
        sudo rm -R "$folder_core" &>/dev/null
      fi

      ;;

      # delete core directory (everything) done

      # backup configurations

    "6")

      sudo chown -R "$user":"$group" "$folder_wow"
      sudo cp -R "$folder_core"/run/etc/* "${folder_wow:?}"/backup/configurations 2>/dev/null

      ;;

    esac

    # backup configurations

    # update CMaNGOS done

    # update Database

    ;;

  "d")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y 2>/dev/null
    fi
    # codes done
    HEIGHT=19
    WIDTH=40
    CHOICE_HEIGHT=12
    BACKTITLE="update Database"
    TITLE="Update classic-db [database]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Update classic-db"
      2 "Drop/Import databases"
      3 "myisam -> innodb (MariaDB)"
      4 "Reinstall (delete /classic-db)"
      5 "Reset --hard origin/master"
      6 "Restart MySQL Server (service)"
      7 "Stop MySQL Server (service)"
      8 "Enable/Disable MySQL Server"
      9 "Apply all updates [A]-[B]"
      10 "Install database client"
      11 "Install database system"
      12 "Delete /classic-db")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # delete database directory (everything)

    "12")

      printf '%b' "${GR:?}Deleting Database! $folder_db${N0:?}\n"
      read -r -p "Delete Database Directory? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        cp "$folder_core"/run/etc/*.conf "${folder_wow:?}"/backup 2>/dev/null
        sudo rm -R "$folder_db" &>/dev/null
      fi

      ;;

      # delete database directory (everything) done

      # install database system

    "11")

      # codes
      # check if 'mangos' user exist
      # mariadb
      packagelist_maria=(mariadb-client
        mariadb-server)
      # mysql
      packagelist_mysql=(mysql-client
        mysql-server)
      # codes done
      echo
      printf "MariaDB, MySQL - Database system"
      echo
      echo " 1) MariaDB"
      echo " 2) MySQL"
      echo
      read -r -n1 -s n
      echo "Please wait.."
      case $n in

      "1") # install mariadb

        sudo apt-get install "${packagelist_maria[@]}" -y
        sudo service mariadb stop &>/dev/null
        sudo service mariadb start &>/dev/null

        ;;

      "2") # install mysql

        sudo apt-get install "${packagelist_mysql[@]}" -y
        sudo service mysql stop &>/dev/null
        sudo service mysql start &>/dev/null

        ;;

      "*") ;;

      esac

      ;;

      # install database system done

      # install database client

    "10")

      # codes
      # mariadb-client
      packagelist_client_maria=(mariadb-client*)
      # mysql-client
      packagelist_client_mysql=(mysql-client*)
      # codes done

      echo
      printf "MariaDB, MySQL - Database Client
This is needed to operate local/remote database"
      echo
      echo
      echo " 1 : MariaDB-Client"
      echo " 2 : MySQL-Client"
      echo " q : Quit"
      echo
      read -r -n1 -s n
      echo "Please wait.."
      case $n in

      "1") # install mariadb-client

        sudo apt-get install "${packagelist_client_maria[@]}" -y

        ;;

      "2") # install mysql-client

        sudo apt-get install "${packagelist_client_mysql[@]}" -y

        ;;

      "q")
        return

        ;;

      "*")
        exit

        ;;

      esac

      ;;

      # install database client done

      # update classic-db

    "1")

      # checking depends

      # mysql
      if sudo dpkg -s mysql-server &>/dev/null; then
        mysql_server_installed=$(printf '%b' "[${G0:?}ok${N0:?}]")
      else
        mysql_server_installed=$(printf '%b' "[${GR:?}no${N0:?}]")
      fi

      # mysql-client
      if sudo dpkg -s mysql-client &>/dev/null; then
        mysql_client_installed=$(printf '%b' "[${G0:?}ok${N0:?}]")
      else
        mysql_client_installed=$(printf '%b' "[${GR:?}no${N0:?}]")
      fi

      # mariadb
      if sudo dpkg -s mariadb-server &>/dev/null; then
        mariadb_server_installed=$(printf '%b' "[${G0:?}ok${N0:?}]")
      else
        mariadb_server_installed=$(printf '%b' "[${GR:?}no${N0:?}]")
      fi

      # mariadb-client
      if sudo dpkg -s mariadb-client &>/dev/null; then
        mariadb_client_installed=$(printf '%b' "[${G0:?}ok${N0:?}]")
      else
        mariadb_client_installed=$(printf '%b' "[${GR:?}no${N0:?}]")
      fi

      mysql_user=$(sudo mysql --defaults-extra-file="$sql_mycnf" -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = 'mangos')" 2>/dev/null)
      if [ "$mysql_user" = 1 ]; then
        mysql_user=$(printf '%b' "[${G0:?}ok${N0:?}]")
      else
        mysql_user=$(printf '%b' "[${GR:?}no${N0:?}]")
      fi

      echo
      echo "$mysql_server_installed - mysql-server
$mysql_client_installed - mysql-client
$mariadb_server_installed - mariadb-server
$mariadb_client_installed - mariadb-client
$mysql_user - database user 'mangos'

database user, client/server is needed."
      echo

      # checking depends done

      read -r -p "Continue? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -r -p "Restart localhost database service? (SQL SERVER) (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # restart mysql service, if it exists
          if sudo service mysql status 2>/dev/null | grep -E 'mysql'; then
            echo "No database system found
Please install mysql or mariadb database/client"
            echo
            exit
          else
            sudo service mysql stop &>/dev/null
            sudo service mysql restart &>/dev/null
          fi

          # restart mariadb service, if it exists
          if sudo service mariadb status 2>/dev/null | grep -E 'mariadb'; then
            echo "No database system found
Please install mysql or mariadb database/client"
            echo
            exit
          else
            sudo service mariadb stop &>/dev/null
            sudo service mariadb restart &>/dev/null
          fi
        fi

        printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
        echo
        sleep 1

        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
          cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
        else

          # service status
          realm_service=realmd
          world_service=mangosd

          # realmd service
          case "$(pidof $realm_service | wc -w)" in
          0) ;;
          *) sudo service realmd stop ;;
          esac

          # mangosd service
          case "$(pidof $world_service | wc -w)" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "$user":"$group" "$folder_wow"
        echo
        printf "Updating classic-db [${G0:?}database${N0:?}]"
        echo

        # backup
        mkdir "$folder_wow"/backup &>/dev/null
        mkdir "$folder_wow"/backup/old &>/dev/null
        cp "$folder_wow"/backup/*.sql "$folder_wow"/backup/old &>/dev/null
        cd "$folder_wow"/backup/old/ || exit
        zip "$server_name.zip" "$folder_wow"/backup/*.sql &>/dev/null
        find "$folder_wow"/backup/*.sql -mtime +7 -exec rm {} \; &>/dev/null
        find "$folder_wow"/backup/old/*.sql -mtime +14 -exec rm {} \; &>/dev/null
        sleep 1
        # backup <- characters.sql
        echo
        FILE="$folder_wow/backup/$db_characters-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Characters' ! Creating backup.."
          mysqldump --defaults-extra-file="$sql_mycnf" "$db_characters" >"$folder_wow"/backup/"$db_characters"-"$NOW".sql
          echo
        else
          printf '%b' "[${G0:?}ok${N0:?}] $db_characters-$NOW.sql exist"
          echo
          read -r -p "New backup? ($db_characters) (y/n) " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # backup characters sql
            echo
            printf "Making fresh backup${G0:?}.${N0:?}"
            sleep 1
            printf "${G0:?}.${N0:?}"
            mysqldump --defaults-extra-file="$sql_mycnf" "$db_characters" >"$folder_wow"/backup/"$db_characters"-"$NOW".sql
            printf "${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "[${G0:?}ok${N0:?}] $db_characters-$NOW.sql"
            sleep 2
            echo
          fi
        fi
        echo
        # backup <- realmd.sql
        FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Realmd' ! Creating backup.."
          mysqldump --defaults-extra-file="$sql_mycnf" "$db_realmd" >"$folder_wow"/backup/"$db_realmd"-"$NOW".sql
          echo
        else
          printf '%b' "[${G0:?}ok${N0:?}] $db_realmd-$NOW.sql exist"
          echo
          read -r -p "New backup? ($db_realmd) (y/n) " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # backup characters sql
            echo
            printf "Making fresh backup${G0:?}.${N0:?}"
            sleep 1
            printf "${G0:?}.${N0:?}"
            mysqldump --defaults-extra-file="$sql_mycnf" "$db_realmd" >"$folder_wow"/backup/"$db_realmd"-"$NOW".sql
            printf "${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "[${G0:?}ok${N0:?}] $db_realmd-$NOW.sql"
            sleep 1
            echo
          fi
        fi
        # InstallFullDB ?
        echo
        read -r -p "InstallFullDB? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$user":"$group" "$folder_wow"
          cd "$folder_db" || exit
          ./InstallFullDB.sh
          sudo service mariadb stop &>/dev/null
          sudo service mysql stop &>/dev/null
          sleep 1
          sudo service mariadb restart &>/dev/null
          sudo service mysql restart &>/dev/null
        fi
        # create ms folder
        sudo mkdir /var/log/ms/ 2>/dev/null
        # fix ownership
        sudo chown -R "${user:?}":"${group:?}" /var/log/ms
        # create installed mark
        echo "Database was installed at ${NOW:?}" >/var/log/ms/installed_db
        echo
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # InstallFullDB done

      # backup done

      # update classic-db done

      # drop/import databases

    "2")

      read -r -p "Drop/Import Databases? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
          cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
        else

          printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
          echo
          sleep 1

          # service status
          realm_service=realmd
          world_service=mangosd

          # realmd service
          case "$(pidof $realm_service | wc -w)" in
          0) ;;
          *) sudo service realmd stop ;;
          esac

          # mangosd service
          case "$(pidof $world_service | wc -w)" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "$user":"$group" "$folder_wow"
        sleep 1
        echo
        # backup <- characters.sql
        FILE="$folder_wow/backup/$db_characters-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Characters' ! Creating backup.."
          mysqldump --defaults-extra-file="$sql_mycnf" "$db_characters" >"$folder_wow"/backup/"$db_characters"-"$NOW".sql
          echo
        else
          printf '%b' "[${G0:?}ok${N0:?}] $db_characters-$NOW.sql exist"
          echo
        fi
        # backup <- realmd.sql
        FILE="$folder_wow/backup/$db_realmd-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Realmd' ! Creating backup.."
          mysqldump --defaults-extra-file="$sql_mycnf" "$db_realmd" >"$folder_wow"/backup/"$db_realmd"-"$NOW".sql
          echo
        else
          printf '%b' "[${G0:?}ok${N0:?}] $db_realmd-$NOW.sql exist"
          echo
        fi

        # backup done

        # drop databases

        # drop database 'characters'

        echo
        RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_characters")
        if [ "$RESULT" == "$db_characters" ]; then
          mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_characters"
        fi
        # drop database 'mangos'
        RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "${db_mangos:?}")
        if [ "$RESULT" == "$db_mangos" ]; then
          mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_mangos"
        fi
        read -r -p "Drop realmd database? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # drop database 'realmd'
          RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_realmd")
          if [ "$RESULT" == "$db_realmd" ]; then
            mysqladmin --defaults-extra-file="$sql_mycnf" -f DROP "$db_realmd"
          fi
        fi

        # drop databases done

        # create databases

        # create database 'characters'
        echo
        RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_characters")
        if [ "$RESULT" == "$db_characters" ]; then
          printf "[${G0:?}ok${N0:?}] 'Characters' database installed."
          echo
        else
          printf "[${R0:?}empty${N0:?}] 'Characters' importing.."
          echo
          mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_characters CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$sql_mycnf" --database="$db_characters" <"${folder_sql:?}"/base/characters.sql
        fi
        # create database 'mangos'
        RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_mangos")
        if [ "$RESULT" == "$db_mangos" ]; then
          printf "[${G0:?}ok${N0:?}] 'Mangos' database installed."
          echo
        else
          printf "[${R0:?}empty${N0:?}] 'Mangos' importing.."
          echo
          mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_mangos CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$sql_mycnf" --database="$db_mangos" <"$folder_sql"/base/mangos.sql
        fi
        # create database 'realmd'
        RESULT=$(mysql --defaults-extra-file="$sql_mycnf" -e "SHOW DATABASES" | grep "$db_realmd")
        if [ "$RESULT" == "$db_realmd" ]; then
          printf "[${G0:?}ok${N0:?}] 'Realmd' database installed."
          echo
        else
          printf "[${R0:?}empty${N0:?}] 'Realmd' importing.."
          echo
          mysql --defaults-extra-file="$sql_mycnf" -e "CREATE DATABASE $db_realmd CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$sql_mycnf" --database="$db_realmd" <"$folder_sql"/base/realmd.sql
        fi
        echo

        # create databases done

        # delete and start over done

        # InstallFullDB ?

        read -r -p "InstallFullDB? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$user":"$group" "$folder_wow"
          cd "$folder_db" || exit
          ./InstallFullDB.sh
        fi

        # InstallFullDB done

        # import backup ?

        echo
        ls -lQS "$folder_wow"/backup
        echo
        read -r -p "Import latest backup? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sleep 1
          echo -ne '(0%)\r'
          mysql --defaults-extra-file="$sql_mycnf" "$db_characters" <"$folder_wow"/backup/"$db_characters"-"$NOW".sql
          sleep 1
          echo -ne '(25%)\r'
          mysql --defaults-extra-file="$sql_mycnf" "$db_realmd" <"$folder_wow"/backup/"$db_realmd"-"$NOW".sql
          sleep 1
          echo -ne '(50%)\r'
          sudo service mariadb stop &>/dev/null
          sudo service mysql stop &>/dev/null
          echo -ne '(75%)\r'
          sleep 1
          echo -ne '(90%)\r'
          sudo service mariadb restart &>/dev/null
          sudo service mysql restart &>/dev/null
          echo -ne '(100%)\r'
        fi
        echo
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # drop/import databases done

      # update Database done

      # import backup done

      # convert_mysql_engine = myisam -> innodb

    "3")

      read -r -p "Convert MySQL Engine = myisam -> innodb? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
          cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
        else

          printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
          echo
          sleep 1

          # service status
          realm_service=realmd
          world_service=mangosd

          # realmd service
          case "$(pidof $realm_service | wc -w)" in
          0) ;;
          *) sudo service realmd stop ;;
          esac

          # mangosd service
          case "$(pidof $world_service | wc -w)" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "$user":"$group" "$folder_wow"
        echo -ne '(0%)\r'
        sleep 1
        echo -ne '(10%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_mangos" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(20%)\r'
          sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_mangos" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          echo -ne '(30%)\r'
        done
        echo -ne '(40%)\r'
        sleep 1
        echo -ne '(50%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_realmd" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(60%)\r'
          sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_realmd" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
        done
        echo -ne '(70%)\r'
        sleep 1
        echo -ne '(80%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$sql_mycnf" --skip-column-names -B -D "$db_characters" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(90%)\r'
          sudo mysql --defaults-extra-file="$sql_mycnf" -D "$db_characters" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          echo -ne '(95%)\r'
        done
        echo -ne '(96%)\r'
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        echo -ne '(97%)\r'
        sleep 1
        echo -ne '(98%)\r'
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        echo -ne '(99%)\r'
        sleep 1
        echo -ne '(100%)\r'
        echo
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # convert_mysql_engine = myisam -> innodb done

      # reinstall (delete /classic-db)

    "4")

      read -r -p "Reinstall (Delete /classic-db)? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        sudo chown -R "$user":"$group" "$folder_wow"
        cp "$folder_db"/InstallFullDB.config "$folder_wow" &>/dev/null
        sudo rm -r "$folder_db" &>/dev/null
        cd "$folder_wow" || exit
        git clone "$github_database"
        mv "$folder_wow"/*.config "$folder_db" &>/dev/null
        sudo chown -R "$user":"$group" "$folder_wow"
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /classic-db) done

      # reset --hard origin/master

    "5")

      read -r -p "Reset --hard origin/master? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$folder_db" || exit
        git reset --hard origin/master
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # restart mysql/mariadb server (service)

    "6")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Restart MariaDB
 2 : Restart MySQL
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # restart mariadb

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sleep 1
        sudo service mariadb status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart mysql

      "2")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql restart &>/dev/null
        sleep 1
        sudo service mysql status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # restart mysql/mariadb server (service) done

      # Stop mysql/mariadb server (service)

    "7")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Stop MySQL
 2 : Stop MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # stop mysql

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # stop mariadb

      "2")

        sudo service mariadb stop &>/dev/null
        sleep 1
        sudo service mariadb status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # Stop mysql/mariadb server (service) done

      # enable/disable mysql/mariadb server

    "8")

      clear
      cat <<EOF
 Enable/Disable MySQL
 (systemctl)

 1 : Enable MySQL
 2 : Disable MySQL
 3 : Enable MariaDB
 4 : Disable MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # enable mysql

      "1")

        sudo systemctl enable mysql 2>/dev/null
        sudo systemctl enable mysql.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mysql

      "2")

        sudo systemctl disable mysql 2>/dev/null
        sudo systemctl disable mysql.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # enable mariadb

      "3")

        sudo systemctl enable mariadb@.service 2>/dev/null
        sudo systemctl enable mariadb@ 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mariadb

      "4")

        sudo systemctl disable mariadb@ 2>/dev/null
        sudo systemctl disable mariadb.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # enable/disable mysql/mariadb server

      # apply all updates [A] to [B]

    "9")

      sudo chown -R "$user":"$group" "$folder_wow"
      printf '%b' "[${R0:?}Warning${N0:?}]: Only update whats missing.
Check log for which database needs 'applying updates'"
      echo
      # combine [A] to [B] updates individually
      cat "${folder_core:?}"/sql/updates/characters/*.sql >"$folder_wow"/.all_characters.sql
      cat "${folder_core:?}"/sql/updates/mangos/*.sql >"$folder_wow"/.all_mangos.sql
      cat "${folder_core:?}"/sql/updates/realmd/*.sql >"$folder_wow"/.all_realmd.sql

      # apply all updates [A] to [B] characters ?
      echo
      read -r -p "Characters? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "Loading.."
        echo
        sleep 1

        # service status
        realm_service=realmd
        world_service=mangosd

        # realmd service
        case "$(pidof $realm_service | wc -w)" in
        0) ;;
        *) sudo service realmd stop ;;
        esac

        # mangosd service
        case "$(pidof $world_service | wc -w)" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac

        echo
        read -r -p "Without error output? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_characters" <"$folder_wow"/.all_characters.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_characters" <"$folder_wow"/.all_characters.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G0:?}ok${N0:?}]"
        echo
      fi
      # apply all updates [A] to [B] mangos ?
      read -r -p "Mangos? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "Loading.."
        echo
        sleep 1

        # service status
        realm_service=realmd
        world_service=mangosd

        # realmd service
        case "$(pidof $realm_service | wc -w)" in
        0) ;;
        *) sudo service realmd stop ;;
        esac

        # mangosd service
        case "$(pidof $world_service | wc -w)" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac

        echo
        read -r -p "Without error output? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_mangos" <"$folder_wow"/.all_mangos.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_mangos" <"$folder_wow"/.all_mangos.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G0:?}ok${N0:?}]"
        echo
      fi
      # apply all updates [A] to [B] realmd ?
      read -r -p "Realmd? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "Loading.."
        echo
        sleep 1

        # service status
        realm_service=realmd
        world_service=mangosd

        # realmd service
        case "$(pidof $realm_service | wc -w)" in
        0) ;;
        *) sudo service realmd stop ;;
        esac

        # mangosd service
        case "$(pidof $world_service | wc -w)" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac

        echo
        read -r -p "Without error output? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_realmd" <"$folder_wow"/.all_realmd.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$sql_mycnf" -f --database="$db_realmd" <"$folder_wow"/.all_realmd.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G0:?}ok${N0:?}]"
        echo
      fi
      # remove old 'combined updates' sql files
      rm "$folder_wow"/.*.sql 2>/dev/null
      # InstallFullDB ?
      echo
      printf '%b' "${G0:?}Recommended if you applied anything${N0:?}"
      echo
      read -r -p "InstallFullDB? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "Loading.."
        echo
        sleep 1

        # service status
        realm_service=realmd
        world_service=mangosd

        # realmd service
        case "$(pidof $realm_service | wc -w)" in
        0) ;;
        *) sudo service realmd stop ;;
        esac

        # mangosd service
        case "$(pidof $world_service | wc -w)" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac

        printf '%b' "[${G0:?}ok${N0:?}]"
        echo
        sudo chown -R "$user":"$group" "$folder_wow"
        cd "$folder_db" || exit
        ./InstallFullDB.sh
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G0:?}ok${N0:?}] "
      fi
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # apply all updates [A] to [B] done

    esac

    ;;

    # update database done

    # accounts

  "u")

    echo "User Accounts"
    echo
    mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT username, gmlevel, lockedIp, active_realm_id, id FROM $db_realmd.account;" 2>/dev/null
    read -r -p "Last Logins? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT id, accountId, ip, loginTime, loginSource, id FROM $db_realmd.account_logons;" 2>/dev/null
    fi
    read -r -p "Check database size? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$sql_mycnf" <<<"SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' FROM information_schema.TABLES WHERE table_schema = \"$db_realmd\" ORDER BY (data_length + index_length) DESC;" | head
      read -r -p "Press Enter to continue" </dev/tty
    fi

    ;;

    # accounts done

    # characters

  "t")

    # get class count
    FILE_CLASSES="/var/log/ms/classes.$NOW"
    if [ ! -f $FILE_CLASSES ]; then
      # remove old file
      rm /var/log/ms/classes.* &>/dev/null
      # get classes from table characters
      mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT class FROM $db_characters.characters;" 2>/dev/null |
        tr -d 'class' >/var/log/ms/classes."$NOW" # update this everyday
    fi

    # index class, count each one
    WARRIOR=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | egrep -x '.{1}' 2>/dev/null | grep "1" 2>/dev/null | wc -l 2>/dev/null)
    PALADIN=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "2" 2>/dev/null | wc -l 2>/dev/null)
    HUNTER=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "3" 2>/dev/null | wc -l 2>/dev/null)
    ROGUE=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "4" 2>/dev/null | wc -l 2>/dev/null)
    PRIEST=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "5" 2>/dev/null | wc -l 2>/dev/null)
    SHAMAN=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "7" 2>/dev/null | wc -l 2>/dev/null)
    MAGE=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "8" 2>/dev/null | wc -l 2>/dev/null)
    WARLOCK=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "9" 2>/dev/null | wc -l 2>/dev/null)
    DRUID=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | egrep -x '.{2}' 2>/dev/null | grep "11" 2>/dev/null | wc -l 2>/dev/null)

    # total count
    CLASS_TOTAL=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "[1-9]" 2>/dev/null | wc -l 2>/dev/null)

    # percentage of each class
    WARRIOR_P=$(echo "100/$CLASS_TOTAL*$WARRIOR" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    PALADIN_P=$(echo "100/$CLASS_TOTAL*$PALADIN" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    HUNTER_P=$(echo "100/$CLASS_TOTAL*$HUNTER" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    ROGUE_P=$(echo "100/$CLASS_TOTAL*$ROGUE" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    PRIEST_P=$(echo "100/$CLASS_TOTAL*$PRIEST" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    SHAMAN_P=$(echo "100/$CLASS_TOTAL*$SHAMAN" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    MAGE_P=$(echo "100/$CLASS_TOTAL*$MAGE" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    WARLOCK_P=$(echo "100/$CLASS_TOTAL*$WARLOCK" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    DRUID_P=$(echo "100/$CLASS_TOTAL*$DRUID" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)

    echo "Characters"
    echo
    mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, level, online, account, class FROM $db_characters.characters;" 2>/dev/null
    printf '%b' "
Classes

${GR:?}1 ${N0:?} Warrior\e[32m.:${N0:?} $WARRIOR ${GR:?}$WARRIOR_P%${N0:?}
${GR:?}2 ${N0:?} Paladin\e[32m.:${N0:?} $PALADIN ${GR:?}$PALADIN_P%${N0:?}
${GR:?}3 ${N0:?} Hunter\e[32m..:${N0:?} $HUNTER ${GR:?}$HUNTER_P%${N0:?}
${GR:?}4 ${N0:?} Rogue\e[32m...:${N0:?} $ROGUE ${GR:?}$ROGUE_P%${N0:?}
${GR:?}5 ${N0:?} Priest\e[32m..:${N0:?} $PRIEST ${GR:?}$PRIEST_P%${N0:?}
${GR:?}7 ${N0:?} Shaman\e[32m..:${N0:?} $SHAMAN ${GR:?}$SHAMAN_P%${N0:?}
${GR:?}8 ${N0:?} Mage\e[32m....:${N0:?} $MAGE ${GR:?}$MAGE_P%${N0:?}
${GR:?}9 ${N0:?} Warlock\e[32m.:${N0:?} $WARLOCK ${GR:?}$WARLOCK_P%${N0:?}
${GR:?}11${N0:?} Druid\e[32m...:${N0:?} $DRUID ${GR:?}$DRUID_P%${N0:?}\n"
    echo
    read -r -p "Check database size? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$sql_mycnf" <<<"SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' FROM information_schema.TABLES WHERE table_schema = \"$db_characters\" ORDER BY (data_length + index_length) DESC;" | head
      read -r -p "Press Enter to continue" </dev/tty
    fi

    ;;

    # characters done

    # guilds

  "g")

    echo "Guilds"
    echo
    mysql --defaults-extra-file="$sql_mycnf" --execute="SELECT name, motd FROM $db_characters.guild;" 2>/dev/null
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # guilds done

    # shutdown server ? >> (ﾉ °益°)ﾉ 彡 ┻━┻ holy *@?!1kek .. need muh grindz x()<zz ! OO

  "s")

    # check if 'mangosd.conf' are installed
    FILE="$folder_core/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "${GR:?}mangosd.conf${N0:?} not found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "$folder_wow"/backup/configurations/mangosd.conf "$folder_core"/run/etc/; then
        printf '%b' "Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "No backup found!"
        echo "Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="$folder_core/run/etc/realmd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "${GR:?}realmd.conf${N0:?} not found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "$folder_wow"/backup/configurations/realmd.conf "$folder_core"/run/etc/; then
        printf '%b' "Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "No backup found!"
        echo "Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      HEIGHT=10
      WIDTH=30
      CHOICE_HEIGHT=4
      BACKTITLE="shutdown server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Shutdown Server"
        2 "Shutdown realmd"
        3 "Shutdown mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # shutdown realmd, mangosd

      "1")

        read -r -p "Shutdown realmd, mangosd? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd" 2>/dev/null; then
              echo "Killing screen (realmd)"
            fi
            if screen -list 2>/dev/null |
              grep -q "mangosd" 2>/dev/null; then
              echo "Killing screen (mangosd)"
            fi
            printf '%b' "${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
            sleep 3
            sudo killall screen 2>/dev/null
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf "${R1:?}Shutting down${GR:?} realmd & mangosd service${N0:?}"
            echo
            sleep 1
            echo -ne '(0%)\r'
            sleep 1

            # this is for docker users
            if [ -f /.dockerenv ]; then
              # keep old logs
              cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
              cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
            else

              # service status
              realm_service=realmd
              world_service=mangosd

              # realmd service
              case "$(pidof $realm_service | wc -w)" in
              0) ;;
              *) sudo service realmd stop ;;
              esac

              echo -ne '(50%)\r'
              sleep 1

              # mangosd service
              case "$(pidof $world_service | wc -w)" in
              0) ;;
              *) sudo service mangosd stop ;;
              esac
            fi

            echo -ne '(100%)\r'
            sleep 1
          fi
        fi

        ;;

        # shutdown realmd, mangosd done

        # shutdown realmd

      "2")

        read -r -p "Shutdown realmd? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd" 2>/dev/null; then
              echo "Killing screen (realmd)"
            fi
            sleep 3
            # get realmd screen id
            REALMD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.realmd" 2>/dev/null |
              awk -F. '{ print $1 }' 2>/dev/null)
            # kill that screen
            screen -S "$REALMD_ID" -X quit
            screen -S realmd -X quit
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf "${R0:?}Shutting down${N0:?} realmd service"

            # service status
            realm_service=realmd

            # realmd service
            case "$(pidof $realm_service | wc -w)" in
            0) ;;
            *) sudo service realmd stop ;;
            esac
          fi
        fi

        ;;

        # shutdown realmd done

        # shutdown mangosd

      "3")

        read -r -p "Shutdown mangosd? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "mangosd" 2>/dev/null; then
              echo "Killing screen (mangosd)"
            fi
            sleep 3
            # get mangosd screen id
            MANGOSD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.mangosd" 2>/dev/null |
              awk -F. '{ print $1 }' 2>/dev/null)
            # kill that screen
            screen -S "$MANGOSD_ID" -X quit
            screen -S mangosd -X quit
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            # done
            printf "${R0:?}Shutting down${N0:?} mangosd service"

            # service status
            world_service=mangosd

            # mangosd service
            case "$(pidof $world_service | wc -w)" in
            0) ;;
            *) sudo service mangosd stop ;;
            esac
          fi
        fi

        ;;

        # shutdown mangosd done

      esac
    fi

    ;;

    # shutdown server done << it's over!!

    # restart server

  "r")

    # check if 'mangosd.conf' are installed
    FILE="$folder_core/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "${GR:?}mangosd.conf${N0:?} not found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "$folder_wow"/backup/configurations/mangosd.conf "$folder_core"/run/etc/; then
        printf '%b' "Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "No backup found!"
        echo "Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="$folder_core/run/etc/realmd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "${GR:?}realmd.conf${N0:?} not found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "$folder_wow"/backup/configurations/realmd.conf "$folder_core"/run/etc/; then
        printf '%b' "Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "No backup found!"
        echo "Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      if ! [ -x "$(command -v screen)" ]; then
        sudo apt-get install screen -y 2>/dev/null
      fi
      # codes
      # realmd.log
      realmd_log_empty="${Y0:?}Empty${N0:?} -> "
      realmd_log_error="${R0:?}Error${N0:?} -> "
      realmd_log_failed="${R0:?}Realm halted or failed${N0:?}"
      realmd_log_ok="${G0:?}ok${N0:?}"

      # server.log
      server_log_initialized="${G0:?}World initialized${N0:?}"
      server_log_serious="${R1:?}Serious${N0:?} -> "
      server_log_failed="${R0:?}World halted or failed${N0:?}"
      server_log_error="${R0:?}Error${N0:?} -> "
      server_log_empty="${Y0:?}Empty${N0:?} -> "
      server_log_ok="${G0:?}ok${N0:?}"

      # service status
      world_service=mangosd
      realm_service=realmd
      # codes done

      HEIGHT=10
      WIDTH=30
      CHOICE_HEIGHT=4
      BACKTITLE="restart server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Restart server"
        2 "Restart realmd"
        3 "Restart mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # restart realmd,mangos

      "1")

        read -r -p "Restart realmd,mangos? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd" 2>/dev/null; then
              echo "Killing screen (realmd)"
            fi
            if screen -list 2>/dev/null |
              grep -q "mangosd" 2>/dev/null; then
              echo "Killing screen (mangosd)"
            fi
            sleep 3
            sudo killall screen 2>/dev/null
            echo "Starting server with screen
'screen -list' -> 'screen -r NUM'"
            sleep 3
            # remove dead screens
            screen -wipe 2>/dev/null
            # setup screens
            screen -dmS realmd
            screen -dmS mangosd
            # setup variables ruled by configuration
            REALMD_SCREEN="$folder_core/run/bin/./realmd -c $folder_core/run/etc/realmd.conf\n"
            MANGOSD_SCREEN="$folder_core/run/bin/./mangosd -c $folder_core/run/etc/mangosd.conf\n"
            # implement daemons inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN"
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN"
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf "${G0:?}Restarting${N0:?} server"
            echo
            echo -ne '(0%)\r'
            sleep 1
            sudo service realmd restart &>/dev/null
            echo -ne '(50%)\r'
            sleep 1
            sudo service mangosd restart &>/dev/null
            echo -ne '(100%)\r'
            sleep 1
            echo
            echo "Please wait"

            # wait wordlist
            # note - don't put any space(s) between keywords.

            # realmd
            wordlist_realmd=(".*[A]\sYou\shave:\s-->*.
.*[B]\sYou\sneed:\s-->*.
.*Added\srealm\sid*.
.*Can't\sconnect\sto\slocal\sMySQL*.
.*cannot\sfind\sthe\sversion\sinfo*.
.*database\sis\smissing\sor\scorrupt*.
.*reinstall\syour*.")
            # mangosd

            wordlist_mangosd=(".*[A]\sYou\shave:\s-->*.
.*[B]\sYou\sneed:\s-->*.
.*Can't\sconnect\sto\slocal\sMySQL*.
.*core\sdumped*.
.*corrupt*.
.*critical*.
.*fail*.
.*failed*.
.*fatal*.
.*file\struncated*.
.*Halting\sprocess*.
.*initialized*.
.*malformed*.
.*out\sof\sdate!*.
.*reinstall\syour*.
.*segfault*.
.*Segmentation\sfault*.
.*STARTUP*.
.*TIME*.
.*You\smust\sapply\sall\supdates\safter\s[A]\sto\s[B]*.")

            # wait wordlist done

            # wait for realmd & mangosd to fill up logs

            # Realmd.log
            tail -f "$folder_core"/run/logs/Realmd.log 2>/dev/null |
              { grep -q -m 1 "${wordlist_realmd[@]}" && pkill -P $$ -x tail 2>/dev/null; }
            # Server.log
            tail -f "$folder_core"/run/logs/Server.log 2>/dev/null |
              { grep -q -m 1 "${wordlist_mangosd[@]}" && pkill -P $$ -x tail 2>/dev/null; }
            # wait for realmd & mangosd to fill up logs done

            clear

            # realmd service
            case "$(pidof $realm_service | wc -w)" in
            0) printf "Realm [${GR:?}off${N0:?}] " ;;
            1) printf "Realm [${G0:?}active${N0:?}] " ;;
            *) printf "Realm [${Y0:?}ok?${N0:?}] " ;;
            esac

            # mangosd service
            case "$(pidof $world_service | wc -w)" in
            0) printf "World [${GR:?}off${N0:?}] " ;;
            1) printf "World [${G0:?}active${N0:?}] " ;;
            *) printf "World [${Y0:?}ok?${N0:?}] " ;;
            esac

            echo
            # realmd.log
            printf "${GR:?}<------------------------------------------------------>${N0:?}"
            echo
            # if realm failed
            if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
              # if any, print "Realm failed or halted"
              echo
              printf '%b' "$realmd_log_failed"
              echo
            else
              # look for empty tables
              if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                # if any, print "empty"
                printf "Server.log "
                printf '%b' "$realmd_log_empty"
                # count empty inside log
                grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log 2>/dev/null
              fi
              # look for error
              if grep -E -q ".*ERROR*." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                # if any, print "error"
                printf "Realmd.log "
                printf '%b' "$realmd_log_error"
                # count errors inside log
                grep -c -E ".*ERROR*." "$folder_core"/run/logs/Realmd.log 2>/dev/null
              # if nothing, print "ok"
              else
                printf "Realmd.log "
                printf '%b' "$realmd_log_ok"
                echo
              fi
              # this database (realmd) is out of date!
              if grep -E -q "You\shave:\s-->" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                echo
                printf '%b' "Database is out of date!
${GR:?}(d) Update Database > Apply all updates [A]-[B]${N0:?}"
                echo
              fi
              # databases is missing or corrupt.
              if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                echo
                printf '%b' "Database is missing or corrupt!"
                echo
              fi
              # reinstall your (realmd) database
              if grep -E -q "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                echo
                printf '%b' "Reinstall your database!"
                echo
              fi
              # your realmd.conf version indicates your conf file is out of date
              if grep -E -q ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
                echo
                printf "${R0:?}WARNING${N0:?} "
                printf '%b' "realmd.conf is out of date!"
                echo
              fi
            fi
            echo
            tail "$folder_core"/run/logs/Realmd.log 2>/dev/null
            # server.log
            printf "${GR:?}<------------------------------------------------------>${N0:?}"
            echo
            # if world failed
            if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$folder_core"/run/logs/Server.log 2>/dev/null; then
              # if any, print "World failed or halted"
              echo
              printf '%b' "$server_log_failed"
              echo
            else
              # look for empty tables
              if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "empty"
                printf "Server.log "
                printf '%b' "$server_log_empty"
                # count empty inside log
                grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Server.log 2>/dev/null
              fi
              # look for error
              if grep -E -q ".*ERROR*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "error"
                printf "Server.log "
                printf '%b' "$server_log_error"
                # count errors inside log
                grep -c -E ".*ERROR*." "$folder_core"/run/logs/Server.log 2>/dev/null
                # look for serious error
                if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                  # if any, print "serious"
                  printf "Server.log "
                  printf '%b' "$server_log_serious"
                  # count serious errors inside log
                  grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log 2>/dev/null
                fi
              # if nothing, print "ok"
              else
                printf "Server.log "
                printf '%b' "$server_log_ok"
                echo
              fi
              # world failed
              if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "World failed"
                echo
                printf '%b' "$server_log_failed"
                echo
              fi
              # this database (mangosd) is out of date!
              if grep -E -q "You\shave:\s-->" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                echo
                printf '%b' "Database is out of date!
${GR:?}(d) Update Database > Apply all updates [A]-[B]${N0:?}"
                echo
              fi
              # databases is missing or corrupt.
              if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                echo
                printf '%b' "Database is missing or corrupt!"
                echo
              fi
              # reinstall your (mangosd) database
              if grep -E -q "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                echo
                printf '%b' "Reinstall your database!"
                echo
              fi
              # can't connect to local mysql through socket
              if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                echo
                printf '%b' "Can't connect to local MySQL!"
                echo
              fi
              # your mangosd.conf version indicates your conf file is out of date
              if grep -E -q ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                echo
                printf "${R0:?}WARNING${N0:?} "
                printf '%b' "mangosd.conf is out of date!"
                echo
              fi
              # get startup time
              startup_time=$(grep "SERVER\sSTARTUP\sTIME*." wow/mangos-classic/run/logs/Server.log 2>/dev/null |
                cut -d\  -f6-9 2>/dev/null)
              # world initialized
              if grep -E -q "World\sinitialized" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "World initialized"
                echo
                printf '%b' "$server_log_initialized $startup_time"
                echo
              fi
              # Playerbot loaded
              if grep -E -q "Playerbot: Using configuration file" "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "Playerbot ok"
                printf '%b' "${G0:?}Playerbot${N0:?}"
                echo
              else
                # off
                printf '%b' "${GR:?}Playerbot${N0:?}"
                echo
              fi
              # ahbot loaded and initialized
              if grep -E -q "Initialize AuctionHouseBot..." "$folder_core"/run/logs/Server.log 2>/dev/null; then
                # if any, print "AHbot ok"
                printf '%b' "${G0:?}AHbot${N0:?}"
                echo
              else
                # off
                printf '%b' "${GR:?}AHbot${N0:?}"
                echo
              fi
            fi
            echo
            printf "${G0:?}>${N0:?} hit Any key to go back."
            echo
            read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
            echo
            echo
            case $ans in
            "t")
              tail "$folder_core"/run/logs/Server.log 2>/dev/null
              echo
              printf "${GR:?}<------------------------------------------------------>${N0:?}"
              echo
              read -r -p "Press Enter to continue" </dev/tty
              ;;
            "f")
              echo
              tail -f "$folder_core"/run/logs/Server.log 2>/dev/null
              ;;
            "n")
              echo
              nano "$folder_core"/run/logs/Server.log
              ;;
            "N")
              echo
              nano "$folder_core"/run/logs/Realmd.log
              ;;

              # lnav

            "l")
              echo
              # codes
              logs=("$folder_core"/run/logs/EventAIErrors.log
                "$folder_core"/run/logs/DBErrors.log
                "$folder_core"/run/logs/Realmd.log
                "$folder_core"/run/logs/Server.log)
              # codes done
              if ! [ -x "$(command -v lnav)" ]; then
                sudo apt install lnav -y 2>/dev/null
              fi
              lnav "${logs[@]}" 2>/dev/null
              ;;

            esac
          fi
        fi

        ;;

        # restart realmd,mangos done

        # restart realmd

      "2")

        read -r -p "Restart realmd? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd" 2>/dev/null; then
              echo "Killing screen (realmd)"
            fi
            echo "Starting server with screen
'screen -list' -> 'screen -r NUM'"
            sleep 3
            # remove dead screens
            screen -wipe 2>/dev/null
            # setup screen
            screen -dmS realmd
            # setup variable ruled by configuration
            REALMD_SCREEN="$folder_core/run/bin/./realmd -c $folder_core/run/etc/realmd.conf\n"
            # implement daemon inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN"
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf "${G0:?}Restarting${N0:?} realmd"
            echo
            echo "Please wait"
            sleep 1
            sudo service realmd restart &>/dev/null
            sleep 1
            echo
          fi
        fi

        ;;

        # restart realmd done

        # restart mangosd

      "3")

        read -r -p "Restart mangosd? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "mangosd" 2>/dev/null; then
              echo "Killing screen (mangosd)"
            fi
            echo "Starting server with screen
'screen -list' -> 'screen -r NUM'"
            sleep 3
            # remove dead screens
            screen -wipe 2>/dev/null
            # setup screen
            screen -dmS mangosd
            # setup variables ruled by configuration
            MANGOSD_SCREEN="$folder_core/run/bin/./mangosd -c $folder_core/run/etc/mangosd.conf\n"
            # implement daemon inside newly made screens
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN"
            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            cp "$folder_core"/run/logs/Realmd.log "$folder_core"/run/logs/Realmd.log.old &>/dev/null
          else

            # keep old logs
            cp "$folder_core"/run/logs/Server.log "$folder_core"/run/logs/Server.log.old &>/dev/null
            # done
            printf "${G0:?}Restarting${N0:?} mangosd"
            echo
            sleep 1
            sudo service mangosd restart &>/dev/null
            sleep 1
            echo "Please wait"

            # wait wordlist
            # note - don't put any space(s) between keywords.

            # mangosd
            wordlist_mangosd=(".*[A]\sYou\shave:\s-->*.
.*[B]\sYou\sneed:\s-->*.
.*Can't\sconnect\sto\slocal\sMySQL*.
.*core\sdumped*.
.*corrupt*.
.*critical*.
.*fail*.
.*failed*.
.*fatal*.
.*file\struncated*.
.*Halting\sprocess*.
.*initialized*.
.*malformed*.
.*out\sof\sdate!*.
.*reinstall\syour*.
.*segfault*.
.*Segmentation\sfault*.
.*STARTUP*.
.*TIME*.
.*You\smust\sapply\sall\supdates\safter\s[A]\sto\s[B]*.")

            # wait wordlist done

            # wait for mangosd to fill up logs

            # Server.log
            tail -f "$folder_core"/run/logs/Server.log 2>/dev/null |
              { grep -q -m 1 "${wordlist_mangosd[@]}" && pkill -P $$ -x tail 2>/dev/null; }
            # wait for mangosd to fill up logs done
          fi
        fi

        ;;

        # restart mangosd done

      esac
    fi

    ;;

    # lnav - done

    # restart server done

    # update cmangos-script

  "w")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y
    fi
    # codes done
    HEIGHT=10
    WIDTH=40
    CHOICE_HEIGHT=3
    BACKTITLE="update Helper"
    TITLE="Update cmangos-script [Helper]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Update helper"
      2 "Reinstall /cmangos-script"
      3 "Reset --hard origin/master")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # update helper

    "1")

      FILE="${folder_install:?}/cmangos-script/README.md"
      if [ ! -f "$FILE" ]; then
        # not installed
        sudo chown -R "$user":"$group" "$folder_install"
        cd "$folder_install" || exit
        git clone "${github_helper:?}"
      else
        # installed
        read -r -p "Update/Install Helper? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$user":"$group" "$folder_install"
          echo
          echo "Checking your current release"
          echo
          sleep 1
          cd "$folder_helper" || exit
          if git checkout master &>/dev/null &&
            git fetch origin master &>/dev/null &&
            [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
            git merge origin/master; then
            latest_date=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
            latest_head=$(git rev-parse --short HEAD)
            printf '%b' "[${R0:?}old${N0:?}] (\e[4;32m$latest_head${N0:?}) \e[4;32mNew Updates For Helper${N0:?}! - $latest_date"
            echo
            cd "$folder_helper" || exit
            echo
            sleep 1
            printf "[${R0:?}old${N0:?}] -> old release installed!"
            sleep 1
            echo
            echo
            printf "[${G0:?}Updating Helper${N0:?}]"
            echo
            echo
            # keep old mangos
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            # done
            printf "[${G0:?}ok${N0:?}] -> /usr/local/bin/mangos.old"
            sleep 1
            echo
            printf "[${G0:?}ok${N0:?}] -> Stripping executable on 'mangos.old'"
            sleep 1
            echo
            sudo chmod -x /usr/local/bin/mangos.old
            sudo chown -R "$user":"$group" "$folder_helper"
            cd "$folder_helper" || exit
            printf "[${G0:?}ok${N0:?}] -> Installing new release"
            sleep 1
            echo
            sudo cp "$folder_helper"/mangos /usr/local/bin &>/dev/null
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf "[${G0:?}ok${N0:?}] -> Installed."
            echo
            echo
            sleep 1 && exit
          else
            # install new upgrades
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            sudo chmod -x /usr/local/bin/mangos.old
            sudo cp "$folder_helper"/mangos /usr/local/bin/mangos &>/dev/null
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf "[${G0:?}ok${N0:?}] -> Installed."
            echo
            echo
          fi
          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${user:?}":"${group:?}" /var/log/ms
          # create installed mark
          echo "CMaNGOS Script was installed at ${NOW:?}" >/var/log/ms/installed_ms
          sleep 1 && exit
        fi
      fi

      ;;

      # update helper done

      # fresh install (delete/git clone /cmangos-script)

    "2")

      read -r -p "Reinstall (delete/git clone /cmangos-script)? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        sudo mv /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
        printf "[${G0:?}ok${N0:?}] -> installed mangos removed."
        echo
        sudo rm -r "$folder_helper"
        printf "[${G0:?}ok${N0:?}] -> cmangos-script removed."
        echo
        sudo mkdir "${folder_install:?}" &>/dev/null
        printf '%b' "[${G0:?}ok${N0:?}] -> $folder_install/> git clone.."
        echo
        cd "$folder_install" || exit
        git clone "$github_helper"
        sudo cp "$folder_helper"/mangos /usr/local/bin &>/dev/null
        printf "[${G0:?}ok${N0:?}] -> Installing new release"
        sudo chmod +x /usr/local/bin/mangos
        echo
        sleep 1
        printf "[${G0:?}ok${N0:?}] -> Installed."
        echo
        echo
        sleep 2
        exit
      fi

      ;;

      # fresh install (delete/git clone /cmangos-script) done

      # reset --hard origin/master

    "3")

      read -r -p "Reset --hard origin/master? (y/n) " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$folder_helper" || exit
        git reset --hard origin/master
        printf '%b' "[${G0:?}ok${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # update cmangos-script done

    esac

    ;;

    # Check logs

  "l")

    clear

    # codes
    # realmd.log
    realmd_log_empty="${Y0:?}Empty${N0:?} -> "
    realmd_log_error="${R0:?}Error${N0:?} -> "
    realmd_log_failed="${R0:?}Realm halted or failed${N0:?}"
    realmd_log_ok="${G0:?}ok${N0:?}"

    # server.log
    server_log_initialized="${G0:?}World initialized${N0:?}"
    server_log_serious="${R1:?}Serious${N0:?} -> "
    server_log_failed="${R0:?}World halted or failed${N0:?}"
    server_log_error="${R0:?}Error${N0:?} -> "
    server_log_empty="${Y0:?}Empty${N0:?} -> "
    server_log_ok="${G0:?}ok${N0:?}"

    # service status
    world_service=mangosd
    realm_service=realmd
    # codes done

    # realmd service
    case "$(pidof $realm_service | wc -w)" in
    0) printf "Realm [${GR:?}off${N0:?}] " ;;
    1) printf "Realm [${G0:?}active${N0:?}] " ;;
    *) printf "Realm [${Y0:?}ok?${N0:?}] " ;;
    esac

    # mangosd service
    case "$(pidof $world_service | wc -w)" in
    0) printf "World [${GR:?}off${N0:?}] " ;;
    1) printf "World [${G0:?}active${N0:?}] " ;;
    *) printf "World [${Y0:?}ok?${N0:?}] " ;;
    esac

    echo
    # realmd.log
    printf "${GR:?}<------------------------------------------------------>${N0:?}"
    echo
    # if realm failed
    if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
      # if any, print "Realm failed or halted"
      echo
      printf '%b' "$realmd_log_failed"
      echo
    else
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        # if any, print "empty"
        printf "Server.log "
        printf '%b' "$realmd_log_empty"
        # count empty inside log
        grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Realmd.log 2>/dev/null
      fi
      # look for error
      if grep -E -q ".*ERROR*." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        # if any, print "error"
        printf "Realmd.log "
        printf '%b' "$realmd_log_error"
        # count errors inside log
        grep -c -E ".*ERROR*." "$folder_core"/run/logs/Realmd.log 2>/dev/null
      # if nothing, print "ok"
      else
        printf "Realmd.log "
        printf '%b' "$realmd_log_ok"
        echo
      fi
      # this database (realmd) is out of date!
      if grep -E -q "You\shave:\s-->" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        echo
        printf '%b' "Database is out of date!
${GR:?}(d) Update Database > Apply all updates [A]-[B]${N0:?}"
        echo
      fi
      # databases is missing or corrupt.
      if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        echo
        printf '%b' "Database is missing or corrupt!"
        echo
      fi
      # reinstall your (realmd) database
      if grep -E -q "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        echo
        printf '%b' "Reinstall your database!"
        echo
      fi
      # your realmd.conf version indicates your conf file is out of date
      if grep -E -q ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$folder_core"/run/logs/Realmd.log 2>/dev/null; then
        echo
        printf "${R0:?}WARNING${N0:?} "
        printf '%b' "realmd.conf is out of date!"
        echo
      fi
    fi
    echo
    tail "$folder_core"/run/logs/Realmd.log 2>/dev/null
    # server.log
    printf "${GR:?}<------------------------------------------------------>${N0:?}"
    echo
    # if world failed
    if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$folder_core"/run/logs/Server.log 2>/dev/null; then
      # if any, print "World failed or halted"
      echo
      printf '%b' "$server_log_failed"
      echo
    else
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "empty"
        printf "Server.log "
        printf '%b' "$server_log_empty"
        # count empty inside log
        grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$folder_core"/run/logs/Server.log 2>/dev/null
      fi
      # look for error
      if grep -E -q ".*ERROR*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "error"
        printf "Server.log "
        printf '%b' "$server_log_error"
        # count errors inside log
        grep -c -E ".*ERROR*." "$folder_core"/run/logs/Server.log 2>/dev/null
        # look for serious error
        if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log 2>/dev/null; then
          # if any, print "serious"
          printf "Server.log "
          printf '%b' "$server_log_serious"
          # count serious errors inside log
          grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$folder_core"/run/logs/Server.log 2>/dev/null
        fi
      # if nothing, print "ok"
      else
        printf "Server.log "
        printf '%b' "$server_log_ok"
        echo
      fi
      # this database (mangosd) is out of date!
      if grep -E -q "You\shave:\s-->" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        echo
        printf '%b' "Database is out of date!
${GR:?}(d) Update Database > Apply all updates [A]-[B]${N0:?}"
        echo
      fi
      # databases is missing or corrupt.
      if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        echo
        printf '%b' "Database is missing or corrupt!"
        echo
      fi
      # reinstall your (mangosd) database
      if grep -E -q "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        echo
        printf '%b' "Reinstall your database!"
        echo
      fi
      # can't connect to local mysql through socket
      if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        echo
        printf '%b' "Can't connect to local MySQL!"
        echo
      fi
      # your mangosd.conf version indicates your conf file is out of date
      if grep -E -q ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        echo
        printf "${R0:?}WARNING${N0:?} "
        printf '%b' "mangosd.conf is out of date!"
        echo
      fi
      # get startup time
      startup_time=$(grep "SERVER\sSTARTUP\sTIME*." wow/mangos-classic/run/logs/Server.log 2>/dev/null |
        cut -d\  -f6-9 2>/dev/null)
      # world initialized
      if grep -E -q "World\sinitialized" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "World initialized"
        echo
        printf '%b' "$server_log_initialized $startup_time"
        echo
      fi
      # Playerbot loaded
      if grep -E -q "Playerbot: Using configuration file" "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "Playerbot ok"
        printf '%b' "${G0:?}Playerbot${N0:?}"
        echo
      else
        # off
        printf '%b' "${GR:?}Playerbot${N0:?}"
        echo
      fi
      # ahbot loaded and initialized
      if grep -E -q "Initialize AuctionHouseBot..." "$folder_core"/run/logs/Server.log 2>/dev/null; then
        # if any, print "AHbot ok"
        printf '%b' "${G0:?}AHbot${N0:?}"
        echo
      else
        # off
        printf '%b' "${GR:?}AHbot${N0:?}"
        echo
      fi
    fi
    echo
    printf "${G0:?}>${N0:?} hit Any key to go back."
    echo
    read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
    echo
    echo
    case $ans in
    t | T)
      tail "$folder_core"/run/logs/Server.log 2>/dev/null
      echo
      printf "${GR:?}<------------------------------------------------------>${N0:?}"
      echo
      read -r -p "Press Enter to continue" </dev/tty
      ;;
    "f")
      echo
      tail -f "$folder_core"/run/logs/Server.log 2>/dev/null
      ;;
    "n")
      echo
      nano "$folder_core"/run/logs/Server.log 2>/dev/null
      ;;
    "N")
      echo
      nano "$folder_core"/run/logs/Realmd.log 2>/dev/null
      ;;

      # lnav

    "l")
      echo
      # codes
      logs=("$folder_core"/run/logs/EventAIErrors.log
        "$folder_core"/run/logs/DBErrors.log
        "$folder_core"/run/logs/Realmd.log
        "$folder_core"/run/logs/Server.log)
      # codes done
      if ! [ -x "$(command -v lnav)" ]; then
        sudo apt install lnav -y 2>/dev/null
      fi
      lnav "${logs[@]}"

      ;;

      # lnav - done

    *) ;;

    esac

    ;;

    # check logs done

    # create/apply .patch file

  "p")

    HEIGHT=11
    WIDTH=40
    CHOICE_HEIGHT=4
    BACKTITLE="patch"
    TITLE="Patch operations"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Create new patch"
      2 "Apply existing patch"
      3 "Search for .patch files"
      4 "my_bool fix (Daedalus)")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # create patch

    "1")

      sudo chown -R "$user":"$group" "$folder_core"
      cd "$folder_core" || exit
      git checkout sql/create/db_create_mysql.sql 1>/dev/null
      git diff >"${patch:?}"

      ;;

      # create patch done

      # apply patch

    "2")

      cd "$folder_core" || exit
      patch <"$patch" -p1

      ;;

      # apply patch done

      # search for .patch files

    "3")

      echo "Searching for existing patches..($folder_wow)"
      echo
      sudo find "$folder_wow" -name "*.patch"
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo
      ;;

      # my_bool fix

      # until it's implemented, it's here now: https://github.com/cmangos/issues/issues/2187#issuecomment-622377961
      # https://github.com/Daedalus-code/cmangos-arm (missing my_bool: error: ‘my_bool’ has not been declared)

    "4")

      sudo chown -R "$user":"$group" "$folder_core"
      cd "$folder_core" || exit
      wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi4.patch
      patch <arm_pi4.patch -p1
      echo "Files updated!"
      sleep 1
      printf '%b' "${GR:?}Renaming patch into 'CMaNGOS.patch'${N0:?}\n"
      mv arm_pi4.patch "$folder_core"/"$patch"
      sleep 1
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # my_bool fix done

    esac

    ;;

    # search for .patch files done

    # create/apply .patch file done

    # online check

  "o")

    # is fping installed?
    if ! [ -x "$(command -v fping)" ]; then
      sudo apt-get install fping -y 2>/dev/null
    fi
    echo
    printf '%b' "Online check -> ${G1:?}internet${N0:?}/${G1:?}intranet${N0:?}\n"
    echo
    # internet
    if nc -z "${internet:?}" "${realm_port:?}" 2>/dev/null; then
      PING_MS=$(fping -c 1 "$internet" 2>/dev/null |
        grep -o '[0-9].[0-9][0-9] ms' 2>/dev/null)
      PING_LOSS=$(fping -c 1 "$internet" 2>/dev/null |
        grep -o '[0-100]% loss' 2>/dev/null)
      printf '%b' "${G0:?}✓${N0:?} $internet - ${CY:?}$server_name${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$internet - $server_name - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    # intranet
    if nc -z "$intranet" "${realm_port:?}" 2>/dev/null; then
      PING_MS=$(fping -c 1 "$intranet" 2>/dev/null |
        grep -o '[0-9].[0-9][0-9] ms' 2>/dev/null)
      PING_LOSS=$(fping -c 1 "$intranet" 2>/dev/null |
        grep -o '[0-100]% loss' 2>/dev/null)
      printf '%b' "${G0:?}✓${N0:?} $intranet - ${CY:?}${server_name_lan:?}${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$intranet - $server_name_lan - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    echo
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # online check done

    # edit/copy config files ?

  "e")

    HEIGHT=19
    WIDTH=33
    CHOICE_HEIGHT=11
    BACKTITLE="Server configuration"
    TITLE="Configurations"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "server.txt"
      2 "server.cnf"
      3 "mangos.conf.dist"
      4 "mangos.conf"
      5 "realmd.conf.dist"
      6 "realmd.conf"
      7 "ahbot.conf.dist"
      8 "ahbot.conf"
      9 "playerbot.conf.dist"
      10 "playerbot.conf"
      11 "InstallFullDB")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in
    "1") nano "$folder_install"/server.txt ;;
    "2") nano "$folder_install"/server.cnf ;;
    "3") nano "$folder_core"/run/etc/mangosd.conf.dist ;;
    "4") nano "$folder_core"/run/etc/mangosd.conf ;;
    "5") nano "$folder_core"/run/etc/realmd.conf.dist ;;
    "6") nano "$folder_core"/run/etc/realmd.conf ;;
    "7") nano "$folder_core"/run/etc/ahbot.conf.dist ;;
    "8") nano "$folder_core"/run/etc/ahbot.conf ;;
    "9") nano "$folder_core"/run/etc/playerbot.conf.dist ;;
    "10") nano "$folder_core"/run/etc/playerbot.conf ;;
    "11") nano "$folder_db"/InstallFullDB.config ;;
    esac

    ;;

  "Q") exit ;;
  "q") echo "case sensitive!!" ;;
  *) echo "empty" ;;
  esac
done

# edit/copy config files done

# b9ea65cd1e2b40cfcbf777559ef0c9ca

# script done
