#!/bin/bash

############################################################################
#                 C M a N G O S  -  H E L P E R / T 0 0 l                  #
#               Continued Massive Network Game Object Server               #
############################################################################

# shellcheck disable=SC2034  # Unused variables left for readability

# Built on a Linux ubuntu 5.4.0-1029-raspi - aarch64 (Raspberry Pi4)
# https://ubuntu.com/download/raspberry-pi

# C(ontinued)-MaNGOS - https://github.com/cmangos

# By Rainman
# V20242110
# 7.1.6.0

while :; do

  # config directory
  # shellcheck disable=SC1091
  source /home/server.txt # please edit if anything else.

  # Color ######################################################################

  B0='\e[34m'   # Blue
  B1='\e[94m'   # Blue light
  CY='\e[36m'   # Cyan
  C1='\e[96m'   # Cyan light
  G0='\e[32m'   # Green
  G1='\e[92m'   # Green light
  GR='\e[90m'   # Grey
  N0='\033[0m'  # No color
  P0='\e[0;35m' # Purple
  P1='\e[1;35m' # Purple light
  R0='\e[31m'   # Red
  R1='\e[91m'   # Red light
  Y0='\e[33m'   # Yellow
  Y1='\e[93m'   # Yellow light

  # effects
  UND='\e[4m' # Underline
  DEF='\e[0m' # Default color and effects

  # GIT ########################################################################

  GITHUB_HELPER="https://github.com/Daedalus-code/cmangos-script.git"

  # SYSTEM #####################################################################

  # default patch name
  PATCH="CMaNGOS.patch"

  # dialog, ncurses no utf8 acs
  # ! -> https://github.com/scarygliders/X11RDP-o-Matic/issues/45
  export NCURSES_NO_UTF8_ACS=1

  # server type
  if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "c|C|v|V|classic|Classic|vanilla|Vanilla" &>/dev/null; then
    TYPE_CORE="classic"
    SERVER_BUILD="Classic"
  fi
  if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "t|T|tbc|TBC" &>/dev/null; then
    TYPE_CORE="tbc"
    SERVER_BUILD="TBC"
  fi
  if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "w|W|wotlk|WoTLK" &>/dev/null; then
    TYPE_CORE="wotlk"
    SERVER_BUILD="WoTLK"
  fi

  if [ -z "${SERVER_TYPE:?}" ] &>/dev/null; then
    TYPE_CORE="Error"
    SERVER_BUILD="Error"
  fi

  # github repos
  GITHUB_CMANGOS="https://github.com/cmangos/mangos-${TYPE_CORE:?}.git"
  GITHUB_DATABASE="https://github.com/cmangos/${TYPE_CORE:?}-db.git"
  # folders
  FOLDER_BUILD="/home/$(whoami)/wow/mangos-${TYPE_CORE:?}/build"
  FOLDER_SQL="/home/$(whoami)/wow/mangos-${TYPE_CORE:?}/sql"
  FOLDER_CORE="/home/$(whoami)/wow/mangos-${TYPE_CORE:?}"
  FOLDER_DB="/home/$(whoami)/wow/${TYPE_CORE:?}-db"
  FOLDER_WOW="/home/$(whoami)/wow"
  # database
  DB_CHARACTERS="${TYPE_CORE:?}_characters$DBEXTRA"
  DB_MANGOS="${TYPE_CORE:?}_mangos$DBEXTRA"
  DB_REALMD="${TYPE_CORE:?}_realmd$DBEXTRA"
  DB_LOGS="${TYPE_CORE:?}_logs$DBEXTRA"

  # custom git repos
  if echo "${CUSTOM_SERVER:?}" 2>&1 | grep -q -E "c|C|custom|Custom|1" &>/dev/null; then
    GITHUB_CMANGOS=$(echo "$GITHUB_CMANGOS_CUSTOM")
    GITHUB_DATABASE=$(echo "$GITHUB_DATABASE_CUSTOM")
  fi

  # helper/tool description color
  case "${THEME_DSC:?}" in
  "0") THEME_DSC="${N0:?}" ;;  # White
  "1") THEME_DSC="${R1:?}" ;;  # Red light
  "2") THEME_DSC="${R0:?}" ;;  # Red
  "3") THEME_DSC="${B1:?}" ;;  # Blue
  "4") THEME_DSC="${B0:?}" ;;  # Blue light
  "5") THEME_DSC="${C1:?}" ;;  # Cyan light
  "6") THEME_DSC="${CY:?}" ;;  # Cyan
  "7") THEME_DSC="${P1:?}" ;;  # Purple light
  "8") THEME_DSC="${P0:?}" ;;  # Purple
  "9") THEME_DSC="${Y1:?}" ;;  # Yellow light
  "10") THEME_DSC="${Y0:?}" ;; # Yellow
  "11") THEME_DSC="${G1:?}" ;; # Green light
  "12") THEME_DSC="${G0:?}" ;; # Green
  "13") THEME_DSC="${GR:?}" ;; # Black light (grey)
  esac

  # helper/tool text color
  case "${THEME_TXT:?}" in
  "0") THEME_TXT="${N0:?}" ;;  # White
  "1") THEME_TXT="${R1:?}" ;;  # Red light
  "2") THEME_TXT="${R0:?}" ;;  # Red
  "3") THEME_TXT="${B1:?}" ;;  # Blue
  "4") THEME_TXT="${B0:?}" ;;  # Blue light
  "5") THEME_TXT="${C1:?}" ;;  # Cyan light
  "6") THEME_TXT="${CY:?}" ;;  # Cyan
  "7") THEME_TXT="${P1:?}" ;;  # Purple light
  "8") THEME_TXT="${P0:?}" ;;  # Purple
  "9") THEME_TXT="${Y1:?}" ;;  # Yellow light
  "10") THEME_TXT="${Y0:?}" ;; # Yellow
  "11") THEME_TXT="${G1:?}" ;; # Green light
  "12") THEME_TXT="${G0:?}" ;; # Green
  "13") THEME_TXT="${GR:?}" ;; # Black light (grey)
  esac

  # helper/tool theme color
  case "${THEME_ALL:?}" in
  "0") THEME_ALL="${N0:?}" ;;  # White
  "1") THEME_ALL="${R1:?}" ;;  # Red light
  "2") THEME_ALL="${R0:?}" ;;  # Red
  "3") THEME_ALL="${B1:?}" ;;  # Blue
  "4") THEME_ALL="${B0:?}" ;;  # Blue light
  "5") THEME_ALL="${C1:?}" ;;  # Cyan light
  "6") THEME_ALL="${CY:?}" ;;  # Cyan
  "7") THEME_ALL="${P1:?}" ;;  # Purple light
  "8") THEME_ALL="${P0:?}" ;;  # Purple
  "9") THEME_ALL="${Y1:?}" ;;  # Yellow light
  "10") THEME_ALL="${Y0:?}" ;; # Yellow
  "11") THEME_ALL="${G1:?}" ;; # Green light
  "12") THEME_ALL="${G0:?}" ;; # Green
  "13") THEME_ALL="${GR:?}" ;; # Black light (grey)
  esac

  if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
    # create ms folder
    sudo mkdir /var/log/ms/ &>/dev/null
    # fix ownership
    sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
  fi

  # online players
  MENU_ON_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(online) FROM ${DB_CHARACTERS:?}.characters;" 2>&1)
  # guild count
  MENU_GU_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.guild;" 2>&1)

  # non responsive, sql table doesn't exist
  if echo "$MENU_ON_COUNT" 2>&1 | grep -q -E "ERROR 1146" &>/dev/null; then
    MENU_ON_COUNT="${Y1:?}E${N0:?}"
  fi
  if echo "$MENU_GU_COUNT" 2>&1 | grep -q -E "ERROR 1146" &>/dev/null; then
    MENU_GU_COUNT="${Y1:?}E${N0:?}"
  fi
  # non responsive, sql access denied
  if echo "$MENU_ON_COUNT" 2>&1 | grep -q -E "Access denied" &>/dev/null; then
    MENU_ON_COUNT="${R1:?}D${N0:?}"
  fi
  if echo "$MENU_GU_COUNT" 2>&1 | grep -q -E "Access denied" &>/dev/null; then
    MENU_GU_COUNT="${R1:?}D${N0:?}"
  fi
  # non responsive, null
  if echo "$MENU_ON_COUNT" 2>&1 | grep -q -E "NULL" &>/dev/null; then
    MENU_ON_COUNT="${GR:?}N${N0:?}"
  fi
  if echo "$MENU_GU_COUNT" 2>&1 | grep -q -E "NULL" &>/dev/null; then
    MENU_GU_COUNT="${GR:?}N${N0:?}"
  fi
  # non responsive, zero
  if [ -z "$MENU_ON_COUNT" ] &>/dev/null; then
    MENU_ON_COUNT="${GR:?}0${N0:?}"
  fi
  if [ -z "$MENU_GU_COUNT" ] &>/dev/null; then
    MENU_GU_COUNT="${GR:?}0${N0:?}"
  fi

  # date, month, day, year
  NOW="$(date +"%m.%d.%Y")"

  # load
  LOAD="$(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

  # services
  REALM_SERVICE="realmd"
  WORLD_SERVICE="mangosd"

  # pid of realmd, mangosd
  PIDOF_REALMD=$(pidof $REALM_SERVICE 2>&1 | wc -w 2>&1)
  PIDOFMANGOSD=$(pidof $WORLD_SERVICE 2>&1 | wc -w 2>&1)

  # realmd service
  case "$(echo "$PIDOF_REALMD")" in
  0) MENU_REALMD="${GR:?}Realm${N0:?}" ;;
  1) MENU_REALMD="${G0:?}Realm${N0:?}" ;;
  *) MENU_REALMD="${Y0:?}Realm${N0:?}" ;;
  esac

  # mangosd service
  case "$(echo "$PIDOFMANGOSD")" in
  0) MENU_MANGOSD="${GR:?}MaNGOS${N0:?}" ;;
  1) MENU_MANGOSD="${G0:?}MaNGOS${N0:?}" ;;
  *) MENU_MANGOSD="${Y0:?}MaNGOS${N0:?}" ;;
  esac

  # this is for docker users
  if [ -f /.dockerenv ] &>/dev/null; then
    # docker realmd status
    if screen -list 2>&1 | grep -q "realmd" &>/dev/null; then
      MENU_REALMD="${G0:?}Realm${N0:?}"
      PIDOFMANGOSD="1"
    else
      MENU_REALMD="${GR:?}Realm${N0:?}"
      PIDOFMANGOSD="0"
    fi
    # docker mangosd status
    if screen -list 2>&1 | grep -q "mangosd" &>/dev/null; then
      MENU_MANGOSD="${G0:?}MaNGOS${N0:?}"
      PIDOFMANGOSD="1"
    else
      MENU_MANGOSD="${GR:?}MaNGOS${N0:?}"
      PIDOFMANGOSD="0"
    fi
  fi

  # git head core
  CORE_HEAD="$(grep -Eo "Head:.*" /home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}" 2>&1 | grep -v 'No such file or directory' 2>&1 | awk '{ print $2 }' 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)"
  # git head database
  DATA_HEAD="$(grep -Eo "Head:.*" /home/"$(whoami)"/wow/Installed_db_"${TYPE_CORE:?}" 2>&1 | grep -v 'No such file or directory' 2>&1 | awk '{ print $2 }' 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)"
  # git head helper/tool
  TOOL_HEAD="$(grep -Eo "Head:.*" /home/"$(whoami)"/wow/Installed_ms 2>&1 | grep -v 'No such file or directory' 2>&1 | awk '{ print $2 }' 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)"

  if [ "$(cat /home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}" 2>&1 | wc -l 2>&1)" -eq "0" ] &>/dev/null; then
    CORE_HEAD="${GR:?}000000a${N0:?}"
  fi
  if [ "$(cat /home/"$(whoami)"/wow/Installed_db_"${TYPE_CORE:?}" 2>&1 | wc -l 2>&1)" -eq "0" ] &>/dev/null; then
    DATA_HEAD="${GR:?}000000b${N0:?}"
  fi
  if [ "$(cat /home/"$(whoami)"/wow/Installed_ms 2>&1 | wc -l 2>&1)" -eq "0" ] &>/dev/null; then
    TOOL_HEAD="${GR:?}000000c${N0:?}"
  fi

  if [ -z "$CORE_HEAD" ] &>/dev/null; then
    CORE_HEAD="${G1:?}Updates${N0:?}"
  fi
  if [ -z "$DATA_HEAD" ] &>/dev/null; then
    DATA_HEAD="${G1:?}Updates${N0:?}"
  fi
  if [ -z "$TOOL_HEAD" ] &>/dev/null; then
    TOOL_HEAD="${G1:?}Updates${N0:?}"
  fi

  # extracting maps
  if pidof MoveMapGen &>/dev/null; then
    EXTRACTING_MAPS="${G1:?}Extracting Maps${N0:?}"
    EXTRACTING_MAPS_INFO="${GR:?} Please Wait!${N0:?}"
  elif pidof ad &>/dev/null; then
    EXTRACTING_MAPS="${G1:?}Extracting Maps${N0:?}"
    EXTRACTING_MAPS_INFO="${GR:?} Please Wait!${N0:?}"
  elif pidof vmap_extractor &>/dev/null; then
    EXTRACTING_MAPS="${G1:?}Extracting Maps${N0:?}"
    EXTRACTING_MAPS_INFO="${GR:?} Please Wait!${N0:?}"
  elif pidof ExtractResources &>/dev/null; then
    EXTRACTING_MAPS="${G1:?}Extracting Maps${N0:?}"
    EXTRACTING_MAPS_INFO="${GR:?} Please Wait!${N0:?}"
  else # non responsive
    EXTRACTING_MAPS=""
    EXTRACTING_MAPS_INFO=""
  fi

  # menu
  clear
  printf '%b' "
     C(ontinued)-MaNGOS ${GR:?}Tool$N0
  ${GR:?} - - - - - - - - - - - - - -${N0:?}
     Core ${G0:?}$CORE_HEAD$N0  $THEME_ALL$SERVER_BUILD$N0
     Data ${G0:?}$DATA_HEAD$N0  Online $MENU_ON_COUNT
     Tool ${G0:?}$TOOL_HEAD$N0  Guilds $MENU_GU_COUNT
         $EXTRACTING_MAPS
         $LOAD$N0
         $MENU_MANGOSD$GR | $N0$MENU_REALMD
         $EXTRACTING_MAPS_INFO
   A $GR: ${THEME_TXT:?}Admin      ${N0:?}t $GR: ${THEME_TXT:?}Heroes${N0:?}
   a $GR: ${THEME_TXT:?}Account    ${N0:?}g $GR: ${THEME_TXT:?}Guilds${N0:?}
   c $GR: ${THEME_TXT:?}Updates    ${N0:?}u $GR: ${THEME_TXT:?}Users${N0:?}
   m $GR: ${THEME_TXT:?}CMaNGOS    ${N0:?}e $GR: ${THEME_TXT:?}Config${N0:?}
   d $GR: ${THEME_TXT:?}Database   ${N0:?}p $GR: ${THEME_TXT:?}Patch${N0:?}
   w $GR: ${THEME_TXT:?}Helper     ${N0:?}o $GR: ${THEME_TXT:?}Ping${N0:?}
   s $GR: ${THEME_TXT:?}Shutdown   ${N0:?}l $GR: ${THEME_TXT:?}Logs${N0:?}
   r $GR: ${THEME_TXT:?}Restart    ${N0:?}q $GR: ${THEME_TXT:?}Quit${N0:?}

"

  # menu done

  read -r -n1 -s
  case "$REPLY" in

  # debug mangos_script

  "D")

    # fix ownership
    sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" /usr/local/bin/mangos &>/dev/null
    printf '%b' "   ${GR:?}y${N0:?} $GR:$N0 Redo ${GR:?}cmangos-script${N0:?}\n"
    printf '%b' "   ${GR:?}n${N0:?} $GR:$N0 nano ${GR:?}cmangos-script${N0:?}\n"
    echo
    printf '%b' "   [${P0:?}Y${R1:?}N${N0:?}] Debug helper? ${GR:?}mangos${N0:?} y/n \n"
    read -r -p "" -n 1 -r -s
    if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
      printf '%b' "   [$P0!!$N0] Redo helper? ${GR:?}empty${N0:?} y/n \n"
      read -r -p "" -n 1 -r -s
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo rm /usr/local/bin/mangos 2>&1
        sudo touch /usr/local/bin/mangos 2>&1
        sudo chmod +x /usr/local/bin/mangos 2>&1
        sudo nano /usr/local/bin/mangos 2>&1
      fi
    else
      sudo nano /usr/local/bin/mangos 2>&1
    fi
    clear
    printf '%b' "[$R1!!$N0] ANY CHANGES ? Restart Helper Please !"
    sleep 1

    ;;

    # debug mangos_script done

  "a")

    # account count
    AC_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account;" 2>&1)
    # banned count
    BN_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account_banned;" 2>&1)

    # menu

    HEIGHT=11
    WIDTH=28
    CHOICE_HEIGHT=4
    BACKTITLE="Accounts"
    TITLE="Create/Delete/Ban/Kick"
    MENU="Choose one option:"

    OPTIONS=(1 "Create account"
      2 "Delete account"
      3 "Hall of Shame"
      4 "Fingerprint (SFU)")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # create account

    "1")

      CA_TITLE="Account Creation"

      display_result() {
        dialog --title "$CA_TITLE - $(date | xargs)" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      RESULT="$(echo "    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |
   |_____|_|_|_|__,|_|___|_____|_____|_____|
   C(ontinued)-MaNGOS - Helper/Tool
   2019-2024

   0 : Classic
   1 : The Burning Crusade
   2 : Wrath of the Lich King

   0 : Player
   1 : Moderator
   2 : Game Master
   3 : Administrator

   Minimum 5 characters account name.

   Create new account (username)
   Set the (expansion) version.
   Set the (account) privilege.

   Example: 'username' '0' '0'")"
      display_result 2>/dev/null

      # username, password, expansion, gmlevel

      # set username
      CMANGOS_USR=$(
        dialog --title "$CA_TITLE" \
          --nocancel \
          --inputbox "Enter username:" 8 40 \
          3>&1 1>&2 2>&3 3>&-
      )
      # set password
      CMANGOS_PWD=$(
        dialog --title "$CA_TITLE" \
          --nocancel \
          --inputbox "Enter password:" 8 40 \
          3>&1 1>&2 2>&3 3>&-
      )
      # set expansion
      CMANGOS_XPV=$(
        dialog --title "$CA_TITLE" \
          --nocancel \
          --inputbox "Enter expansion (0-2):" 8 40 \
          3>&1 1>&2 2>&3 3>&-
      )
      # set gmlevel
      CMANGOS_LVL=$(
        dialog --title "$CA_TITLE" \
          --nocancel \
          --inputbox "Enter gmlevel (0-3):" 8 40 \
          3>&1 1>&2 2>&3 3>&-
      )

      # empty data
      if [[ -z "$CMANGOS_USR" ]] &>/dev/null; then
        CMANGOS_EMPTY="1"
      elif [[ -z "$CMANGOS_PWD" ]] &>/dev/null; then
        CMANGOS_EMPTY="1"
      elif [[ -z "$CMANGOS_XPV" ]] &>/dev/null; then
        CMANGOS_EMPTY="1"
      elif [[ -z "$CMANGOS_LVL" ]] &>/dev/null; then
        CMANGOS_EMPTY="1"
      fi

      # empty data, skip
      if [[ "$CMANGOS_EMPTY" -eq "0" ]] &>/dev/null; then

        # create account txt (no spaces!)
        echo "${USER_NC:?}
${PASS_NC:?}
.account create $CMANGOS_USR $CMANGOS_PWD
.account set addon $CMANGOS_USR $CMANGOS_XPV
.account set gmlevel $CMANGOS_USR $CMANGOS_LVL" >"${FOLDER_WOW:?}"/tmp.txt
        # create receipt
        echo "$(date | xargs)
- - - - - - - - - - - - - - -
$(cat "${FOLDER_WOW:?}"/tmp.txt)
-----------------------------" >>"${FOLDER_WOW:?}"/ac.list 2>/dev/null

        ########################################################################

        # remote admin (netcat w timeout)
        timeout 4 nc -q 1 "${HOST_NC:?}" "${PORT_NC:?}" <"${FOLDER_WOW:?}"/tmp.txt &>/dev/null

        ########################################################################

        # remove old file
        rm "${FOLDER_WOW:?}"/tmp.txt &>/dev/null

        display_result() {
          dialog --title "$CA_TITLE" \
            --no-collapse \
            --msgbox "$RESULT" 0 0
        }
        RESULT="$(echo "[OK] Account '$CMANGOS_USR' ($CMANGOS_XPV/$CMANGOS_LVL) created.")"
        display_result 2>/dev/null
      else
        display_result() {
          dialog --title "$CA_TITLE" \
            --no-collapse \
            --msgbox "$RESULT" 0 0
        }
        RESULT="$(echo "[!!] Empty data! Please try again.")"
        display_result 2>/dev/null
      fi

      ;;

      # username, password, expansion, gmlevel done

      # delete account

    "2")

      # check for backup
      # realmd backup
      FILE="${FOLDER_WOW:?}/backup/${DB_REALMD:?}-${NOW:?}.sql"
      if [ ! -f "$FILE" ] &>/dev/null; then
        REALMD_BACKUP="[${R1:?}NO${N0:?}]"
        echo
      else
        REALMD_BACKUP="[${G1:?}OK${N0:?}]"
        echo
      fi
      # characters backup
      FILE="${FOLDER_WOW:?}/backup/$DB_CHARACTERS-${NOW:?}.sql"
      if [ ! -f "$FILE" ] &>/dev/null; then
        CHARAC_BACKUP="[${R1:?}NO${N0:?}]"
        echo
      else
        CHARAC_BACKUP="[${G1:?}OK${N0:?}]"
        echo
      fi

      # menu
      clear
      echo
      printf '%b' "${R0:?}
   @@@@@@@  @@@@@@@@ @@@      @@@@@@@@ @@@@@@@ @@@@@@@@
   @@!  @@@ @@!      @@!      @@.        @@!   @@!
   @!@  !@! @!!!.:   @!!      @!!.:!     @!!   @!!!:.
   .!.  .!! !.:      !!.      .!:        !.:   !!.
   .: :  .  : .:  .. : .: : . . :. :.:    .    : .: .:.${N0:?}

   Note: Make sure you have backup laying around!
   $REALMD_BACKUP$CHARAC_BACKUP

   Delete by id ->
   ${CY:?}Examples${N0:?}: 'id' - 'id1,id2' - 'id1 AND id5'
   Delete by username ->
   ${CY:?}Examples${N0:?}: 'username' - 'username1,username2'
   Select (${G0:?}username${N0:?}) or (${G0:?}id${N0:?}) - Press Enter To Confirm"
      echo
      echo
      read -r -p " Show list" </dev/tty
      echo
      mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT username, gmlevel, id FROM ${DB_REALMD:?}.account;"
      echo
      printf '%b' " Delete directly from '${CY:?}${DB_REALMD:?}.account${N0:?}'"
      echo
      printf '%b' "
  >"
      read -r ID
      echo
      if [[ -z "$ID" ]] &>/dev/null; then
        printf '%s\n' "empty"
      else
        DELETED=$(printf '%b' "${R1:?}DELETE${N0:?} '${ID:?}' ${R1:?}?!${N0:?}")
        echo
        read -r -p "$DELETED
[YN] Are You Sure? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # delete by id -> examples: ('id') (id1,id2,) & (id1 AND id5)
          mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="DELETE FROM ${DB_REALMD:?}.account WHERE id = ${ID:?};" &>/dev/null
          mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="DELETE FROM ${DB_REALMD:?}.account WHERE id IN (${ID:?});" &>/dev/null
          mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="DELETE FROM ${DB_REALMD:?}.account WHERE id BETWEEN ${ID:?};" &>/dev/null
          # delete by username -> examples: ('username') & (username1,username2,)
          mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="DELETE FROM ${DB_REALMD:?}.account WHERE username='${ID:?}';" &>/dev/null
          mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="DELETE FROM ${DB_REALMD:?}.account WHERE username IN (${ID:?});" &>/dev/null
          sleep 1
          echo
          echo " kek!"
          printf '%b' "${Y1:?}(∩ ᐛ )⊃${N0:?}━━ "
          sleep 1
          printf '%b' "^${Y0:?}｡·.·${N0:?}ﾟ${Y0:?}★☆ﾟ.｡*${N0:?}(つ﹏⊂)${Y0:?}?･ ｡★·"
          sleep 2
          printf '%b' ".${N0:?}..PoOf${Y1:?}!$N0\n"
          sleep 1
          echo
          printf '%b' "${ID:?} ${N0:?}..Vanished!\n"
          sleep 1
          echo
        fi
      fi
      echo

      ;;

      # delete account done

      # hall of shame

    "3")

      # banned accounts
      display_result() {
        dialog --title "Banned Accounts" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      BANNED_ACCOUNTS="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT id, account_id, banned_at, expires_at, banned_by, reason, active FROM ${DB_REALMD:?}.account_banned;")"
      RESULT="$(echo "$BANNED_ACCOUNTS" | column -t)"
      display_result 2>/dev/null

      # banned ip address
      display_result() {
        dialog --title "Banned IP Address" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      BANNED_IP_ADDRESS="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT ip, banned_at, expires_at, banned_by, reason FROM ${DB_REALMD:?}.ip_banned;")"
      RESULT="$(echo "$BANNED_IP_ADDRESS" | column -t)"
      display_result 2>/dev/null

      # dishonorable kills
      display_result() {
        dialog --title "Dishonorable Kills" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      DISHONORABLE_KILLS="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name, stored_dishonorable_kills FROM ${DB_CHARACTERS:?}.characters WHERE stored_dishonorable_kills>=1 ORDER BY name;")"
      RESULT="$(echo "$DISHONORABLE_KILLS" | column -t)"
      display_result 2>/dev/null

      # intoxicated (drunks)
      display_result() {
        dialog --title "Intoxicated (drunks)" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      INTOXICATED_DRUNKS="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name, drunk FROM ${DB_CHARACTERS:?}.characters WHERE drunk>=1 ORDER BY name;")"
      RESULT="$(echo "$INTOXICATED_DRUNKS" | column -t)"
      display_result 2>/dev/null

      ;;

      # hall of shame done

    "4")

      # system fingerprint usage (sfu)
      display_result() {
        dialog --title "System Fingerprint Usage (SFU)" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      SYSTEM_FINGERPRINT_USAGE="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT fingerprint, ip, account, realm, time, architecture, cputype, activecpus, totalcpus, pagesize FROM ${DB_REALMD:?}.system_fingerprint_usage;")"
      RESULT="$(echo "$SYSTEM_FINGERPRINT_USAGE" | column -t)"
      display_result 2>/dev/null

      ;;

    esac

    ;;

    # menu done

    # Login (command)

    # * f★★ck; b7122@rd >> @ct1vlz1★n && chln@.

  "A")

    # look for run folder
    if [ -z "$(ls -A "${FOLDER_CORE:?}"/run 2>&1)" ] &>/dev/null; then
      # create run folder if not found
      sudo mkdir "${FOLDER_CORE:?}"/run &>/dev/null
      if [ -z "$(ls -A "${FOLDER_CORE:?}"/run/logs 2>&1)" ] &>/dev/null; then
        # create run/logs folder if not found
        sudo mkdir "${FOLDER_CORE:?}"/run/logs &>/dev/null
        # fix ownership
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_CORE:?}" &>/dev/null
      fi
    fi

    # non responsive
    if [ ! -f "${FOLDER_CORE:?}"/run/logs/Server.log ] &>/dev/null; then
      touch "${FOLDER_CORE:?}"/run/logs/Server.log
    fi
    if [ ! -f "${FOLDER_CORE:?}"/run/logs/Realmd.log ] &>/dev/null; then
      touch "${FOLDER_CORE:?}"/run/logs/Realmd.log
    fi

    # non responsive
    if [[ -z $(grep '[^[:space:]]' "${FOLDER_CORE:?}"/run/logs/Server.log) ]] &>/dev/null; then
      CM_SERVER_LOG_STAT="${GR:?}✗${N0:?}"
    else
      CM_SERVER_LOG_STAT="${G1:?}✓${N0:?}"
    fi
    if [[ -z $(grep '[^[:space:]]' "${FOLDER_CORE:?}"/run/logs/Realmd.log) ]] &>/dev/null; then
      CM_REALMD_LOG_STAT="${GR:?}✗${N0:?}"
    else
      CM_REALMD_LOG_STAT="${G1:?}✓${N0:?}"
    fi

    while :; do
      clear

      # realmd service
      case "$(echo "$PIDOF_REALMD")" in
      0) COMMAND_REALMD="${GR:?}NO${N0:?}" ;;
      1) COMMAND_REALMD="${G1:?}OK${N0:?}" ;;
      *) COMMAND_REALMD="${Y1:?}OK${N0:?}" ;;
      esac

      # mangosd service
      case "$(echo "$PIDOFMANGOSD")" in
      0) COMMAND_MANGOSD="${GR:?}NO${N0:?}" ;;
      1) COMMAND_MANGOSD="${G1:?}OK${N0:?}" ;;
      *) COMMAND_MANGOSD="${Y1:?}OK${N0:?}" ;;
      esac

      # log data

      # Realmd.log

      # look for error
      if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "error"
        CM_REALMD_LOG="${R1:?}E${N0:?}"
      else
        # if nothing, print "ok"
        CM_REALMD_LOG="${G1:?}✓${N0:?}"
      fi
      # look for empty tables
      if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "empty"
        CM_REALMD_LOG_EMPTY="${Y1:?}E${N0:?}"
      else
        CM_REALMD_LOG_EMPTY="${G1:?}✓${N0:?}"
      fi
      # Realmd.log done

      # Server.log

      # look for error
      if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "error"
        CM_SERVER_LOG="${R1:?}E${N0:?}"
      else
        # if nothing, print "ok"
        CM_SERVER_LOG="${G1:?}✓${N0:?}"
      fi
      # look for empty tables
      if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "empty"
        CM_SERVER_LOG_EMPTY="${Y1:?}E${N0:?}"
      else
        CM_SERVER_LOG_EMPTY="${G1:?}✓${N0:?}"
      fi
      # look for serious error
      if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "serious"
        CM_SERVER_LOG_SERIOUS="${R1:?}S${N0:?}"
      else
        CM_SERVER_LOG_SERIOUS=" "
      fi

      # Server.log done

      # check for backup

      # realmd backup
      FILE="${FOLDER_WOW:?}/backup/${DB_REALMD:?}-${NOW:?}.sql"
      if [ ! -f "$FILE" ] &>/dev/null; then
        REALMD_BACKUP="${GR:?}NO${N0:?}"
      else
        REALMD_BACKUP="${G1:?}OK${N0:?}"
      fi
      # characters backup
      FILE="${FOLDER_WOW:?}/backup/$DB_CHARACTERS-${NOW:?}.sql"
      if [ ! -f "$FILE" ] &>/dev/null; then
        CHARAC_BACKUP="${GR:?}NO${N0:?}"
      else
        CHARAC_BACKUP="${G1:?}OK${N0:?}"
      fi

      # world server latest build
      if grep -q -o -a "\sBuilt\son\s*.*" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "built date"
        LATEST_WORLD_BUILT=$(grep -o -a "\sBuilt\son\s*.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | sed 's/^ *//' 2>&1 | xargs 2>&1)
      # if nothing, print "Restart server please.."
      else
        LATEST_WORLD_BUILT="${GR:?}Built on Nov 23 2004 at 10:00:01${N0:?}"
      fi
      # built for
      if grep -q -o -a "\sBuilt\sfor\s*.*" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "built for"
        BUILT_FOR=$(grep -o -a "\sBuilt\sfor\s*.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | sed 's/^ *//' 2>&1)
      # if nothing, print "Restart server please.."
      else
        BUILT_FOR="${GR:?}Built for Linux_x00 (next-to-nothing)${N0:?}"
      fi
      # EventAI
      if grep -q -o -a "Using creature EventAI:.*" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "EventAI"
        EVENTAI=$(grep -Eo "Using creature EventAI:.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | sed 's/^ *//' 2>&1)
      # if nothing, print "Restart server please.."
      else
        EVENTAI="${GR:?}ACID 0.00.x (Expansion) for CMaNGOS-Expansion (0.01.X Client)${N0:?}"
      fi
      # World DB
      if grep -q -o -a "Using World DB:.*" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "World DB"
        WORLD_DB=$(grep -Eo "Using World DB:.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
      # if nothing, print "Restart server please.."
      else
        WORLD_DB="${GR:?}Expansion DB version 0.01 'Into the Abyss of nothing.' For Expansion core z0000.${N0:?}"
      fi
      # cpu temp
      if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
        MENU_CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
        MENU_PRINT_CPU_TEMP=$(printf '%b' "CPU Temp${G0:?}........:${N0:?} ${MENU_CPU_TEMP:?}c")
      else
        MENU_PRINT_CPU_TEMP=$(lscpu 2>&1 | grep 'Model name' 2>&1 |
          cut -f 2 -d ":" 2>&1 | awk '{$1=$1}1' 2>&1 |
          grep -Eo "@.*" 2>&1 | tr -d '@' 2>&1 | tr -d ' ' 2>&1)
        MENU_PRINT_CPU_TEMP="CPU Freq${G0:?}........:${N0:?} $MENU_PRINT_CPU_TEMP"
      fi

      # core commit
      CORE_COMMIT_HASH="$(cd "$FOLDER_CORE" || exit && git rev-parse HEAD)"
      if [[ -z "$CORE_COMMIT_HASH" ]] &>/dev/null; then
        CORE_COMMIT_HASH="0000000000000000000000000000000000000000"
      fi

      # database commit
      DB_COMMIT_HASH="$(cd "$FOLDER_DB" || exit && git rev-parse HEAD)"
      if [[ -z "$DB_COMMIT_HASH" ]] &>/dev/null; then
        DB_COMMIT_HASH="0000000000000000000000000000000000000000"
      fi

      # free Space, mmc block device #0, partition #2, partition #2, dev/root, overlay
      MENU_USED_HDD=$(df -h 2>&1 | grep -E "mmcblk0p2|mmcblk0p3|/dev/root|overlay|sda1" 2>&1 | awk '{ print $3 }' 2>&1 | head -1 2>&1)
      MENU_USED_HDD_P=$(df -h | grep -E "mmcblk0p2|mmcblk0p3|/dev/root|overlay|sda1" 2>&1 | awk '{ print $5 }' 2>&1 | head -1 2>&1)

      # free Memory
      MENU_FREE_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $4 }' 2>&1)
      # total Memory
      MENU_TOTAL_MEM=$(free --mega 2>&1 | grep "Mem" 2>&1 | awk '{ print $2 }' 2>&1)

      if ! mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="USE ${DB_REALMD:?};" &>/dev/null; then
        # non responsive
        UPTIME_TIMER="0h:0m:0s"
        TOTAL_UPTIME_DAYS="0"
      else
        # total uptime (seconds)
        TOTAL_UPTIME=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(uptime) FROM ${DB_REALMD:?}.uptime;" 2>&1)
        # calculate seconds
        UPTIME_TIMER=$(printf '%dh:%dm:%ds\n' $(("$TOTAL_UPTIME/3600")) $(("$TOTAL_UPTIME%3600/60")) $(("$TOTAL_UPTIME%60")))
        # calculate days
        TOTAL_UPTIME_DAYS=$(echo "$TOTAL_UPTIME/3600/24" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
        # calculate years
        TOTAL_UPTIME_YEARS=$(echo "$TOTAL_UPTIME_DAYS/365" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
        if [ -z "$TOTAL_UPTIME_DAYS" ] &>/dev/null; then
          # non responsive
          TOTAL_UPTIME_DAYS="1"
        fi
        if [ -z "$TOTAL_UPTIME_YEARS" ] &>/dev/null; then
          # non responsive
          TOTAL_UPTIME_YEARS="1"
        fi
      fi

      printf '%b' "
   Realm${G0:?}.......:${G1:?} ${SERVER_NAME:?} ${GR:?}$UPTIME_TIMER (${TOTAL_UPTIME_DAYS:?} Days) ($TOTAL_UPTIME_YEARS Years)${N0:?}
   World${G0:?}.......:${N0:?} $LATEST_WORLD_BUILT
   System${G0:?}......:${N0:?} $BUILT_FOR
   Core Hash${G0:?}...:${GR:?} $CORE_COMMIT_HASH${N0:?}
   Data Hash${G0:?}...:${GR:?} $DB_COMMIT_HASH${N0:?}

   r $GR: ${THEME_TXT:?}Login${N0:?}   - ${THEME_DSC:?}Remote access  ${N0:?}mangosd.service${G0:?}.:${N0:?} $COMMAND_MANGOSD
   l $GR: ${THEME_TXT:?}Logs${N0:?}    - ${THEME_DSC:?}Analyze logs   ${N0:?}realmd.service${G0:?}..:${N0:?} $COMMAND_REALMD
   b $GR: ${THEME_TXT:?}Backup${N0:?}  - ${THEME_DSC:?}New backup     ${N0:?}characters.sql${G0:?}..:${N0:?} $CHARAC_BACKUP
   h $GR: ${THEME_TXT:?}Reset${N0:?}   - ${THEME_DSC:?}Reset --hard   ${N0:?}realmd.sql${G0:?}......:${N0:?} $REALMD_BACKUP
   p $GR: ${THEME_TXT:?}htop${N0:?}    - ${THEME_DSC:?}Process view   ${N0:?}Realmd.log${G0:?}......:${N0:?} $CM_REALMD_LOG_STAT $CM_REALMD_LOG_EMPTY $CM_REALMD_LOG
   m $GR: ${THEME_TXT:?}Maps${N0:?}    - ${THEME_DSC:?}Download maps  ${N0:?}Server.log${G0:?}......:${N0:?} $CM_SERVER_LOG_STAT $CM_SERVER_LOG_EMPTY $CM_SERVER_LOG $CM_SERVER_LOG_SERIOUS
   w $GR: ${THEME_TXT:?}Stats${N0:?}   - ${THEME_DSC:?}World stats    ${N0:?}$MENU_PRINT_CPU_TEMP
   i $GR: ${THEME_TXT:?}Info${N0:?}    - ${THEME_DSC:?}Helper info    ${N0:?}HDDuse${G0:?}..........:${N0:?} $MENU_USED_HDD ${GR:?}$MENU_USED_HDD_P${N0:?}
   d $GR: ${THEME_TXT:?}Data${N0:?}    - ${THEME_DSC:?}Data usage     ${N0:?}Memory${G0:?}..........:${N0:?} ${G1:?}${MENU_FREE_MEM:?}M${GR:?}/${G0:?}${MENU_TOTAL_MEM:?}M${N0:?}
   q $GR: ${THEME_TXT:?}Quit${N0:?}    - ${THEME_DSC:?}Back to menu   ${N0:?}
\n"
      read -r -s -n1
      case "$REPLY" in

      # Information

      "i")

        # random logo color
        RLC=$(echo "$RANDOM" 2>&1 | grep -Eo "[1-2]" 2>&1 | head -1 2>&1)

        # back in the day
        if [[ "$RLC" -eq "1" ]] &>/dev/null; then
          RC0="${N0:?}"
          RC1="${CY:?}"
          # new era emerge
        else
          RC0="${R1:?}"
          RC1="${R1:?}"
        fi

        clear
        printf '%b' "${N0:?}
     _____     __  __       _   _  _____  ____   _____
    / ____|   |  \/  |     | \ | |/ ____|/ __ \ / ____|
   | |        | \  / |     |  \| | |  __  |  | | (___
   | |ontinued| |\/| | __ _| .   | | |_ | |  | |\___ \\
   | |____    | |  | |/ _  | |\  | |__| | |__| |____) |
    \_____|   |_|  |_| (_| |_| \_|\_____|\____/ \____/
    http://cmangos.net\__,_|     Doing things right!

   ${G0:?}C(ontinued)-MaNGOS - https://github.com/cmangos${N0:?}

   ${GR:?}$EVENTAI${N0:?}
   ${GR:?}$WORLD_DB${N0:?}

   https://github.com/cmangos/mangos-classic
   https://github.com/cmangos/classic-db
   https://github.com/cmangos/mangos-tbc
   https://github.com/cmangos/tbc-db
   https://github.com/cmangos/mangos-wotlk
   https://github.com/cmangos/wotlk-db${RC0:?}

   _____ _____     _____ _____ _____ _____
  |     |     |___|   | |   __|     |   __|${RC0:?}
  |   --| | | | .'| | | |  |  |  |  |__   |${RC1:?}
  |_____|_|_|_|__,|_|___|_____|_____|_____|${N0:?}
   C(ontinued)-MaNGOS - ${GR:?}Helper/Tool
   2019-2024${N0:?}

   ${GR:?}https://github.com/Daedalus-code/cmangos-script${N0:?}

   This script was built on a Ubuntu System - (Raspberry Pi4)
   https://ubuntu.com/download/raspberry-pi

   Functions and features for admins running a WoW server.

   Planned Features: Time will tell.

   ---What

   * Install this script on a Ubuntu System, make everything more easy.
   * Connect to a MySQL server outside or LOCALHOST
   * Download latest Core/Database updates
   * Upgrade Database with latest fixes
   * Compile CMaNGOS with latest fixes
   * Download/Import Maps: ${G0:?}Classic, TBC, WoTLK.${N0:?}
   * Setup RA for account tools
   * Profit

${G0:?}>${N0:?} hit Enter to go back.
"
        echo
        read -r -p "" </dev/tty

        ;;

        # Information done

        # seedbox menu

      "m")

        # check if expansion_maps.zip exist
        if [ -f /seedbox/classic_maps.zip ] &>/dev/null; then
          V_MAPS="${G1:?}Classic${N0:?}"
        else
          rm /var/log/ms/classic_maps.zip.tmp &>/dev/null
          V_MAPS="Classic"
        fi
        if [ -f /seedbox/tbc_maps.zip ] &>/dev/null; then
          T_MAPS="${G1:?}TBC${N0:?}"
        else
          rm /var/log/ms/tbc_maps.zip.tmp &>/dev/null
          T_MAPS="TBC"
        fi
        if [ -f /seedbox/wotlk_maps.zip ] &>/dev/null; then
          W_MAPS="${G1:?}WoTLK${N0:?}"
        else
          rm /var/log/ms/wotlk_maps.zip.tmp &>/dev/null
          W_MAPS="WoTLK"
        fi

        printf '%b' "${GR:?}Please wait${N0:?}\n"
        # remote information from transmission, create a file
        transmission-remote -t all -i >/var/log/ms/transmission_list 2>&1
        # cat that file, update everytime
        P2P_INFO=$(cat /var/log/ms/transmission_list 2>&1)
        transmission-remote -l >/var/log/ms/transmission_torrent_list 2>&1
        # cat that file
        P2P_LIST=$(cat /var/log/ms/transmission_torrent_list 2>&1)
        # pidof transmission-daemon, cli, pid/status
        PIDOFP2P_CLI=$(pidof transmission-cli 2>&1)
        PIDOFP2P_DAE=$(pidof transmission-daemon 2>&1)
        # clean up stopped torrents
        P2P_STOPPED_ID=$(echo "$P2P_LIST" 2>&1 | grep "Stopped" 2>&1 | awk '{ print $1 }' 2>&1 | grep -Eo "[1-3]" 2>&1)
        P2P_STOPPED=$(echo "$P2P_STOPPED_ID" 2>&1 | wc -w 2>&1)
        if [[ "$P2P_STOPPED" -eq "1" ]] &>/dev/null; then
          echo "Removing torrent ($P2P_STOPPED_ID) from list, State: Stopped!"
          transmission-remote -t "$P2P_STOPPED_ID" --remove-and-delete 2>&1
          echo
          read -r -p "Press Enter to continue" </dev/tty
          echo
          break
        fi

        # downloading, expansion_maps.zip
        if [ -f /var/log/ms/classic_maps.zip.tmp ] &>/dev/null; then
          P2P_AV="${Y1:?}"
        else
          P2P_AV="${GR:?}"
        fi
        if [ -f /var/log/ms/tbc_maps.zip.tmp ] &>/dev/null; then
          P2P_AT="${Y1:?}"
        else
          P2P_AT="${GR:?}"
        fi
        if [ -f /var/log/ms/wotlk_maps.zip.tmp ] &>/dev/null; then
          P2P_AW="${Y1:?}"
        else
          P2P_AW="${GR:?}"
        fi

        # is transmission-cli installed?
        if ! [ -x "$(command -v transmission-cli)" ] &>/dev/null; then
          SEED_TRANSMISSION="${GR:?}None${N0:?}"
          INTRANET_SEED="${GR:?}0.0.0.0:9091${N0:?}"
          P2P_FILE_NAME="$P2P_AV$V_MAPS $P2P_AT$T_MAPS $P2P_AW$W_MAPS${N0:?}"
          P2P_PEERS_CONNECTED_ID1="${GR:?}0${N0:?}"
          P2P_PEERS_SEEDINGTO_ID1="${GR:?}0${N0:?}"
          P2P_PEERS_DOWN_LOAD_ID1="${GR:?}0${N0:?}"
        else
          if [ -f /var/log/ms/transmission_list ] &>/dev/null; then
            # stats from each core
            P2P_ID1=$(echo "$P2P_INFO" 2>&1 | grep -A 36 "classic" 2>&1)
            P2P_ID2=$(echo "$P2P_INFO" 2>&1 | grep -A 36 "tbc" 2>&1)
            P2P_ID3=$(echo "$P2P_INFO" 2>&1 | grep -A 36 "wotlk" 2>&1)
            # peers, connected, seeding to, downloading from, classic_maps
            P2P_PEERS_CONNECTED_ID1=$(echo "$P2P_ID1" 2>&1 | grep "Peers" 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_SEEDINGTO_ID1=$(echo "$P2P_ID1" 2>&1 | grep "Peers" 2>&1 | awk '{ print $7 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_DOWN_LOAD_ID1=$(echo "$P2P_ID1" 2>&1 | grep "Peers" 2>&1 | awk '{ print $10 }' 2>&1)
            # peers, connected, seeding to, downloading from, tbc_maps
            P2P_PEERS_CONNECTED_ID2=$(echo "$P2P_ID2" 2>&1 | grep "Peers" 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_SEEDINGTO_ID2=$(echo "$P2P_ID2" 2>&1 | grep "Peers" 2>&1 | awk '{ print $7 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_DOWN_LOAD_ID2=$(echo "$P2P_ID2" 2>&1 | grep "Peers" 2>&1 | awk '{ print $10 }' 2>&1)
            # peers, connected, seeding to, downloading from, wotlk_maps
            P2P_PEERS_CONNECTED_ID3=$(echo "$P2P_ID3" 2>&1 | grep "Peers" 2>&1 | awk '{ print $4 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_SEEDINGTO_ID3=$(echo "$P2P_ID3" 2>&1 | grep "Peers" 2>&1 | awk '{ print $7 }' 2>&1 | awk -F, '{ print $1 }' 2>&1)
            P2P_PEERS_DOWN_LOAD_ID3=$(echo "$P2P_ID3" 2>&1 | grep "Peers" 2>&1 | awk '{ print $10 }' 2>&1)
          fi

          # non responsive
          if [ -z "$P2P_PEERS_CONNECTED_ID1" ] &>/dev/null; then
            P2P_PEERS_CONNECTED_ID1="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_SEEDINGTO_ID1" ] &>/dev/null; then
            P2P_PEERS_SEEDINGTO_ID1="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_DOWN_LOAD_ID1" ] &>/dev/null; then
            P2P_PEERS_DOWN_LOAD_ID1="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_CONNECTED_ID2" ] &>/dev/null; then
            P2P_PEERS_CONNECTED_ID2="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_SEEDINGTO_ID2" ] &>/dev/null; then
            P2P_PEERS_SEEDINGTO_ID2="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_DOWN_LOAD_ID2" ] &>/dev/null; then
            P2P_PEERS_DOWN_LOAD_ID2="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_CONNECTED_ID3" ] &>/dev/null; then
            P2P_PEERS_CONNECTED_ID3="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_SEEDINGTO_ID3" ] &>/dev/null; then
            P2P_PEERS_SEEDINGTO_ID3="${GR:?}0$N0"
          fi
          if [ -z "$P2P_PEERS_DOWN_LOAD_ID3" ] &>/dev/null; then
            P2P_PEERS_DOWN_LOAD_ID3="${GR:?}0$N0"
          fi

          # transmission-daemon status
          case "$(pidof transmission-daemon 2>&1 | wc -w 2>&1)" in
          "0")

            # offline
            SEED_TRANSMISSION="${GR:?}Off${N0:?}"
            INTRANET_SEED="${GR:?}0.0.0.0:9091${N0:?}"
            P2P_FILE_NAME="$P2P_AV$V_MAPS $P2P_AT$T_MAPS $P2P_AW$W_MAPS${N0:?}"
            P2P_PEERS_CONNECTED_ID1="${GR:?}0${N0:?}"
            P2P_PEERS_CONNECTED_ID2="${GR:?}0${N0:?}"
            P2P_PEERS_CONNECTED_ID3="${GR:?}0${N0:?}"
            P2P_PEERS_SEEDINGTO_ID1="${GR:?}0${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID1="${GR:?}0${N0:?}"
            P2P_PEERS_SEEDINGTO_ID2="${GR:?}0${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID2="${GR:?}0${N0:?}"
            P2P_PEERS_SEEDINGTO_ID3="${GR:?}0${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID3="${GR:?}0${N0:?}"

            ;;

          "1")

            # online
            SEED_TRANSMISSION="${G1:?}OK${N0:?}"
            INTRANET_SEED="${N0:?}${INTRANET:?}:9091${N0:?}"
            P2P_FILE_NAME="$P2P_AV$V_MAPS $P2P_AT$T_MAPS $P2P_AW$W_MAPS${N0:?}"

            ;;

          "*")

            # overtime
            SEED_TRANSMISSION="${Y1:?}++${N0:?}"
            INTRANET_SEED="${Y1:?}+.+.+.+:9091${N0:?}"
            P2P_PEERS_CONNECTED_ID1="${GR:?}+${N0:?}"
            P2P_PEERS_SEEDINGTO_ID1="${GR:?}+${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID1="${GR:?}+${N0:?}"
            P2P_PEERS_CONNECTED_ID2="${GR:?}+${N0:?}"
            P2P_PEERS_SEEDINGTO_ID2="${GR:?}+${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID2="${GR:?}+${N0:?}"
            P2P_PEERS_CONNECTED_ID3="${GR:?}+${N0:?}"
            P2P_PEERS_SEEDINGTO_ID3="${GR:?}+${N0:?}"
            P2P_PEERS_DOWN_LOAD_ID3="${GR:?}+${N0:?}"

            ;;

          esac
        fi

        # non responsive
        if [ -z "$INTRANET_SEED" ] &>/dev/null; then
          INTRANET_SEED="${GR:?}?.?.?.?:9091${N0:?}"
        fi
        if [ -z "$SEED_TRANSMISSION" ] &>/dev/null; then
          SEED_TRANSMISSION="${GR:?}??${N0:?}"
        fi
        if [ -z "$P2P_FILE_NAME" ] &>/dev/null; then
          P2P_FILE_NAME="${GR:?}?? ?? ??${N0:?}"
        fi

        # load
        LOAD="$(cat /proc/loadavg 2>&1 | awk '{ print $1,$2,$3 }' 2>&1)"

        # seedbox menu
        clear
        echo
        printf '%b' "${N0:?}   CMaNGOS - Server Maps

   SeedBox${G0:?}..:${N0:?} $SEED_TRANSMISSION
   Core${G0:?}.....:${N0:?} $SERVER_BUILD
   Load${G0:?}.....:${N0:?} ${GR:?}$LOAD${N0:?}
   Access${G0:?}...:${N0:?} $INTRANET_SEED
   Exp Maps${G0:?}.:${N0:?} $P2P_FILE_NAME
   Peers${G0:?}....:${G1:?} ${G0:?}${G1:?}$P2P_PEERS_CONNECTED_ID1${Y1:?}$P2P_PEERS_SEEDINGTO_ID1${G0:?}$P2P_PEERS_DOWN_LOAD_ID1${G0:?} ${G1:?}$P2P_PEERS_CONNECTED_ID2${Y1:?}$P2P_PEERS_SEEDINGTO_ID2${G0:?}$P2P_PEERS_DOWN_LOAD_ID2${G0:?} ${G1:?}$P2P_PEERS_CONNECTED_ID3${Y1:?}$P2P_PEERS_SEEDINGTO_ID3${G0:?}$P2P_PEERS_DOWN_LOAD_ID3 ${N0:?}
   Upload${G0:?}...:${G1:?} ${GR:?}128 kB/s (default)$N0

   t $GR: ${THEME_TXT:?}Install${N0:?} - ${THEME_DSC:?}Setup Maps$N0
   u $GR: ${THEME_TXT:?}Remove${N0:?}  - ${THEME_DSC:?}Uninstall$N0
   r $GR: ${THEME_TXT:?}Start${N0:?}   - ${THEME_DSC:?}Start p2p$N0
   s $GR: ${THEME_TXT:?}Stop${N0:?}    - ${THEME_DSC:?}Stop p2p$N0
   m $GR: ${THEME_TXT:?}Maps${N0:?}    - ${THEME_DSC:?}Import maps$N0
   i $GR: ${THEME_TXT:?}Info${N0:?}    - ${THEME_DSC:?}Torrent info$N0
   q $GR: ${THEME_TXT:?}Quit${N0:?}    - ${THEME_DSC:?}Return$N0

${N0:?}"
        read -r -s -n1
        case "$REPLY" in

        # transmission-remote information

        "i")

          PIDOFP2P_DAE_MOD=$(echo "$PIDOFP2P_DAE" 2>&1 | wc -w 2>&1)

          # is seedbox running?
          if [[ "$PIDOFP2P_DAE_MOD" -ge "1" ]] &>/dev/null; then
            printf '%b' "[${G1:?}OK${N0:?}] Torrent information\n"
            # list statistical information from the server
            P2P_ST=$(transmission-remote -st 2>&1)
            printf '%b' "${GR:?}$P2P_ST${N0:?}\n"
            echo
            # show details of the current torrent(s)
            P2P_T=$(transmission-remote -t all -i 2>&1)
            printf '%b' "${N0:?}$P2P_T${N0:?}\n"
            echo
            # list session information from the server
            P2P_SI=$(transmission-remote -t all -si 2>&1)
            printf '%b' "${GR:?}$P2P_SI${N0:?}\n"
            echo
            # list peers, if any
            P2P_PI=$(transmission-remote -t all -pi 2>&1)
            printf '%b' "${N0:?}$P2P_PI${N0:?}\n"
            echo
            P2P_TI=$(cat /var/log/ms/transmission_torrent_list)
            printf '%b' "${GR:?}$P2P_TI${N0:?}\n"
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          else
            echo "[!!] Torrent information"
            sleep 1
            echo "[!!] Install/Start SeedBox first!"
            sleep 1
          fi

          ;;

          # transmission-remote information

          # remove transmission-daemon

        "u")

          printf '%b' "[YN] Remove Seedbox? ${GR:?}keeping maps${N0:?} y/n "
          read -r -p "" -n 1 -r -s
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            # stop transmission service
            sudo service transmission-daemon stop &>/dev/null
            # stop tor service
            sudo service tor stop &>/dev/null
            # find it, shut it down
            for PID in $(ps -ef 2>&1 | grep -E "tor|transmission-cli|transmission-daemon" 2>&1 | awk '{print $2}'); do kill -9 $PID &>/dev/null; done
            # go over it again, kill daemon, cli
            sudo kill -9 "$PIDOFP2P_DAE" &>/dev/null
            sudo kill -9 "$PIDOFP2P_CLI" &>/dev/null
            sudo killall transmission-daemon &>/dev/null
            printf '%b' "[${G1:?}OK${N0:?}] Please wait\n"
            # remove old file
            sudo rm -R /var/log/ms/transmission_list &>/dev/null
            sudo apt-get remove transmission-* --purge -y 2>&1
            sudo apt-get remove tor* --purge -y 2>&1
            sudo apt-get update &>/dev/null
            # clear the local repository of retrieved package files that are left in /var/cache.
            sudo apt-get clean 2>&1
            # clear the local repository of retrieved package files
            sudo apt-get autoclean 2>&1
            # remove packages that were automatically installed because some other package required them
            sudo apt-get autoremove 2>&1
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          fi

          ;;

          # remove transmission-daemon done

          # start seedbox (transmission)

        "r")

          read -t 5 -r -p "[YN] Re/start SeedBox? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            # is transmission-daemon installed?
            if [ -x "$(command -v transmission-daemon)" ] &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Please wait\n"
              # stop transmission service
              sudo service transmission-daemon stop &>/dev/null
              # find it, shut it down
              for PID in $(ps -ef 2>&1 | grep -E "transmission-cli|transmission-daemon" 2>&1 | awk '{print $2}'); do kill -9 $PID &>/dev/null; done
              # go over it again, kill daemon, cli
              sudo kill -9 "$PIDOFP2P_DAE" &>/dev/null
              sudo kill -9 "$PIDOFP2P_CLI" &>/dev/null
              sudo killall transmission-daemon &>/dev/null
              sleep 1
              sudo service transmission-daemon start &>/dev/null
              sleep 1
              # enable service
              sudo systemctl enable transmission-daemon &>/dev/null
              # reload
              sudo systemctl daemon-reload &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] SeedBox started!\n"
              sleep 2
            else
              echo "[!!] Install/Start SeedBox first!"
              sleep 1
            fi
          fi

          ;;

          # setup seedbox (transmission)

        "t")

          # maps menu

          HEIGHT=10
          WIDTH=28
          CHOICE_HEIGHT=4
          BACKTITLE="Setup Maps"
          TITLE="Maps Options"
          MENU="Choose one option:"

          OPTIONS=(1 "Download Maps"
            2 "Extract Maps"
            3 "Download Client")

          CHOICE=$(dialog --clear \
            --backtitle "$BACKTITLE" \
            --title "$TITLE" \
            --menu "$MENU" \
            $HEIGHT $WIDTH $CHOICE_HEIGHT \
            "${OPTIONS[@]}" \
            2>&1 >/dev/tty)

          clear
          case $CHOICE in

          1)

            function p2p_install_option {
              printf '%b' "[YN] Download $R_MAPS? y/n "
              read -t 5 -r -p "" -n 1 -r -s
              echo
              if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
                if [ -f /seedbox/"$R_MAPS_MOD".zip ] &>/dev/null; then
                  printf '%b' "${GR:?}[YN] Redo Expansion.zip?${N0:?} y/n "
                  read -t 10 -r -p "" -n 1 -r -s
                  echo
                  if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
                    rm /var/log/ms/"$R_MAPS_MOD".zip.tmp &>/dev/null
                    sudo rm /seedbox/"$R_MAPS_MOD".zip &>/dev/null
                  fi
                fi

                if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
                  # create ms folder
                  sudo mkdir /var/log/ms/ &>/dev/null
                  # fix ownership
                  sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
                fi

                # check for updates regardless
                printf '%b' "[${G1:?}OK${N0:?}] Please wait\n"
                sudo apt-get update &>/dev/null
                # make sure unzip exist
                if ! [ -x "$(command -v unzip)" ] &>/dev/null; then
                  sudo apt-get install unzip -y 2>&1
                fi
                # install transmission-daemon
                if ! [ -x "$(command -v transmission-daemon)" ] &>/dev/null; then
                  sudo apt-get install transmission-daemon -y 2>&1
                fi
                # temporary stop ^
                sudo service transmission-daemon stop &>/dev/null
                # remove old config
                sudo rm /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
                # create 'seedbox' directory
                cd || exit
                sudo mkdir "/seedbox" &>/dev/null
                # fix folder owner
                sudo chown -R debian-transmission:debian-transmission /seedbox/ &>/dev/null
                # setup transmission-daemon configuration file
                # settings.json
                cat >"${FOLDER_WOW:?}"/settings.json <<'EOF'
{
"alt-speed-down": 128,
"alt-speed-enabled": false,
"alt-speed-time-begin": 540,
"alt-speed-time-day": 127,
"alt-speed-time-enabled": false,
"alt-speed-time-end": 1020,
"alt-speed-up": 128,
"bind-address-ipv4": "0.0.0.0",
"bind-address-ipv6": "::",
"blocklist-enabled": true,
"blocklist-url": "http://john.bitsurge.net/public/biglist.p2p.gz",
"cache-size-mb": 16,
"dht-enabled": true,
"download-dir": "/seedbox",
"download-queue-enabled": true,
"download-queue-size": 3,
"encryption": 1,
"idle-seeding-limit": 30,
"idle-seeding-limit-enabled": false,
"incomplete-dir": "/seedbox",
"incomplete-dir-enabled": false,
"lpd-enabled": true,
"message-level": 1,
"peer-congestion-algorithm": "",
"peer-id-ttl-hours": 6,
"peer-limit-global": 128,
"peer-limit-per-torrent": 128,
"peer-port": 52525,
"peer-port-random-high": 65535,
"peer-port-random-low": 49152,
"peer-port-random-on-start": false,
"peer-socket-tos": "default",
"pex-enabled": true,
"port-forwarding-enabled": true,
"preallocation": 1,
"prefetch-enabled": true,
"queue-stalled-enabled": true,
"queue-stalled-minutes": 30,
"ratio-limit": 2,
"ratio-limit-enabled": false,
"rename-partial-files": true,
"rpc-authentication-required": false,
"rpc-bind-address": "0.0.0.0",
"rpc-enabled": true,
"rpc-host-whitelist": "",
"rpc-host-whitelist-enabled": false,
"rpc-password": "{8cdc09d82992af11050cd6ca97c14f9117df07a1PiXvOluY",
"rpc-port": 9091,
"rpc-url": "/transmission/",
"rpc-username": "mangos",
"rpc-whitelist": "*.*.*.*",
"rpc-whitelist-enabled": true,
"scrape-paused-torrents-enabled": true,
"script-torrent-done-enabled": false,
"script-torrent-done-filename": "",
"seed-queue-enabled": false,
"seed-queue-size": 3,
"speed-limit-down": 128,
"speed-limit-down-enabled": false,
"speed-limit-up": 128,
"speed-limit-up-enabled": true,
"start-added-torrents": true,
"trash-original-torrent-files": false,
"umask": 2,
"upload-slots-per-torrent": 2,
"utp-enabled": true
}
EOF
                # install to correct folder
                sudo mv "${FOLDER_WOW:?}"/settings.json /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
                sleep 1
                printf '%b' "${Y1:?}[YN] Download with proxy (tor)$N0\n"
                printf '%b' "${GR:?}[!!] Probably slow & not working.$N0\n"
                echo "[YN] Install proxy and continue? y/n"
                read -r -p "" -n 1 -r -s
                # install proxy (tor)
                if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
                  echo "[!!] Please wait"
                  # is tor installed?
                  if ! [ -x "$(command -v tor)" ] &>/dev/null; then
                    printf '%b' "[${Y1:?}OK${N0:?}] Installing proxy..\n"
                    sudo apt-get install tor -y 2>&1
                  fi
                  # stop tor while configuration
                  sudo service tor stop &>/dev/null
                  # create torrc file
                  echo "ControlPort 9051
CookieAuthentication 1
CookieAuthFileGroupReadable 1

HiddenServiceDir /var/lib/tor/transmission/
HiddenServicePort 52525 127.0.0.1:52525" >"${FOLDER_WOW:?}"/THService.tmp
                  # move tor hidden service file into place as root
                  sudo mv "${FOLDER_WOW:?}"/THService.tmp /etc/tor/torrc 2>&1
                  # restart tor
                  printf '%b' "[${G1:?}OK${N0:?}] Starting proxy (tor)\n"
                  sudo service tor restart &>/dev/null
                  sleep 1
                  # reload
                  sudo systemctl daemon-reload &>/dev/null
                  sleep 1
                  TOR_SOMETHING="restart"
                  PROXY_P2P="HTTP_PROXY=socks5://127.0.0.1:9050"
                else
                  TOR_SOMETHING="stop"
                  PROXY_P2P=""
                fi
                # create service file for transmission
                echo "[Unit]
Description=Transmission BitTorrent Daemon
After=network.target

[Service]
User=debian-transmission
$PROXY_P2P
Type=notify
ExecStart=/usr/bin/transmission-daemon -f --log-error
ExecStop=/bin/kill -s STOP $MAINPID
ExecReload=/bin/kill -s HUP $MAINPID

[Install]
WantedBy=multi-user.target" >"${FOLDER_WOW:?}"/TService.tmp 2>&1
                # move service file into place as root
                sudo mv "${FOLDER_WOW:?}"/TService.tmp /lib/systemd/system/transmission-daemon.service 2>&1
                # reload regardless
                sudo systemctl daemon-reload &>/dev/null
                sleep 1
                # do something with tor
                sudo service tor "$TOR_SOMETHING" &>/dev/null
                sleep 1
                # restart transmission-daemon
                printf '%b' "[${G1:?}OK${N0:?}] Starting transmission\n"
                sudo service transmission-daemon restart &>/dev/null
                sleep 1
                # add torrent
                p2p_install_maps
                printf '%b' "[${G1:?}OK${N0:?}] Torrent added $R_MAPS\n"
                # try to verify torrent data
                P2P_VERIFY=$(transmission-remote -t all -v 2>&1)
                printf '%b' "[${Y1:?}OK${N0:?}] Verifying data..\n"
                sleep 1
                # output torrent verification
                printf '%b' "[${G1:?}OK${N0:?}] $P2P_VERIFY\n"
                sleep 1
                printf '%b' "[${G1:?}OK${N0:?}] Starting..\n"
                echo
                read -r -p "Press Enter to continue" </dev/tty
                echo
              fi
            }

            HEIGHT=10
            WIDTH=28
            CHOICE_HEIGHT=4
            BACKTITLE="Expansion Maps Download (torrent)"
            TITLE="Download/Import Maps"
            MENU="Choose one options"

            OPTIONS=(1 "Classic_Maps.zip"
              2 "TBC_Maps.zip"
              3 "WoTLK_Maps.zip")

            CHOICE=$(dialog --clear \
              --backtitle "$BACKTITLE" \
              --title "$TITLE" \
              --menu "$MENU" \
              $HEIGHT $WIDTH $CHOICE_HEIGHT \
              "${OPTIONS[@]}" \
              2>&1 >/dev/tty)

            clear
            case $CHOICE in

            "1")

              R_MAPS="${G1:?}classic_maps.zip${N0:?}"
              R_MAPS_MOD="classic_maps"
              # add magnet link: classic_maps.zip.torrent
              function p2p_install_maps {
                transmission-remote -a "magnet:?xt=urn:btih:53c783abd984eacb990e18f2b6a783a3086d09fc&dn=classic%5Fmaps.zip&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce" &>/dev/null
              }
              p2p_install_option
              # create maps.tmp file
              touch /var/log/ms/classic_maps.zip.tmp

              ;;

            "2")

              R_MAPS="${G1:?}tbc_maps.zip${N0:?}"
              R_MAPS_MOD="tbc_maps"
              # add magnet link: tbc_maps.zip.torrent
              function p2p_install_maps {
                transmission-remote -a "magnet:?xt=urn:btih:0edafa830fd9fe25234285c33f67a0c263e0c90d&dn=tbc%5Fmaps.zip&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce" &>/dev/null
              }
              p2p_install_option
              # create maps.tmp file
              touch /var/log/ms/tbc_maps.zip.tmp

              ;;

            "3")

              R_MAPS="${G1:?}wotlk_maps.zip${N0:?}"
              R_MAPS_MOD="wotlk_maps"
              # add magnet link: wotlk_maps.zip.torrent
              function p2p_install_maps {
                transmission-remote -a "magnet:?xt=urn:btih:e4f2e2989313f71a13400da93bde4ff577d0b255&dn=wotlk%5Fmaps.zip&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce" &>/dev/null
              }
              p2p_install_option
              # create maps.tmp file
              touch /var/log/ms/wotlk_maps.zip.tmp

              ;;

            esac

            ;;

            # setup seedbox (transmission) done

            # maps menu done

          2)

            # create wow-client directory
            printf '%b' "[!!] ${GR:?}Creating 'wow-client' directory${N0:?}\n"
            sudo mkdir "${FOLDER_WOW:?}"/wow-client &>/dev/null
            sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
            printf '%b' "[${G1:?}Ok${N0:?}] Fixing permissions\n"
            sleep 1
            printf '%b' "${GR:?}Default: ${FOLDER_WOW:?}/wow-client ${N0:?}\n"
            read -r -p "[!!] Enter client directory? y/n " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
              printf '%b' "[!!] ${GR:?}> ${N0:?}"
              read -r MAP_DIR
              MAPS_EXTRACTING_DIR="$MAP_DIR"
              printf '%b' "[${G1:?}Ok${N0:?}] Using ${GR?:}$MAPS_EXTRACTING_DIR${N0:?}\n"
            else
              MAPS_EXTRACTING_DIR="${FOLDER_WOW:?}/wow-client"
              printf '%b' "[${G1:?}Ok${N0:?}] Using ${GR?:}$MAPS_EXTRACTING_DIR${N0:?} (default)\n"
            fi
            sleep 1
            # copy extractor scripts to client folder
            sudo cp "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/contrib/extractor_scripts/* "$MAPS_EXTRACTING_DIR"
            printf '%b' "[${G1:?}Ok${N0:?}] Script\n"
            # copy extractor tools to client folder
            sudo cp "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run/bin/tools/* "$MAPS_EXTRACTING_DIR"
            printf '%b' "[${G1:?}Ok${N0:?}] Tools\n"
            cd "$MAPS_EXTRACTING_DIR" || exit
            sudo chmod u+x ExtractResources.sh
            printf '%b' "[${G1:?}Ok${N0:?}] Ready\n"
            read -r -p "[!!] Remove old maps first? y/n " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
              echo
              # remove old maps from client directory
              echo "Removing maps from Client directory"
              printf '%b' "[${G1:?}Ok${N0:?}] ${GR:?}Removing dbc, "
              sudo rm -R "$MAPS_EXTRACTING_DIR"/dbc &>/dev/null
              printf '%b' "maps, "
              sudo rm -R "$MAPS_EXTRACTING_DIR"/maps &>/dev/null
              printf '%b' "mmaps, "
              sudo rm -R "$MAPS_EXTRACTING_DIR"/mmaps &>/dev/null
              printf '%b' "vmaps, ${N0:?}"
              sudo rm -R "$MAPS_EXTRACTING_DIR"/vmaps &>/dev/null
              echo
              echo "Removing maps from Core directory"
              printf '%b' "[${G1:?}Ok${N0:?}] ${GR:?}Removing dbc, "
              # remove old maps from core directory
              sudo rm -R "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run/dbc &>/dev/null
              printf '%b' "maps, "
              sudo rm -R "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run/maps &>/dev/null
              printf '%b' "mmaps, "
              sudo rm -R "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run/mmaps &>/dev/null
              printf '%b' "vmaps, ${N0:?}"
              sudo rm -R "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run/vmaps &>/dev/null
              echo
            fi
            # run extractor script
            printf '%b' "[!!] ${CY:?}Run ExtractResources.sh${N0:?}\n"
            # start counting (seconds)
            START="$SECONDS"
            sudo ./ExtractResources.sh
            # seconds since start
            DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
            # convert seconds
            TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
            echo
            echo "Extract time: $TIMER"
            echo
            read -r -p "[!!] Install extracted maps? y/n " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
              # install maps
              cp -R "$MAPS_EXTRACTING_DIR"/dbc "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run
              cp -R "$MAPS_EXTRACTING_DIR"/maps "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run
              cp -R "$MAPS_EXTRACTING_DIR"/mmaps "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run
              cp -R "$MAPS_EXTRACTING_DIR"/vmaps "${FOLDER_WOW:?}"/mangos-"$TYPE_CORE"/run
            fi

            ;;

          3)

            HEIGHT=10
            WIDTH=33
            CHOICE_HEIGHT=4
            BACKTITLE="Download Client"
            TITLE="Client Options"
            MENU="Choose one option:"

            OPTIONS=(1 "Classic (Vanilla)"
              2 "The Burning Crusade"
              3 "Wrath of the Lich King")

            CHOICE=$(dialog --clear \
              --backtitle "$BACKTITLE" \
              --title "$TITLE" \
              --menu "$MENU" \
              $HEIGHT $WIDTH $CHOICE_HEIGHT \
              "${OPTIONS[@]}" \
              2>&1 >/dev/tty)

            clear
            case $CHOICE in

            1)

              #              echo "[!!] Downloading Classic (Vanilla) Client"
              #              sleep 1
              #              transmission-remote -a "" &>/dev/null
              #              sleep 1
              #              echo "[Ok] Torrent starting!"
              #              sleep 3

              echo "https://duckduckgo.com/?q=wow+classic+client&t=h_&ia=web"
              echo
              printf '%b' "${GR:?}Note: that there have been many reports lately,\n"
              echo "that Blizzard does file copyright strike with ISPs,"
              echo "for people using torrents to download their older clients."
              echo "There are a couple of different options to help with this,"
              echo "Recommended using either a cloud based torrent client,"
              echo "such as Bitport or a VPN (Proton VPN is a solid choice,"
              printf '%b' "they have a decent free tier also).${N0:?}\n"
              sleep 5
              echo
              read -r -p "Press Enter to continue" </dev/tty
              echo

              ;;

            2)

              #              echo "[!!] Downloading The Burning Crusade"
              #              sleep 1
              #              transmission-remote -a "" &>/dev/null
              #              sleep 1
              #              echo "[Ok] Torrent starting!"
              #              sleep 3

              echo "https://duckduckgo.com/?q=wow+tbc+client&t=h_&ia=web"
              echo
              printf '%b' "${GR:?}Note: that there have been many reports lately,\n"
              echo "that Blizzard does file copyright strike with ISPs,"
              echo "for people using torrents to download their older clients."
              echo "There are a couple of different options to help with this,"
              echo "Recommended using either a cloud based torrent client,"
              echo "such as Bitport or a VPN (Proton VPN is a solid choice,"
              printf '%b' "they have a decent free tier also).${N0:?}\n"
              sleep 5
              echo
              read -r -p "Press Enter to continue" </dev/tty
              echo

              ;;

            3)

              #              echo "[!!] Downloading Wrath of the Lich King"
              #              sleep 1
              #              transmission-remote -a "" &>/dev/null
              #              sleep 1
              #              echo "[Ok] Torrent starting!"
              #              sleep 3

              echo "https://duckduckgo.com/?q=wow+wotlk+client&t=h_&ia=web"
              echo
              printf '%b' "${GR:?}Note: that there have been many reports lately,\n"
              echo "that Blizzard does file copyright strike with ISPs,"
              echo "for people using torrents to download their older clients."
              echo "There are a couple of different options to help with this,"
              echo "Recommended using either a cloud based torrent client,"
              echo "such as Bitport or a VPN (Proton VPN is a solid choice,"
              printf '%b' "they have a decent free tier also).${N0:?}\n"
              sleep 5
              echo
              read -r -p "Press Enter to continue" </dev/tty
              echo

              ;;

            esac

            ;;

          esac

          ;;

          # start seedbox (transmission) done

          # stop seedbox (transmission)

        "s")

          read -t 5 -r -p "[YN] Stop SeedBox? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            # is transmission-daemon installed?
            if [ -x "$(command -v transmission-daemon)" ] &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Please wait\n"
              # stop transmission service
              sudo service transmission-daemon stop &>/dev/null
              # find it, shut it down
              for PID in $(ps -ef 2>&1 | grep -E "transmission-cli|transmission-daemon" 2>&1 | awk '{print $2}'); do kill -9 $PID &>/dev/null; done
              # go over it again, kill daemon, cli
              sudo kill -9 "$PIDOFP2P_DAE" &>/dev/null
              sudo kill -9 "$PIDOFP2P_CLI" &>/dev/null
              sudo killall transmission-daemon &>/dev/null
              sleep 1
              # disable service
              sudo systemctl disable transmission-daemon &>/dev/null
              # reload
              sudo systemctl daemon-reload &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] SeedBox stopped!\n"
              sleep 2
            else
              echo "[!!] Install/Start SeedBox first!"
              sleep 1
            fi
          fi

          ;;

          # stop seedbox (transmission) done

          # install maps

        "m")

          read -t 5 -r -p "[YN] Import Maps? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

            HEIGHT=10
            WIDTH=28
            CHOICE_HEIGHT=4
            BACKTITLE="Install Expansion Maps"
            TITLE="Import Downloaded Maps"
            MENU="Choose one options"

            OPTIONS=(1 "Classic_Maps.zip"
              2 "TBC_Maps.zip"
              3 "WoTLK_Maps.zip")

            CHOICE=$(dialog --clear \
              --backtitle "$BACKTITLE" \
              --title "$TITLE" \
              --menu "$MENU" \
              $HEIGHT $WIDTH $CHOICE_HEIGHT \
              "${OPTIONS[@]}" \
              2>&1 >/dev/tty)

            clear
            case $CHOICE in

            ### Classic Maps ###################################################

            1)

              # start counting (seconds)
              START="$SECONDS"
              MAPS="${FOLDER_CORE:?}"/run/maps/5332742.map
              MMAPS="${FOLDER_CORE:?}"/run/mmaps/5332742.mmtile
              VMAPS="${FOLDER_CORE:?}"/run/vmaps/Zulgurub_Ziggurat.wmo.vmo
              if [ -f "$MAPS" ] && [ -f "$MMAPS" ] && [ -f "$VMAPS" ] &>/dev/null; then
                printf '%b' "[${G1:?}OK${N0:?}] Maps already installed!\n"
                sleep 2
              else
                sudo unzip /seedbox/classic_maps.zip -d "${FOLDER_CORE:?}"/run
                # seconds since start
                DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
                # convert seconds
                TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
                echo
                printf '%b' "Import time: ${G1:?}$TIMER${N0:?}\n"
                printf '%b' "[${G1:?}OK${N0:?}] Maps installed!\n"
                sleep 1
                echo
                read -r -p "Press Enter to continue" </dev/tty
                echo
              fi

              ;;

              ### TBC Maps #####################################################

            2)

              if [ -f /seedbox/tbc_maps.zip ] &>/dev/null; then
                # start counting (seconds)
                START="$SECONDS"
                sudo unzip /seedbox/tbc_maps.zip -d "${FOLDER_CORE:?}"/run
                # seconds since start
                DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
                # convert seconds
                TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
                echo
                printf '%b' "Import time: ${G1:?}$TIMER${N0:?}\n"
                printf '%b' "[${G1:?}OK${N0:?}] Maps installed!\n"
                sleep 1
                echo
                read -r -p "Press Enter to continue" </dev/tty
                echo
              else
                echo "Not Found, Download/Extract Maps first Please!"
              fi

              ;;

              ### WoTLK Maps ###################################################

            3)

              if [ -f /seedbox/wotlk_maps.zip ] &>/dev/null; then
                # start counting (seconds)
                START="$SECONDS"
                sudo unzip /seedbox/wotlk_maps.zip -d "${FOLDER_CORE:?}"/run
                # seconds since start
                DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
                # convert seconds
                TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
                echo
                printf '%b' "Import time: ${G1:?}$TIMER${N0:?}\n"
                printf '%b' "[${G1:?}OK${N0:?}] Maps installed!\n"
                sleep 1
                echo
                read -r -p "Press Enter to continue" </dev/tty
                echo
              else
                echo "Not Found, Download/Extract Maps first Please!"
              fi

              ;;

            esac
          fi

          ;;

        esac

        ;;

        # install maps done

        # seedbox menu done

        # htop

      "p")

        # is htop installed?
        if ! [ -x "$(command -v htop)" ] &>/dev/null; then
          echo "[!!] Please wait"
          sudo apt-get install htop -y 2>&1
        fi
        htop

        ;;

        # htop done

        # reset --hard (everything)

      "h")

        printf '%b' "[YN] 'reset --hard' (${Y1:?}EVERYTHING${N0:?}) Are You Sure? (y/n)"
        echo
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          echo
          if [ ! -z "$(ls -A "${FOLDER_CORE:?}" 2>&1)" ] &>/dev/null; then
            printf '%b' "[${GR:?}NO${N0:?}]${THEME_ALL:?} Core:${N0:?} Empty!\n"
          else
            printf '%b' "[${G1:?}OK${N0:?}]${THEME_ALL:?} Core${N0:?}: "
            cd "${FOLDER_CORE:?}" || exit
            git reset --hard 2>&1
          fi
          if [ ! -z "$(ls -A "$FOLDER_DB" 2>&1)" ] &>/dev/null; then
            printf '%b' "[${GR:?}NO${N0:?}]${THEME_ALL:?} Database:${N0:?} Empty!\n"
          else
            printf '%b' "[${G1:?}OK${N0:?}]${THEME_ALL:?} Database${N0:?}: "
            cd "${FOLDER_DB:?}" || exit
            git reset --hard 2>&1
          fi
          if [ ! -z "$(ls -A "$FOLDER_HELPER" 2>&1)" ] &>/dev/null; then
            printf '%b' "[${GR:?}NO${N0:?}]${THEME_ALL:?} Helper:${N0:?} Empty!\n"
          else
            printf '%b' "[${G1:?}OK${N0:?}]${THEME_ALL:?} Helper${N0:?}: "
            cd "${FOLDER_HELPER:?}" || exit
            git reset --hard 2>&1
          fi
          echo
          read -r -p "Press Enter to continue" </dev/tty
          echo
        fi

        ;;

        # reset --hard (everything) done

        # dive into logs

      "l")

        # lines in files
        ESLOG="$(cat "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | wc -l 2>&1)"
        ERLOG="$(cat "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | wc -l 2>&1)"
        ESLOG_OLD="$(cat "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1 | wc -l 2>&1)"
        ERLOG_OLD="$(cat "${FOLDER_CORE:?}"/run/logs/old/Realmd.log.old 2>&1 | wc -l 2>&1)"
        # delete empty files, if any
        if [[ "$ESLOG" -lt "1" ]] &>/dev/null; then
          sudo rm -R "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null
        elif [[ "$ERLOG" -lt "1" ]] &>/dev/null; then
          sudo rm -R "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null
        elif [[ "$ESLOG_OLD" -lt "1" ]] &>/dev/null; then
          sudo rm -R "${FOLDER_CORE:?}"/run/logs/old/Server.log.old &>/dev/null
        elif [[ "$ERLOG_OLD" -lt "1" ]] &>/dev/null; then
          sudo rm -R "${FOLDER_CORE:?}"/run/logs/old/Realmd.log.old &>/dev/null
        fi
        # non responsive/responsive
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/Server.log.old ] &>/dev/null; then
          DIVE_SERVER_OLD_EMPTY="0"
          DIVE_SERVER_OLD_ERROR="0"
          DIVE_SERVER_OLD_SERIO="0"
          DIVE_SERVER_OLD_IGNOR="0"
          DIVE_SERVER_OLD_POLYR="0"
        else
          # server.log.old
          DIVE_SERVER_OLD_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty.|.*empty*." 2>&1)
          DIVE_SERVER_OLD_ERROR=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1 | grep -c -E ".*ERROR*." 2>&1)
          DIVE_SERVER_OLD_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1)
          DIVE_SERVER_OLD_IGNOR=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1)
          DIVE_SERVER_OLD_POLYR=$(grep -c -E "Invalid poly ref" "${FOLDER_CORE:?}"/run/logs/old/Server.log.old 2>&1)
        fi
        # non responsive/responsive
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/Server.log ] &>/dev/null; then
          DIVE_SERVER_EMPTY="0"
          DIVE_SERVER_ERROR="0"
          DIVE_SERVER_SERIO="0"
          DIVE_SERVER_IGNOR="0"
          DIVE_SERVER_POLYR="0"
        else
          # server.log
          DIVE_SERVER_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty.|.*empty*." 2>&1)
          DIVE_SERVER_ERROR=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
          DIVE_SERVER_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
          DIVE_SERVER_IGNOR=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
          DIVE_SERVER_POLYR=$(grep -c -E "Invalid poly ref" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
        fi
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/Realmd.log ] &>/dev/null; then
          # non responsive/responsive
          DIVE_REALMD_EMPTY="0"
          DIVE_REALMD_ERROR="0"
          DIVE_REALMD_SERIO="0"
        else
          # realmd.log
          DIVE_REALMD_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." 2>&1)
          DIVE_REALMD_ERROR=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
          DIVE_REALMD_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1)
        fi
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/DBErrors.log ] &>/dev/null; then
          # non responsive/responsive
          DIVE_DBERROR_CORR="0"
          DIVE_DBERROR_EXIS="0"
          DIVE_DBERROR_QUER="0"
          DIVE_DBERROR_USED="0"
          DIVE_DBERROR_CRAS="0"
        else
          # DBErrors.log
          DIVE_DBERROR_CORR=$(grep -c -E "does\snot\shave\scorresponding" "${FOLDER_CORE:?}"/run/logs/DBErrors.log 2>&1)
          DIVE_DBERROR_EXIS=$(grep -c -E "doesn't\sexist" "${FOLDER_CORE:?}"/run/logs/DBErrors.log 2>&1)
          DIVE_DBERROR_QUER=$(grep -c -E "query\sERROR" "${FOLDER_CORE:?}"/run/logs/DBErrors.log 2>&1)
          DIVE_DBERROR_USED=$(grep -c -E "Option\swill\snever\sbe\sused" "${FOLDER_CORE:?}"/run/logs/DBErrors.log 2>&1)
          DIVE_DBERROR_CRAS=$(grep -c -E "can\scrash\sclient" "${FOLDER_CORE:?}"/run/logs/DBErrors.log 2>&1)
        fi
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/Char.log ] &>/dev/null; then
          # non responsive/responsive
          DIVE_CHAR_CREATED="0"
          DIVE_CHAR_LOGIN_C="0"
          DIVE_CHAR_LOGOUTS="0"
        else
          # char.log
          DIVE_CHAR_CREATED=$(grep -c -E "Create\sCharacter" "${FOLDER_CORE:?}"/run/logs/Char.log 2>&1)
          DIVE_CHAR_LOGIN_C=$(grep -c -E "Login" "${FOLDER_CORE:?}"/run/logs/Char.log 2>&1)
          DIVE_CHAR_LOGOUTS=$(grep -c -E "Logout" "${FOLDER_CORE:?}"/run/logs/Char.log 2>&1)
        fi
        if [ ! -f "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log ] &>/dev/null; then
          # non responsive/responsive
          DIVE_EVENTAIERROR="0"
          DIVE_EVENTAINOEFF="0"
          DIVE_EVENTAINONEX="0"
          DIVE_EVENTAI_NULL="0"
          DIVE_EVENTAINOTUS="0"
        else
          # EventAIErrors.log
          DIVE_EVENTAIERROR=$(grep -c -E "skipping" "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log 2>&1)
          DIVE_EVENTAINOEFF=$(grep -c -E "Action\swill\snot\shave\sany\seffect." "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log 2>&1)
          DIVE_EVENTAINONEX=$(grep -c -E "nonexistent|non-existing" "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log 2>&1)
          DIVE_EVENTAI_NULL=$(grep -c -E ".*NULL*." "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log 2>&1)
          DIVE_EVENTAINOTUS=$(grep -c -E "but\snot\sused" "${FOLDER_CORE:?}"/run/logs/EventAIErrors.log 2>&1)
        fi
        # Server.log, .old, Realmd.log
        DIVE_LOG_EMPTY=$(printf '%b' "${Y0:?}Empty..${N0:?}")
        DIVE_LOG_ERROR=$(printf '%b' "${R0:?}Error..${N0:?}")
        DIVE_LOG_IGNOR=$(printf '%b' "${R0:?}Ignore.${N0:?}")
        DIVE_LOG_SERIO=$(printf '%b' "${R1:?}Serious${N0:?}")
        DIVE_LOG_POLYR=$(printf '%b' "${R0:?}InvPoly${N0:?}")
        # DBErrors.log
        DIVE_LOG_CORRE=$(printf '%b' "${R0:?}NotCorresponding${N0:?}")
        DIVE_LOG_EXIST=$(printf '%b' "${R0:?}Doesn'tExist${N0:?}")
        DIVE_LOG_QUERY=$(printf '%b' "${R0:?}QueryERROR${N0:?}")
        DIVE_LOG_NEVER=$(printf '%b' "${R0:?}WillNeverBeUsed${N0:?}")
        DIVE_LOG_CRASH=$(printf '%b' "${R0:?}CanCrashClient!${N0:?}")
        # EventAIErrors.log
        DIVE_LOG_SKIPP=$(printf '%b' "${R0:?}Skipping${N0:?}")
        DIVE_LOG_NOEFF=$(printf '%b' "${R0:?}NoEffect${N0:?}")
        DIVE_LOG_NONEX=$(printf '%b' "${R0:?}NonExist${N0:?}")
        DIVE_LOG_NULL0=$(printf '%b' "${R0:?}NULL${N0:?}")
        DIVE_LOG_NOTUS=$(printf '%b' "${R0:?}NotUsed${N0:?}")
        # Char.log
        DIVE_LOG_CREAT=$(printf '%b' "${Y0:?}Created${N0:?}")
        DIVE_LOG_LOGIN=$(printf '%b' "${Y0:?}Login${N0:?}")
        DIVE_LOG_LOGOU=$(printf '%b' "${Y0:?}Logout${N0:?}")
        # empty table
        DIVE_LOG_NONE=$(printf '%b' "\e[2mempty${N0:?}")
        DIVE_LOG_ZERO=$(printf '%b' "0")

        printf '%b' "Server value Server.old value Realmd value
$DIVE_LOG_EMPTY ${GR:?}$DIVE_SERVER_EMPTY${N0:?} $DIVE_LOG_EMPTY ${GR:?}$DIVE_SERVER_OLD_EMPTY${N0:?} $DIVE_LOG_EMPTY ${GR:?}$DIVE_REALMD_EMPTY${N0:?}
$DIVE_LOG_ERROR ${GR:?}$DIVE_SERVER_ERROR${N0:?} $DIVE_LOG_ERROR ${GR:?}$DIVE_SERVER_OLD_ERROR${N0:?} $DIVE_LOG_ERROR ${GR:?}$DIVE_REALMD_ERROR${N0:?}
$DIVE_LOG_IGNOR ${GR:?}$DIVE_SERVER_IGNOR${N0:?} $DIVE_LOG_IGNOR ${GR:?}$DIVE_SERVER_OLD_IGNOR${N0:?} $DIVE_LOG_IGNOR ${GR:?}$DIVE_REALMD_SERIO${N0:?}
$DIVE_LOG_POLYR ${GR:?}$DIVE_SERVER_POLYR${N0:?} $DIVE_LOG_POLYR ${GR:?}$DIVE_SERVER_OLD_POLYR${N0:?} $DIVE_LOG_NONE ${GR:?}$DIVE_LOG_ZERO${N0:?}
$DIVE_LOG_SERIO ${GR:?}$DIVE_SERVER_SERIO${N0:?} $DIVE_LOG_SERIO ${GR:?}$DIVE_SERVER_OLD_SERIO${N0:?} $DIVE_LOG_SERIO ${GR:?}$DIVE_LOG_ZERO${N0:?}\n" | column -t
        echo
        printf '%b' "DBErrors value Char value EventAIErrors value
$DIVE_LOG_CORRE ${GR:?}$DIVE_DBERROR_CORR${N0:?} $DIVE_LOG_CREAT ${GR:?}$DIVE_CHAR_CREATED${N0:?} $DIVE_LOG_SKIPP ${GR:?}$DIVE_EVENTAIERROR${N0:?}
$DIVE_LOG_EXIST ${GR:?}$DIVE_DBERROR_EXIS${N0:?} $DIVE_LOG_LOGIN ${GR:?}$DIVE_CHAR_LOGIN_C${N0:?} $DIVE_LOG_NOEFF ${GR:?}$DIVE_EVENTAINOEFF${N0:?}
$DIVE_LOG_QUERY ${GR:?}$DIVE_DBERROR_QUER${N0:?} $DIVE_LOG_LOGOU ${GR:?}$DIVE_CHAR_LOGOUTS${N0:?} $DIVE_LOG_NONEX ${GR:?}$DIVE_EVENTAINONEX${N0:?}
$DIVE_LOG_NEVER ${GR:?}$DIVE_DBERROR_USED${N0:?} $DIVE_LOG_NONE ${GR:?}$DIVE_LOG_ZERO${N0:?} $DIVE_LOG_NULL0 ${GR:?}$DIVE_EVENTAI_NULL${N0:?}
$DIVE_LOG_CRASH ${GR:?}$DIVE_DBERROR_CRAS${N0:?} $DIVE_LOG_NONE ${GR:?}$DIVE_LOG_ZERO${N0:?} $DIVE_LOG_NOTUS ${GR:?}$DIVE_EVENTAINOTUS${N0:?}\n" | column -t
        printf '%b' "
   1 : Raw error output
   2 : tail error output\n"
        echo
        read -n1 -s
        case "$REPLY" in

        "1")

          if [ -f "${FOLDER_CORE:?}/run/logs/Server.log" ] &>/dev/null; then
            # raw error from logs
            ERROR_ERROR=$(grep --no-filename -Eo "Error.*|ERROR:.*" "${FOLDER_CORE:?}"/run/logs/*.log 2>&1 | grep -E -v ".*is empty*." 2>&1)
            # raw empty from logs
            EMPTY_ERROR=$(grep --no-filename -Eo ".*empty*." "${FOLDER_CORE:?}"/run/logs/*.log 2>&1 | grep -E -v "Error.*|ERROR:.*|Only expired mails*" 2>&1)
            printf '%b' "${Y1:?}$EMPTY_ERROR${N0:?}\n"
            printf '%b' "${R0:?}$ERROR_ERROR${N0:?}\n"
            echo
          else
            # no files, nothing to grep
            printf '%b' "${GR:?}No logs found!${N0:?}\n"
            echo
          fi

          ;;

        "2")

          if [ -f "${FOLDER_CORE:?}/run/logs/Server.log" ] &>/dev/null; then
            # tail logs for error
            echo "Tailing logs!"
            printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
            tail -f "${FOLDER_CORE:?}"/run/logs/*.log 2>&1 | grep -Eo ".*Error.*|.*ERROR:.*|.*empty*." 2>&1
            echo
          else
            # no files, nothing to grep
            printf '%b' "${GR:?}No logs found!${N0:?}\n"
            echo
          fi

          ;;

        "q") exit ;;
        *) ;;

        esac

        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # dive into logs done

        # info from mysql database and logs

      "w")

        # mysql data
        ON_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(online) FROM ${DB_CHARACTERS:?}.characters;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        GU_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.guild;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        AC_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        AU_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.auction;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        BG_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.bugreport;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        BN_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account_banned;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        MI_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.mail_items;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        PT_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.petition;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        PS_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.petition_sign;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        RL_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.realmlist;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        AL_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account_logons;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        CS_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_social;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        CC_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_spell_cooldown;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        GM_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.gm_surveys;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        GP_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.groups;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        # on_count at TOP ^
        CH_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.characters;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

        # gu_count at TOP ^
        ME_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.guild_member;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        MA_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.mail;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        PE_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_pet;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

        TI_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.gm_tickets;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        CO_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.corpse;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        PV_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.pvpstats_players;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        GI_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_gifts;" 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

        # log data
        if [ -f "${FOLDER_CORE:?}"/run/logs/Server.log ] &>/dev/null; then
          # empty mail, returning old mails...
          MA_CYCLE=$(grep -c -E "Returning old mails" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
        fi

        printf '%b' "
Accounts${G1:?}...:${N0:?} $AC_COUNT Guilds${G1:?}.....:${N0:?} $GU_COUNT Tickets${G1:?}......:${N0:?} $TI_COUNT
Banned${G1:?}.....:${N0:?} $BN_COUNT Members${G1:?}....:${N0:?} $ME_COUNT Corpses${G1:?}......:${N0:?} $CO_COUNT
Online${G1:?}.....:${N0:?} $ON_COUNT Mail${G1:?}.......:${N0:?} $MA_COUNT PvP${G1:?}..........:${N0:?} $PV_COUNT
Characters${G1:?}.:${N0:?} $CH_COUNT Pets${G1:?}.......:${N0:?} $PE_COUNT Gifts${G1:?}........:${N0:?} $GI_COUNT
MailG1cle${G1:?}..:${N0:?} $MA_CYCLE Petition${G1:?}...:${N0:?} $PT_COUNT PetitionSign${G1:?}.:${N0:?} $PS_COUNT
MailItems${G1:?}..:${N0:?} $MI_COUNT BugReport${G1:?}..:${N0:?} $BG_COUNT Groups${G1:?}.......:${N0:?} $GP_COUNT
Realms${G1:?}.....:${N0:?} $RL_COUNT Social${G1:?}.....:${N0:?} $CS_COUNT Logons${G1:?}.......:${N0:?} $AL_COUNT
Cooldowns${G1:?}..:${N0:?} $CC_COUNT GM_Surveys${G1:?}.:${N0:?} $GM_COUNT Auctions${G1:?}.....:${N0:?} $AU_COUNT\n" | column -t
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # info from mysql database and logs done

        # backup sql

      "b")

        # create directory, backup
        mkdir "${FOLDER_WOW:?}"/backup &>/dev/null
        # well (: backup probably hours old by now
        printf '%b' "Backup${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "$DB_CHARACTERS" >"${FOLDER_WOW:?}"/backup/"$DB_CHARACTERS"-"${NOW:?}".sql
        printf '%b' "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-${NOW:?}.sql\n"
        sleep 2
        # backup characters sql
        printf '%b' "Backup${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "${DB_REALMD:?}" >"${FOLDER_WOW:?}"/backup/"${DB_REALMD:?}"-"${NOW:?}".sql
        printf '%b' "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] ${DB_REALMD:?}-${NOW:?}.sql\n"
        sleep 1
        echo
        read -t 5 -r -p "[YN] Show content? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          echo
          ls -l "${FOLDER_WOW:?}"/backup/
          echo
          read -t 5 -r -p "[YN] Show configurations? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            echo
            ls -l "${FOLDER_WOW:?}"/backup/configurations
          fi
          echo
          read -r -p "Press Enter to continue" </dev/tty
          echo
        fi
        # well (: backup probably hours old by now done

        ;;

        # backup sql done

        # remote access

      "r")

        read -t 5 -r -p "[YN] Want to login? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # test RA connection
          if nc -zv "$HOST_NC" "$PORT_NC" &>/dev/null; then
            # connected
            RA_SERVER="mangos>"
            ENT_MARK=$(echo -e "\e[5m_\033[0m")
            PWR_BUTTON="${G1:?}"
            RA_MSG="${G0:?}>${N0:?} hit Enter to go back."
            RA_DSC0="${GR:?}commands${N0:?}, list all commands"
            RA_DSC1="${GR:?}quit${N0:?}, hit Enter to exit${N0:?}"
            RA_LINE="${GR:?}- - - - - - - - - - - - - -${N0:?}"
            RA_IDLE=" "
            RA_IDLE_DOWN="${THEME_ALL:?}_${N0:?}"
          else
            # configuration
            RA_STATUS=$(cat "${FOLDER_CORE:?}"/run/etc/mangosd.conf 2>/dev/null | grep "Ra.Enable =.*" 2>&1)
            # no configuration, use backup
            if [ -z "$RA_STATUS" ] &>/dev/null; then
              RA_STATUS=$(cat "${FOLDER_WOW:?}"/backup/configurations/mangosd.conf 2>/dev/null | grep "Ra.Enable =.*" 2>&1)
            fi
            # no connection
            RA_SERVER="${GR:?}        ${N0:?}"
            ENT_MARK=""
            PWR_BUTTON="${GR:?}"
            RA_MSG="${Y1:?}Setup ${THEME_ALL:?}RA${Y1:?} inside mangosd.conf!${N0:?}"
            RA_DSC0="CONSOLE, ${THEME_ALL:?}R${N0:?}EMOTE ${THEME_ALL:?}A${N0:?}CCESS"
            RA_DSC1="${GR:?}${RA_STATUS:?} (1/0 on/off)${N0:?}"
            RA_TIP=""
            RA_LINE="${GR:?}- - - - - - - - - - - - - - -${N0:?}"
            RA_IDLE="/"
            RA_IDLE_DOWN="$GR/$THEME_ALL"
          fi

          clear
          printf '%b' "
${THEME_ALL:?}      ._________________.
      |.---------------.|
      || ${N0:?}$RA_SERVER${N0:?}$ENT_MARK${THEME_ALL:?}      ||
      ||              ${GR:?}$RA_IDLE${THEME_ALL:?}||
      ||      ${GR:?}$RA_IDLE${THEME_ALL:?}      ${GR:?}$RA_IDLE${THEME_ALL:?} ||
      ||     ${GR:?}$RA_IDLE${THEME_ALL:?}      ${GR:?}$RA_IDLE${THEME_ALL:?}  ||
      ||    ${GR:?}$RA_IDLE${THEME_ALL:?}          ||
      ||___${RA_IDLE_DOWN:?}${THEME_ALL:?}___________||
      /$N0.-.-.-.-.-.-.-.-.${THEME_ALL:?}\\
     /$N0.-.-.-.-.-.-.-.-.-.${THEME_ALL:?}\\
    /$N0.-.-.-.-.-.-.-.-.-.-.${THEME_ALL:?}\\
   /______/__________\___${PWR_BUTTON:?}o${THEME_ALL:?}_\\
   \_______________________/${N0:?}"
          echo
          printf '%b' "
     CMaNGOS Command Center

  $RA_MSG
  $RA_LINE
  $RA_DSC0
  $RA_DSC1

$RA_TIP"
          # connect with netcat
          nc "$HOST_NC" "$PORT_NC"
          read -r -p "" </dev/tty
        fi

        ;;

      # remote access done

      "d")

        # fetch current ifconfig data
        ifconfig >/tmp/ifconfig

        # extract RX and TX bytes
        IFCONFIG_RX_BYTE=$(grep "RX" /tmp/ifconfig | head -1 | awk '{ print $5 }')
        IFCONFIG_TX_BYTE=$(grep "TX" /tmp/ifconfig | head -1 | awk '{ print $5 }')
        # fetch system uptime
        UPTIME_PROC_SECONDS=$(awk -F. '{print $1}' /proc/uptime)
        # time format
        UPTIME_SYSTEM="$(echo "$(printf '%dh:%dm:%ds\n' $(("$UPTIME_PROC_SECONDS/3600")) $(("$UPTIME_PROC_SECONDS%3600/60")) $(("$UPTIME_PROC_SECONDS%60")))")"
        # calculate current data usage rate in bytes per second
        MEGA_SECOND_RX=$(echo "$IFCONFIG_RX_BYTE/$UPTIME_PROC_SECONDS" | bc -l 2>/dev/null)
        MEGA_SECOND_TX=$(echo "$IFCONFIG_TX_BYTE/$UPTIME_PROC_SECONDS" | bc -l 2>/dev/null)

        # function to convert bytes to MB, GB, or TB with the appropriate unit
        convert_to_units() {
          local BYTES=$1
          if (($(echo "$BYTES >= 1024*1024*1024*1024" | bc -l))); then
            echo "$(echo "$BYTES / 1024 / 1024 / 1024 / 1024" | bc -l | awk '{ printf "%.3f", $1 }') TB"
          elif (($(echo "$BYTES >= 1024*1024*1024" | bc -l))); then
            echo "$(echo "$BYTES / 1024 / 1024 / 1024" | bc -l | awk '{ printf "%.3f", $1 }') GB"
          elif (($(echo "$BYTES >= 1024*1024" | bc -l))); then
            echo "$(echo "$BYTES / 1024 / 1024" | bc -l | awk '{ printf "%.3f", $1 }') MB"
          else
            echo "$(echo "$BYTES / 1024" | bc -l | awk '{ printf "%.3f", $1 }') KB"
          fi
        }

        # function to convert bytes per second to appropriate unit with "/s"
        convert_to_rate_units() {
          local BYTES_PER_SEC=$1
          if (($(echo "$BYTES_PER_SEC >= 1024*1024*1024" | bc -l))); then
            echo "$(echo "$BYTES_PER_SEC / 1024 / 1024 / 1024" | bc -l | awk '{ printf "%.3f", $1 }') GB/s"
          elif (($(echo "$BYTES_PER_SEC >= 1024*1024" | bc -l))); then
            echo "$(echo "$BYTES_PER_SEC / 1024 / 1024" | bc -l | awk '{ printf "%.3f", $1 }') MB/s"
          elif (($(echo "$BYTES_PER_SEC >= 1024" | bc -l))); then
            echo "$(echo "$BYTES_PER_SEC / 1024" | bc -l | awk '{ printf "%.3f", $1 }') KB/s"
          else
            echo "$(echo "$BYTES_PER_SEC" | bc -l | awk '{ printf "%.3f", $1 }') B/s"
          fi
        }

        # calculate RX usage in bytes
        DAILY_USAGE_RX_BYTES=$(echo "$MEGA_SECOND_RX*86400" | bc -l)
        WEEKLY_USAGE_RX_BYTES=$(echo "$MEGA_SECOND_RX*604800" | bc -l)
        MONTHLY_USAGE_RX_BYTES=$(echo "$MEGA_SECOND_RX*2419200" | bc -l)
        YEARLY_USAGE_RX_BYTES=$(echo "$MEGA_SECOND_RX*29030400" | bc -l)
        # calculate TX usage in bytes
        DAILY_USAGE_TX_BYTES=$(echo "$MEGA_SECOND_TX*86400" | bc -l)
        WEEKLY_USAGE_TX_BYTES=$(echo "$MEGA_SECOND_TX*604800" | bc -l)
        MONTHLY_USAGE_TX_BYTES=$(echo "$MEGA_SECOND_TX*2419200" | bc -l)
        YEARLY_USAGE_TX_BYTES=$(echo "$MEGA_SECOND_TX*29030400" | bc -l)
        # convert RX values to human-readable units
        DAILY_USAGE_RX=$(convert_to_units "$DAILY_USAGE_RX_BYTES")
        WEEKLY_USAGE_RX=$(convert_to_units "$WEEKLY_USAGE_RX_BYTES")
        MONTHLY_USAGE_RX=$(convert_to_units "$MONTHLY_USAGE_RX_BYTES")
        YEARLY_USAGE_RX=$(convert_to_units "$YEARLY_USAGE_RX_BYTES")
        # convert TX values to human-readable units
        DAILY_USAGE_TX=$(convert_to_units "$DAILY_USAGE_TX_BYTES")
        WEEKLY_USAGE_TX=$(convert_to_units "$WEEKLY_USAGE_TX_BYTES")
        MONTHLY_USAGE_TX=$(convert_to_units "$MONTHLY_USAGE_TX_BYTES")
        YEARLY_USAGE_TX=$(convert_to_units "$YEARLY_USAGE_TX_BYTES")
        # convert RX and TX current rates to human-readable units
        CURRENT_RX_RATE=$(convert_to_rate_units "$MEGA_SECOND_RX")
        CURRENT_TX_RATE=$(convert_to_rate_units "$MEGA_SECOND_TX")

        # display the result
        RESULT="Download Data
-------------------------------------------
$(grep "RX" /tmp/ifconfig | head -1 | awk -FRX '{ print $2 }' | xargs)
-------------------------------------------
RX Current.: $CURRENT_RX_RATE
RX Daily...: $DAILY_USAGE_RX
RX Weekly..: $WEEKLY_USAGE_RX
RX Monthly.: $MONTHLY_USAGE_RX
RX Yearly..: $YEARLY_USAGE_RX

Upload Data
-------------------------------------------
$(grep "TX" /tmp/ifconfig | head -1 | awk -FTX '{ print $2 }' | xargs)
-------------------------------------------
TX Current.: $CURRENT_TX_RATE
TX Daily...: $DAILY_USAGE_TX
TX Weekly..: $WEEKLY_USAGE_TX
TX Monthly.: $MONTHLY_USAGE_TX
TX Yearly..: $YEARLY_USAGE_TX

Uptime.....: $UPTIME_SYSTEM"

        WIDTH=$(echo "$(echo "$RESULT" | wc -L)+5" | bc 2>/dev/null)

        # display results in a dialog box
        display_result() {
          dialog --title "Data Usage Statistics" \
            --msgbox "$RESULT" 25 "$WIDTH"
        }

        # execute the display_result function
        display_result 2>/dev/null

        ;;

      "q")
        break
        ;;
      *)
        echo "empty"
        ;;
      esac
    done

    ;;

    # Login (command) done * Free Hong Kong.

    # Checking for updates

  "c")

    # updated and installed
    FILE_CORE="/home/$(whoami)/wow/Installed_core_${TYPE_CORE:?}"
    if [ -f "$FILE_CORE" ] &>/dev/null; then
      OK_CORE="[${G1:?}OK${N0:?}]"
    fi
    FILE_CORE="/home/$(whoami)/wow/Installed_core_${TYPE_CORE:?}"
    if [ ! -f "$FILE_CORE" ] &>/dev/null; then
      OK_CORE="[${Y1:?}+${G1:?}+${N0:?}]"
    fi
    FILE_DB="/home/$(whoami)/wow/Installed_db_${TYPE_CORE:?}"
    if [ -f "$FILE_DB" ] &>/dev/null; then
      OK_DB="[${G1:?}OK${N0:?}]"
    fi
    FILE_DB="/home/$(whoami)/wow/Installed_db_${TYPE_CORE:?}"
    if [ ! -f "$FILE_DB" ] &>/dev/null; then
      OK_DB="[${Y1:?}+${G1:?}+${N0:?}]"
    fi
    FILE_MS="/home/$(whoami)/wow/Installed_ms"
    if [ -f "$FILE_MS" ] &>/dev/null; then
      OK_MS="[${G1:?}OK${N0:?}]"
    fi
    FILE_MS="/home/$(whoami)/wow/Installed_ms"
    if [ ! -f "$FILE_MS" ] &>/dev/null; then
      OK_MS="[${Y1:?}+${G1:?}+${N0:?}]"
    fi

    # check if mangos-core exist
    FILE="${FOLDER_CORE:?}/README.md"
    if [ ! -f "$FILE" ] &>/dev/null; then
      # look for directory
      echo -ne '[!!] No Install Found!\r'
      sleep 2
      # remove old file
      rm /home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}" &>/dev/null
      # fresh install?
      DOWN_CORE=$(echo -e "\033[5m?\033[0m" 2>&1)
      printf '%b' "[YN]${GR:?} ${N0:?}(${GR:?}${UND:?}0000000${DEF:?}${N0:?}) Core${GR:?} Download ${DOWN_CORE:?} y/n ${N0:?}"
      read -t 4 -r -p "" -n 1 -r -s
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Cloning repository! Please wait this might take a while
(${G1:?}${GITHUB_CMANGOS:?}${N0:?})\n"
        sudo mkdir "${FOLDER_WOW:?}" &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        cd "${FOLDER_WOW:?}" || exit
        read -r -p "[YN] --recursive? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          RECURSIVE="--recursive"
          git clone "${GITHUB_CMANGOS:?}" "$RECURSIVE"
        else
          git clone "${GITHUB_CMANGOS:?}"
        fi
        echo "Done"
        sleep 1
      fi
    else
      # check for updates

      # CMaNGOS Core (mangos-core)
      printf '%b' "[ Checking for ${G0:?}+${R0:?}-${N0:?} Updates${N0:?} ] .. "
      echo
      echo
      cd "${FOLDER_CORE:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}" &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) ${G1:?}${UND:?}New Updates For Core${DEF:?}${N0:?}! $LATEST_DATE
${GR:?}(m) CMaNGOS > Compile latest${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d')
        LATEST_TIME=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "$OK_CORE (${G0:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) Core ${GR:?}$LATEST_DATE${N0:?} $LATEST_TIME"
        echo
      fi
    # check if mangos-core exist done
    fi

    # check if core-db exist
    FILE="$FOLDER_DB/README.md"
    if [ ! -f "$FILE" ] &>/dev/null; then
      # look for directory
      echo -ne '[!!] No Install Found!\r'
      sleep 2
      # remove old file
      rm /home/"$(whoami)"/wow/Installed_db_"${TYPE_CORE:?}" &>/dev/null
      # fresh install?
      DOWN_DB=$(echo -e "\033[5m?\033[0m" 2>&1)
      printf '%b' "[YN]${GR:?} ${N0:?}(${GR:?}${UND:?}0000000${DEF:?}${N0:?}) Data${GR:?} Download $DOWN_DB y/n ${N0:?}"
      read -t 4 -r -p "" -n 1 -r -s
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Cloning repository! Please wait this might take a while
(${G1:?}${GITHUB_DATABASE:?}${N0:?})\n"
        sudo mkdir "${FOLDER_WOW:?}" &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        cd "${FOLDER_WOW:?}" || exit
        git clone "${GITHUB_DATABASE:?}"
        cd "$FOLDER_DB" || exit
        ./InstallFullDB.sh
        printf '%b' "[${G1:?}OK${N0:?}] Done!\n"
        sleep 1
        # check if InstallFullDB.config exist
        FILE="$FOLDER_DB/InstallFullDB.config"
        if [ -z "$FILE" ] &>/dev/null; then
          cd "$FOLDER_DB" || exit
          ./InstallFullDB.sh
        fi
        # check if InstallFullDB.config exist done
      fi
      # restore InstallFullDB.config backup
      cp "${FOLDER_WOW:?}"/backup/configurations/InstallFullDB.config "$FOLDER_DB"/InstallFullDB.config &>/dev/null
    else

      # check for updates

      # check if core-db exist

      # Core Database (core-db)

      cd "${FOLDER_DB:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /home/"$(whoami)"/wow/Installed_db_"${TYPE_CORE:?}" &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) ${G1:?}${UND:?}New Updates For Database${DEF:?}${N0:?}! $LATEST_DATE
${GR:?}(d) Database > Update core-db${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d')
        LATEST_TIME=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "$OK_DB (${G0:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) Data ${GR:?}$LATEST_DATE${N0:?} $LATEST_TIME"
        echo
      fi
    # check if core-db exist done
    fi

    # check if cmangos-script exist
    FILE="$FOLDER_HELPER/README.md"
    if [ ! -f "$FILE" ] &>/dev/null; then
      # remove old file
      rm /home/"$(whoami)"/wow/Installed_ms &>/dev/null
      # fresh install?
      echo "Cloning repository 'cmangos-script' Please wait"
      sudo mkdir "$FOLDER_HELPER" &>/dev/null
      sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "$FOLDER_HELPER" &>/dev/null
      cd "$FOLDER_HELPER" || exit
      git clone "${GITHUB_HELPER:?}"
      echo "Done"
      sleep 1
    else
      # check for updates

      # CMaNGOS Helper

      cd "${FOLDER_HELPER:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /home/"$(whoami)"/wow/Installed_ms &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) ${G1:?}${UND:?}New Updates For Tool${DEF:?}${N0:?}! $LATEST_DATE
${GR:?}(w) Helper > Update Helper${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d')
        LATEST_TIME=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD 2>&1 | grep -Eo '[a0-z9]{7}' 2>&1 | head -1 2>&1)
        printf '%b' "$OK_MS (${G0:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) Tool ${GR:?}$LATEST_DATE${N0:?} $LATEST_TIME"
        echo
      fi
    # check if cmangos-script exist done
    fi
    echo
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # Checking for updates done

    # update CMaNGOS

  "m")

    # is dialog installed?
    if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
      sudo apt-get install dialog -y 2>&1
    fi
    # required 'packagelist' to build CMaNGOS
    # ubuntu server
    PACKAGELIST=(autoconf
      automake
      binutils
      build-essential
      checkinstall
      cmake
      g++
      gcc
      git
      git-core
      grep
      libboost-all-dev
      libbz2-dev
      libc6
      libmysql++-dev
      libssl-dev
      libtool
      make
      patch
      psmisc
      subversion
      unzip
      zip
      zlib1g-dev
      zlibc)

    HEIGHT=15
    WIDTH=38
    CHOICE_HEIGHT=8
    BACKTITLE="Update CMaNGOS"
    TITLE="Update mangos [core]"
    MENU="Choose one option:"

    OPTIONS=(1 "Compile latest build"
      2 "Install systemd unit files"
      3 "Reinstall (delete /build)"
      4 "Reset --hard origin/master"
      5 "Delete Core /mangos-core"
      6 "Backup configurations"
      7 "Disable systemd"
      8 "git checkout")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "8")

      # git checkout list
      cd "$FOLDER_CORE" || exit && git log -10 | egrep "commit [a0-z9]+" | egrep -v "https|cherry" | grep -oP '\b(\w{40})\b' >/var/log/ms/core_git.list

      function continue() {
        echo "[OK] Please update core (m)"
        printf '%b' "[OK] "
        read -r -p "Press Enter to continue" </dev/tty
      }

      HEIGHT=17
      WIDTH=52
      CHOICE_HEIGHT=10
      BACKTITLE="git checkout"
      TITLE="Switch core checkout"
      MENU="Choose checkout (commit):"

      OPTIONS=(1 "$(sed -n 1p /var/log/ms/core_git.list)"
      2 "$(sed -n 2p /var/log/ms/core_git.list)"
      3 "$(sed -n 3p /var/log/ms/core_git.list)"
      4 "$(sed -n 4p /var/log/ms/core_git.list)"
      5 "$(sed -n 5p /var/log/ms/core_git.list)"
      6 "$(sed -n 6p /var/log/ms/core_git.list)"
      7 "$(sed -n 7p /var/log/ms/core_git.list)"
      8 "$(sed -n 8p /var/log/ms/core_git.list)"
      9 "$(sed -n 9p /var/log/ms/core_git.list)"
      10 "$(sed -n 10p /var/log/ms/core_git.list)")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      "1")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 1p /var/log/ms/core_git.list)"
        continue

        ;;

      "2")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 2p /var/log/ms/core_git.list)"
        continue

        ;;

      "3")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 3p /var/log/ms/core_git.list)"
        continue

        ;;

      "4")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 4p /var/log/ms/core_git.list)"
        continue

        ;;

      "5")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 5p /var/log/ms/core_git.list)"
        continue

        ;;

      "6")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 6p /var/log/ms/core_git.list)"
        continue

        ;;

      "7")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 7p /var/log/ms/core_git.list)"
        continue

        ;;

      "8")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 8p /var/log/ms/core_git.list)"
        continue

        ;;

      "9")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 9p /var/log/ms/core_git.list)"
        continue

        ;;

      "10")

        cd "$FOLDER_CORE" || exit && git checkout "$(sed -n 10p /var/log/ms/core_git.list)"
        continue

        ;;

      esac

      ;;

      # compile latest build

    "1")

      read -t 5 -r -p "[YN] Compile latest build? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # count system cores
        SYS_CORES=$(grep -c ^processor /proc/cpuinfo 2>&1)
        # this is for docker users
        if [ -f /.dockerenv ] &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
          cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
        else
          # is packagelist@ installed?
          if ! [ -x "$(command -v "${PACKAGELIST[@]}")" ] &>/dev/null; then
            sudo apt-get install "${PACKAGELIST[@]}" -y 2>&1
          fi
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
        fi

        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run/logs &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run/logs/old &>/dev/null
        touch "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null
        cp "${FOLDER_CORE:?}"/run/logs/*.log "${FOLDER_CORE:?}"/run/logs/old
        # ahbot.conf
        cp "${FOLDER_CORE:?}"/src/game/AuctionHouseBot/ahbot.conf.dist.in "${FOLDER_CORE:?}"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "${FOLDER_CORE:?}"/run/logs || exit &>/dev/null
        mv -t "${FOLDER_CORE:?}"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        mkdir "${FOLDER_CORE:?}"/build &>/dev/null
        cd "${FOLDER_BUILD:?}" || exit

        if [[ "$DBUILD_AHBOT" -eq "1" ]] &>/dev/null; then
          DBUILD_AHBOT="ON"
        else
          DBUILD_AHBOT="OFF"
        fi
        if [[ "$DBUILD_EXTRACTORS" -eq "1" ]] &>/dev/null; then
          DBUILD_EXTRACTORS="ON"
        else
          DBUILD_EXTRACTORS="OFF"
        fi
        if [[ "$DBUILD_PLAYERBOT" -eq "1" ]] &>/dev/null; then
          DBUILD_PLAYERBOT="ON"
        else
          DBUILD_PLAYERBOT="OFF"
        fi

        CMAKE="-DCMAKE_INSTALL_PREFIX=/home/$(whoami)/wow/mangos-$TYPE_CORE/run
-DBUILD_EXTRACTORS=$DBUILD_EXTRACTORS
-DPCH=$DPCH
-DDEBUG=$DDEBUG
-DBUILD_AIPLAYERBOT=$DBUILD_AIPLAYERBOT
-DBUILD_PLAYERBOT=$DBUILD_PLAYERBOT
-DBUILD_AHBOT=$DBUILD_AHBOT
$DEXTRA"

        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        echo
        cmake .. ${CMAKE:?}
        cd "$FOLDER_BUILD" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>/dev/null)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>&1)
          CPU_FREQ=$(echo "@ ${CPU_FREQ:?}GHz")
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G0:?}${CPU_TEMP:?}°${N0:?}")
        else
          CMAKE_TEMP=$(printf '%b' "")
        fi

        # cpu model name
        KERNAL_RE=$(uname -r 2>&1)
        PROCESSOR=$(uname -p 2>&1)
        CPU_MODEL=$(lscpu 2>&1 | grep 'Model name' 2>&1 | cut -f 2 -d ":" 2>&1 | awk '{$1=$1}1' 2>&1)
        if [ ! -z "$CPU_MODEL" ] &>/dev/null; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL $CPU_FREQ ($PROCESSOR)${Y0:?}\n")
        else
          CPU_MODEL=""
        fi

        if [[ "${SYS_CORES:?}" -ge "1" ]] &>/dev/null; then
          # report count
          CORES_COUNT=$(printf '%b' "${GR:?}$KERNAL_RE${N0:?}
${N0:?}This system has ${G1:?}$SYS_CORES${N0:?} Core(s) !
${GR:?}$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        # system cpu core count
        if [[ "$SYS_CORES" -eq "1" ]] &>/dev/null; then
          SYS_CPU1="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU1=""
        fi
        if [[ "$SYS_CORES" -eq "2" ]] &>/dev/null; then
          SYS_CPU2="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU2=""
        fi
        if [[ "$SYS_CORES" -eq "3" ]] &>/dev/null; then
          SYS_CPU3="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU3=""
        fi
        if [[ "$SYS_CORES" -eq "4" ]] &>/dev/null; then
          SYS_CPU4="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU4=""
        fi
        if [[ "$SYS_CORES" -eq "8" ]] &>/dev/null; then
          SYS_CPU8="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU8=""
        fi
        if [[ "$SYS_CORES" -ge "8" ]] &>/dev/null; then
          SYS_CPU16="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU16=""
        fi
        if [[ "$SYS_CORES" -ge "16" ]] &>/dev/null; then
          SYS_CPU32="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU32=""
        fi
        if [[ "$SYS_CORES" -ge "32" ]] &>/dev/null; then
          SYS_CPU64="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU64=""
        fi
        if [[ "$SYS_CORES" -ge "64" ]] &>/dev/null; then
          SYS_CPU128="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU128=""
        fi

        # auto build, ruled by configuration
        if [[ "$AUTO_BUILD" -eq "1" ]] &>/dev/null; then
          if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
            MENU_CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
            MENU_CPU_TEMP=$(echo "${MENU_CPU_TEMP:?}c")
          else
            MENU_CPU_TEMP=""
          fi
          nproc 2>&1 >/var/log/ms/cpu_hw 2>&1
          CPU_PROC=$(cat /var/log/ms/cpu_hw 2>&1)
          lscpu 2>&1 | grep -E '^Thread|^Core|^Socket|^CPU\(' >/var/log/ms/cpu_hw 2>&1
          CPU_TCSC=$(cat /var/log/ms/cpu_hw 2>&1)
          echo "-- Core $SERVER_BUILD"
          echo "-- CPU ($CPU_PROC)"
          echo
          echo "System CPU"
          echo "$CPU_TCSC"
          echo
          printf '%b' "[  0%]${Y1:?} Auto detecting Core(s)${N0:?}\n"
          printf '%b' "[  0%]${N0:?} $CPU_MODEL${N0:?} $MENU_CPU_TEMP\n"
          printf '%b' "[  0%]${G1:?} Building with ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
          cd "$FOLDER_BUILD" || exit
          CORES_BUILD=$(echo "$SYS_CORES")
          # start counting (seconds)
          START="$SECONDS"
          make -j"$SYS_CORES" # max system cores
          sudo make install 2>&1 | sudo tee /var/log/ms/build &>/dev/null
          cat /var/log/ms/build 2>&1
          if grep -q -o "100" /var/log/ms/build &>/dev/null; then
            # cpu temp
            if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
              MENU_CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 |
                cut -c -4 2>&1)
              MENU_PRINT_CPU_TEMP=$(printf '%b' "CPU Temp${G0:?}..:${N0:?} ${MENU_CPU_TEMP:?}c")
            else
              MENU_PRINT_CPU_TEMP=$(lscpu 2>&1 | grep 'Model name' 2>&1 | cut -f 2 -d ":" 2>&1 | awk '{$1=$1}1' 2>&1 | grep -Eo "@.*" 2>&1 | tr -d '@' 2>&1 | tr -d ' ' 2>&1)
              MENU_PRINT_CPU_TEMP="CPU Freq${G0:?}..:${N0:?} $MENU_PRINT_CPU_TEMP"
            fi
            # seconds since start
            DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
            # convert seconds
            TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
            echo
            printf '%b' "$MENU_PRINT_CPU_TEMP\n"
            printf '%b' "Build time: ${G1:?}$TIMER${N0:?} with ${G1:?}$CORES_BUILD${N0:?} Core(s)\n"

            if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
              # create ms folder
              sudo mkdir /var/log/ms/ &>/dev/null
              # fix ownership
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
            fi

            # create installed mark
            cd "${FOLDER_CORE:?}" || exit
            LATEST_HEAD=$(git rev-parse --short HEAD)
            echo "Core was installed at ${NOW:?} Head: $LATEST_HEAD" >/home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}"
            BUILD_BUTTON="${G1:?}OK${N0:?}"
          else
            echo
            printf '%b' "${R1:?}Something went wrong!${N0:?}\n"
            # seconds since start
            DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
            # convert seconds
            TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
            echo
            printf '%b' "Build time: ${R1:?}$TIMER${N0:?} with ${R1:?}$CORES_BUILD${N0:?} Core(s)\n"
            # remove old file
            rm /home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}" &>/dev/null
            BUILD_BUTTON="${R1:?}!!${N0:?}"
          fi
        else

          printf '%b' "-- Core $SERVER_BUILD

$CORES_COUNT $CMAKE_TEMP

Compiling using multiple cores:

 c ${GR:?}:${N0:?} Custom
 1 ${GR:?}:${N0:?} 1 Core $SYS_CPU1
 2 ${GR:?}:${N0:?} 2 Cores $SYS_CPU2
 3 ${GR:?}:${N0:?} 3 Cores $SYS_CPU3
 4 ${GR:?}:${N0:?} 4 Cores $SYS_CPU4
 8 ${GR:?}:${N0:?} 8 Cores $SYS_CPU8
 h ${GR:?}:${N0:?} 16 Cores $SYS_CPU16
 w ${GR:?}:${N0:?} 32 Cores $SYS_CPU32
 t ${GR:?}:${N0:?} 64 Cores $SYS_CPU64
 H ${GR:?}:${N0:?} 128 Cores $SYS_CPU128

 q ${GR:?}:${N0:?} Quit
\n"

          read -r -n1 -s
          case "$REPLY" in

          # force build, use at your own risk!

          "F")

            printf '%b' "${R1:?}[  0%] USE AT YOUR OWN RISK${Y1:?} !\n"
            printf '%b' "${Y1:?}[  0%] ENTER CORE AMOUNT: ${Y1:?}"
            read -r NOLIMIT
            if [ -z "$NOLIMIT" ] &>/dev/null; then
              # run 1 if empty
              NOLIMIT="1"
            fi
            CORES=("$NOLIMIT")
            printf '%b' "${R1:?}[  0%] BUILDING WITH ${Y1:?}${CORES[0]} ${R1:?}CORE(S) ${Y1:?}!${N0:?}\n"
            CORES_BUILD=$(echo "$NOLIMIT")
            # start counting (seconds)
            START="$SECONDS"
            echo "[  0%] Build target with $NOLIMIT Core(s), Good luck!"
            make -j"$NOLIMIT" # custom n cores

            ;;

          "c")

            printf '%b' "${GR:?}[  0%] Enter amount of Core(s): ${N0:?}"
            read -r CUSTOM
            if [[ ! "${CUSTOM:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              CORES=("$CUSTOM")
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$CUSTOM")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$CUSTOM" # custom n cores
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "1")

            CORES=("1")
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            # start counting (seconds)
            START="$SECONDS"
            make # 1 core

            ;;

          "2")

            CORES=("2")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j2 # 2 cores
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "3")

            CORES=("3")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j3 # 3 cores
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "4")

            CORES=("4")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j4 # 4 cores
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "8")

            CORES=("8")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j8 # 8 cores
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "h")

            CORES=("16")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j16 # 16 cores, h1gh-
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "w")

            CORES=("32")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j32 # 32 cores, -w@y
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "t")

            CORES=("64")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j64 # 64 cores, t0
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "H")

            CORES=("128")
            if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
              printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "${CORES:?}")
              # start counting (seconds)
              START="$SECONDS"
              make -j128 # 128 cores, h3ll
            else
              # exceeding cores! using max amount of cores found instead
              printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
              sleep 1
              printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
              CORES_BUILD=$(echo "$SYS_CORES")
              # start counting (seconds)
              START="$SECONDS"
              make -j"$SYS_CORES" # max system cores
            fi

            ;;

          "q") exit ;;
          "Q") echo "case sensitive!!" ;;
          *)
            echo "Invalid option. Restart please.."
            exit
            ;;

          esac

          # compiling using multiple cores done

          # cpu temp
          if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
            CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
            CMAKE_TEMP=$(printf '%b' "CPU: ${G1:?}$CPU_TEMP${N0:?}°")
          else
            CMAKE_TEMP=""
          fi
          # seconds since start
          DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
          # convert seconds
          TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
          echo
          printf '%b' "$CMAKE_TEMP
Build time: ${G1:?}$TIMER${N0:?} with ${G1:?}${CORES_BUILD[0]}${N0:?} Core(s)${N0:?}

Select install operation"
          echo
          echo " 1) make install"
          echo " 2) checkinstall with backup"
          echo
          read -r n
          case $n in

          "1")

            if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
              # create ms folder
              sudo mkdir /var/log/ms/ &>/dev/null
              # fix ownership
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
            fi

            # create installed mark
            cd "${FOLDER_CORE:?}" || exit
            LATEST_HEAD=$(git rev-parse --short HEAD)
            echo "Core was installed at ${NOW:?} Head: $LATEST_HEAD" >/home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}"
            echo "make install"
            cd "$FOLDER_BUILD" || exit
            sudo make install 2>&1 | sudo tee /var/log/ms/build &>/dev/null
            cat /var/log/ms/build 2>&1

            ;;

          "2")

            if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
              # create ms folder
              sudo mkdir /var/log/ms/ &>/dev/null
              # fix ownership
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
            fi

            # create installed mark
            cd "${FOLDER_CORE:?}" || exit
            LATEST_HEAD=$(git rev-parse --short HEAD)
            echo "Core was installed at ${NOW:?} Head: $LATEST_HEAD with backup" >/home/"$(whoami)"/wow/Installed_core_"${TYPE_CORE:?}"
            echo "checkinstall"
            cd "$FOLDER_BUILD" || exit
            sudo checkinstall 2>&1 | sudo tee /var/log/ms/build &>/dev/null
            cat /var/log/ms/build 2>&1

            ;;

          *)
            echo "invalid option"

            ;;

          esac
        fi

        if grep -q -o "100" /var/log/ms/build &>/dev/null; then
          BUILD_BUTTON="${G1:?}OK${N0:?}"
        else
          BUILD_BUTTON="${R1:?}!!${N0:?}"
        fi

        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        echo
        printf '%b' "[$BUILD_BUTTON] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # compile latest build done

      # install systemd Services
      # ubuntu

    "2")

      read -t 5 -r -p "[YN] Install systemd Services? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # server type, change enabled services
        if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "c|C|v|V|classic|Classic|vanilla|Vanilla" &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] Enable $SERVER_BUILD Service\n"
          # enable classic
          sudo systemctl enable classic_mangosd.service &>/dev/null
          sudo systemctl enable classic_realmd.service &>/dev/null
          printf '%b' "[${R1:?}!!${N0:?}] Disable TBC Service\n"
          # disable tbc
          sudo systemctl disable tbc_mangosd.service &>/dev/null
          sudo systemctl disable tbc_realmd.service &>/dev/null
          printf '%b' "[${R1:?}!!${N0:?}] Disable WoTLK Service\n"
          # disable wotlk
          sudo systemctl disable tbc_mangosd.service &>/dev/null
          sudo systemctl disable tbc_realmd.service &>/dev/null
        fi
        if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "t|T|tbc|TBC" &>/dev/null; then
          printf '%b' "[${R1:?}!!${N0:?}] Disable Classic Service\n"
          # disable classic service
          sudo systemctl disable classic_mangosd.service &>/dev/null
          sudo systemctl disable classic_realmd.service &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Enable $SERVER_BUILD Service\n"
          # enable tbc service
          sudo systemctl enable tbc_mangosd.service &>/dev/null
          sudo systemctl enable tbc_realmd.service &>/dev/null
          printf '%b' "[${R1:?}!!${N0:?}] Disable WoTLK Service\n"
          # disable wotlk service
          sudo systemctl disable wotlk_mangosd.service &>/dev/null
          sudo systemctl disable wotlk_realmd.service &>/dev/null
        fi
        if echo "${SERVER_TYPE:?}" 2>&1 | grep -q -E "w|W|wotlk|WoTLK" &>/dev/null; then
          printf '%b' "[${R1:?}!!${N0:?}] Disable Classic Service\n"
          # disable classic service
          sudo systemctl disable classic_mangosd.service &>/dev/null
          sudo systemctl disable classic_realmd.service &>/dev/null
          printf '%b' "[${R1:?}!!${N0:?}] Disable TBC Service\n"
          # disable tbc service
          sudo systemctl disable tbc_mangosd.service &>/dev/null
          sudo systemctl disable tbc_realmd.service &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Enable $SERVER_BUILD Service\n"
          # enable wotlk service
          sudo systemctl enable wotlk_mangosd.service &>/dev/null
          sudo systemctl enable wotlk_realmd.service &>/dev/null
        fi
        # remove old files (old hierarchy), regardless
        sudo systemctl disable mangosd.service &>/dev/null
        sudo systemctl disable realmd.service &>/dev/null
        sudo rm /etc/systemd/system/mangosd.service &>/dev/null
        sudo rm /etc/systemd/system/realmd.service &>/dev/null
        # this user
        USER=$(whoami)
        # /etc/systemd/system/realmd.service
        echo "[Unit]
Description=WoW $TYPE_CORE realmd service
After=network.target mysql.service

[Service]
Type=simple
User=$USER
ExecStart=${FOLDER_CORE:?}/run/bin/realmd -c ${FOLDER_CORE:?}/run/etc/realmd.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"${FOLDER_WOW:?}"/"$TYPE_CORE"_realmd.service 2>&1
        # /etc/systemd/system/mangosd.service
        echo "[Unit]
Description=WoW $SERVER_TYPE mangosd service
After=network.target mysql.service ${TYPE_CORE:?}_realmd.service getty@tty3.service

[Service]
Type=simple
User=$USER
StandardInput=tty
TTYPath=/dev/tty3
TTYRESET=yes
TTYVHangup=yes
WorkingDirectory=${FOLDER_CORE:?}/run/bin
ExecStart=${FOLDER_CORE:?}/run/bin/mangosd -c ${FOLDER_CORE:?}/run/etc/mangosd.conf -a ${FOLDER_CORE:?}/run/etc/ahbot.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"${FOLDER_WOW:?}"/"$TYPE_CORE"_mangosd.service 2>&1
        # install services
        sudo mv "${FOLDER_WOW:?}"/*.service /etc/systemd/system/ &>/dev/null
        # enable services
        sudo systemctl enable "$TYPE_CORE"_realmd
        sleep 1
        sudo systemctl enable "$TYPE_CORE"_mangosd
        # reload
        sudo systemctl daemon-reload 2>&1
        sleep 1
        printf '%b' "
/etc/systemd/system/${THEME_ALL:?}${TYPE_CORE:?}_realmd.service${N0:?}
/etc/systemd/system/${THEME_ALL:?}${TYPE_CORE:?}_mangosd.service${N0:?}

Check if correct information, or just restart server.\n"
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # install systemd Services done

      # reinstall (delete /build)

    "3")

      read -t 5 -r -p "[YN] Reinstall (delete /build)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # count system cores
        SYS_CORES=$(grep -c ^processor /proc/cpuinfo 2>&1)
        # this is for docker users
        if [ -f /.dockerenv ] &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
          cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
        else
          # is packagelist@ installed?
          if ! [ -x "$(command -v "${PACKAGELIST[@]}")" ] &>/dev/null; then
            sudo apt-get install "${PACKAGELIST[@]}" -y 2>&1
          fi
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
        fi

        cd || exit
        sudo mkdir wow &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        sudo rm -r "${FOLDER_CORE:?}"/build/ &>/dev/null
        cd "${FOLDER_WOW:?}" || exit
        git clone "$GITHUB_CMANGOS" 2>&1
        sudo mkdir "${FOLDER_CORE:?}"/build &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run/logs &>/dev/null
        mkdir "${FOLDER_CORE:?}"/run/logs/old &>/dev/null
        touch "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null
        cp "${FOLDER_CORE:?}"/run/logs/*.log "${FOLDER_CORE:?}"/run/logs/old
        # ahbot.conf
        cp "${FOLDER_CORE:?}"/src/game/AuctionHouseBot/ahbot.conf.dist.in "${FOLDER_CORE:?}"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "${FOLDER_CORE:?}"/run/logs || exit &>/dev/null
        mv -t "${FOLDER_CORE:?}"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        mkdir "${FOLDER_CORE:?}"/build &>/dev/null
        cd "${FOLDER_BUILD:?}" || exit
        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        echo
        cmake .. ${CMAKE:?}
        cd "$FOLDER_BUILD" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>&1)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>&1)
          CPU_FREQ=$(echo "@ ${CPU_FREQ:?}GHz")
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G0:?}${CPU_TEMP:?}°${N0:?}")
        else
          CMAKE_TEMP=$(printf '%b' "")
        fi

        # cpu model name
        KERNAL_RE=$(uname -r 2>&1)
        PROCESSOR=$(uname -p 2>&1)
        CPU_MODEL=$(lscpu 2>&1 | grep 'Model name' 2>&1 | cut -f 2 -d ":" 2>&1 | awk '{$1=$1}1' 2>&1)
        if [ ! -z "$CPU_MODEL" ] &>/dev/null; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL $CPU_FREQ ($PROCESSOR)${N0:?}\n")
        else
          CPU_MODEL=""
        fi

        if [[ "${SYS_CORES:?}" -ge "1" ]] &>/dev/null; then
          # report count
          CORES_COUNT=$(printf '%b' "${GR:?}$KERNAL_RE${N0:?}
${N0:?}This system has ${G1:?}$SYS_CORES${N0:?} Core(s) !
${GR:?}$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        # system cpu core count
        if [[ "$SYS_CORES" -eq "1" ]] &>/dev/null; then
          SYS_CPU1="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU1=""
        fi
        if [[ "$SYS_CORES" -eq "2" ]] &>/dev/null; then
          SYS_CPU2="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU2=""
        fi
        if [[ "$SYS_CORES" -eq "3" ]] &>/dev/null; then
          SYS_CPU3="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU3=""
        fi
        if [[ "$SYS_CORES" -eq "4" ]] &>/dev/null; then
          SYS_CPU4="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU4=""
        fi
        if [[ "$SYS_CORES" -eq "8" ]] &>/dev/null; then
          SYS_CPU8="${GR:?}<--${G1:?} System CPU${N0:?}"
        else
          SYS_CPU8=""
        fi
        if [[ "$SYS_CORES" -ge "8" ]] &>/dev/null; then
          SYS_CPU16="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU16=""
        fi
        if [[ "$SYS_CORES" -ge "16" ]] &>/dev/null; then
          SYS_CPU32="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU32=""
        fi
        if [[ "$SYS_CORES" -ge "32" ]] &>/dev/null; then
          SYS_CPU64="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU64=""
        fi
        if [[ "$SYS_CORES" -ge "64" ]] &>/dev/null; then
          SYS_CPU128="${GR:?}<--${G1:?} System CPU${GR:?} ($SYS_CORES)"
        else
          SYS_CPU128=""
        fi

        printf '%b' "-- Core $SERVER_BUILD

$CORES_COUNT $CMAKE_TEMP

Compiling using multiple cores:

 c ${GR:?}:${N0:?} Custom
 1 ${GR:?}:${N0:?} 1 Core $SYS_CPU1
 2 ${GR:?}:${N0:?} 2 Cores $SYS_CPU2
 3 ${GR:?}:${N0:?} 3 Cores $SYS_CPU3
 4 ${GR:?}:${N0:?} 4 Cores $SYS_CPU4
 8 ${GR:?}:${N0:?} 8 Cores $SYS_CPU8
 h ${GR:?}:${N0:?} 16 Cores $SYS_CPU16
 w ${GR:?}:${N0:?} 32 Cores $SYS_CPU32
 t ${GR:?}:${N0:?} 64 Cores $SYS_CPU64
 H ${GR:?}:${N0:?} 128 Cores $SYS_CPU128

 q ${GR:?}:${N0:?} Quit
\n"

        read -r -n1 -s
        case "$REPLY" in

        "c")

          printf '%b' "${GR:?}[  0%] Enter amount of Core(s): ${N0:?}"
          read -r CUSTOM
          if [[ ! "${CUSTOM:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            CORES=("$CUSTOM")
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$CUSTOM")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$CUSTOM" # custom n cores
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "1")

          CORES=("1")
          printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make # 1 core

          ;;

        "2")

          CORES=("2")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j2 # 2 cores
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "3")

          CORES=("3")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j3 # 3 cores
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "4")

          CORES=("4")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j4 # 4 cores
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "8")

          CORES=("8")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j8 # 8 cores
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CORES:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "h")

          CORES=("16")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j16 # 16 cores, h1gh-
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "w")

          CORES=("32")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j32 # 32 cores, -w@y
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "t")

          CORES=("64")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j64 # 64 cores, t0
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "H")

          CORES=("128")
          if [[ ! "${CORES:?}" -gt "$SYS_CORES" ]] &>/dev/null; then
            printf '%b' "[  0%]${G0:?} Building with ${N0:?}${CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "${CORES:?}")
            # start counting (seconds)
            START="$SECONDS"
            make -j128 # 128 cores, h3ll
          else
            # exceeding cores! using max amount of cores found instead
            printf '%b' "${Y1:?}[  0%] Unable to find ${N0:?}${CUSTOM:?}${Y1:?} Cores on this system!${N0:?}\n"
            sleep 1
            printf '%b' "[  0%]${G0:?} Building with max ${N0:?}${SYS_CORES[0]}${G0:?} Core(s)${N0:?}\n"
            CORES_BUILD=$(echo "$SYS_CORES")
            # start counting (seconds)
            START="$SECONDS"
            make -j"$SYS_CORES" # max system cores
          fi

          ;;

        "q") exit ;;
        "Q") echo "case sensitive!!" ;;
        *)
          echo "Invalid option. Restart please.."
          exit
          ;;

        esac

        # compiling using multiple cores done

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>&1 | cut -c -4 2>&1)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G1:?}$CPU_TEMP${N0:?}°")
        else
          CMAKE_TEMP=""
        fi
        # seconds since start
        DURATION=$(echo "$SECONDS-$START" 2>&1 | bc 2>&1)
        # convert seconds
        TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
        echo
        printf '%b' "$CMAKE_TEMP
Build time: ${G1:?}$TIMER${N0:?} with ${G1:?}${CORES_BUILD[0]}${N0:?} Core(s)${N0:?}

Select install operation"
        echo
        echo " 1) make install"
        echo " 2) checkinstall with backup"
        echo
        read -r n
        case $n in

        "1")
          echo "make install"

          cd "$FOLDER_BUILD" || exit
          sudo make install

          ;;

        "2")
          echo "checkinstall"

          cd "$FOLDER_BUILD" || exit
          sudo checkinstall

          ;;

        *)
          echo "invalid option"

          ;;

        esac

        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        echo
        printf '%b' "[${G1:?}OK${N0:?}] Press Enter to continue"
        read -r -p "" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /build) done

      # reset --hard origin/master?

    "4")

      read -t 5 -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        cd "${FOLDER_CORE:?}" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # delete core directory (everything)

    "5")

      printf '%b' "${GR:?}Deleting Core! ${FOLDER_CORE:?}${N0:?}\n"
      read -r -p "[YN] Backup configurations first? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo mkdir "${FOLDER_WOW:?}"/backup 2>&1
        sudo mkdir "${FOLDER_WOW:?}"/backup/configurations 2>&1
        sudo cp -R "${FOLDER_CORE:?}"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>&1
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
      fi
      read -r -p "[YN] Delete Core Directory? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo cp -R "${FOLDER_CORE:?}"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>&1
        sudo rm -R "${FOLDER_CORE:?}" &>/dev/null
      fi

      ;;

      # delete core directory (everything) done

      # backup configurations

    "6")

      sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
      sudo cp -R "${FOLDER_CORE:?}"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>&1

      ;;

      # backup configurations done

      # disable current service

    "7")

      printf '%b' "[${R1:?}!!${N0:?}] Disable $SERVER_BUILD Service\n"
      sleep 1
      sudo systemctl disable "$TYPE_CORE"_mangosd.service &>/dev/null
      sudo systemctl disable "$TYPE_CORE"_realmd.service &>/dev/null
      sleep 1
      printf '%b' "
/etc/systemd/system/${THEME_ALL:?}${TYPE_CORE:?}_realmd.service${N0:?}
/etc/systemd/system/${THEME_ALL:?}${TYPE_CORE:?}_mangosd.service${N0:?}

$SERVER_BUILD Disabled.\n"
      echo
      printf '%b' "[${G1:?}OK${N0:?}] "
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # disable current service done

    esac

    # update CMaNGOS done

    # update Database

    ;;

  "d")

    # is dialog installed?
    if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
      sudo apt-get install dialog -y 2>&1
    fi

    HEIGHT=21
    WIDTH=42
    CHOICE_HEIGHT=14
    BACKTITLE="Update Database"
    TITLE="Update core-db [database]"
    MENU="Choose one option:"

    OPTIONS=(1 "Update core-db"
      2 "Drop/Import databases"
      3 "myisam -> innodb (MariaDB)"
      4 "Reinstall (delete /core-db)"
      5 "Reset --hard origin/master"
      6 "Restart MySQL Server (service)"
      7 "Stop MySQL Server (service)"
      8 "Enable/Disable MySQL Server"
      9 "Apply all updates [A]-[B]"
      10 "Install database client"
      11 "Install database system"
      12 "DB Updates list"
      13 "Delete /core-db"
      14 "git checkout")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "14")

      # git checkout list
      cd "$FOLDER_DB" || exit && git log -10 | egrep "commit [a0-z9]+" | egrep -v "https|cherry" | grep -oP '\b(\w{40})\b' >/var/log/ms/db_git.list

      function continue() {
        echo "[OK] Please update database (c)"
        printf '%b' "[OK] "
        read -r -p "Press Enter to continue" </dev/tty
      }

      HEIGHT=17
      WIDTH=52
      CHOICE_HEIGHT=10
      BACKTITLE="git checkout"
      TITLE="Switch database checkout"
      MENU="Choose checkout (commit):"

      OPTIONS=(1 "$(sed -n 1p /var/log/ms/db_git.list)"
      2 "$(sed -n 2p /var/log/ms/db_git.list)"
      3 "$(sed -n 3p /var/log/ms/db_git.list)"
      4 "$(sed -n 4p /var/log/ms/db_git.list)"
      5 "$(sed -n 5p /var/log/ms/db_git.list)"
      6 "$(sed -n 6p /var/log/ms/db_git.list)"
      7 "$(sed -n 7p /var/log/ms/db_git.list)"
      8 "$(sed -n 8p /var/log/ms/db_git.list)"
      9 "$(sed -n 9p /var/log/ms/db_git.list)"
      10 "$(sed -n 10p /var/log/ms/db_git.list)")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      "1")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 1p /var/log/ms/db_git.list)"
        continue

        ;;

      "2")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 2p /var/log/ms/db_git.list)"
        continue

        ;;

      "3")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 3p /var/log/ms/db_git.list)"
        continue

        ;;

      "4")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 4p /var/log/ms/db_git.list)"
        continue

        ;;

      "5")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 5p /var/log/ms/db_git.list)"
        continue

        ;;

      "6")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 6p /var/log/ms/db_git.list)"
        continue

        ;;

      "7")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 7p /var/log/ms/db_git.list)"
        continue

        ;;

      "8")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 8p /var/log/ms/db_git.list)"
        continue

        ;;

      "9")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 9p /var/log/ms/db_git.list)"
        continue

        ;;

      "10")

        cd "$FOLDER_DB" || exit && git checkout "$(sed -n 10p /var/log/ms/db_git.list)"
        continue

        ;;

      esac

      ;;

      # delete database directory (everything)

    "12")

      # updates, instances count
      U_UPDATE_COUNT="$(ls -l "$FOLDER_DB"/Updates | awk '{ print $6,$7,$8,$9 }' | egrep "*.sql" | wc -l)"
      INSTANCES_UPDATE_COUNT="$(ls -l "$FOLDER_DB"/Updates/Instances | awk '{ print $6,$7,$8,$9 }' | egrep "*.sql" | wc -l)"

      # database updates list
      display_result() {
        dialog --title "${TYPE_CORE:?}-db -> Updates +$U_UPDATE_COUNT" \
          --no-collapse \
          --msgbox "$RESULT" 30 0
      }
      RESULT="$(ls -l "$FOLDER_DB"/Updates | awk '{ print $6,$7,$8,$9 }' | egrep "*.sql" | tac)"
      display_result 2>/dev/null

      # database updates/instances list
      display_result() {
        dialog --title "${TYPE_CORE:?}-db -> Instances +$INSTANCES_UPDATE_COUNT" \
          --no-collapse \
          --msgbox "$RESULT" 30 0
      }
      RESULT="$(ls -l "$FOLDER_DB"/Updates/Instances | awk '{ print $6,$7,$8,$9 }' | egrep "*.sql")"
      display_result 2>/dev/null

      ;;

    "13")

      printf '%b' "${GR:?}Deleting Database! $FOLDER_DB${N0:?}\n"
      read -t 5 -r -p "[YN] Delete Database Directory? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        # create backup directory
        cd "${FOLDER_WOW:?}" || exit
        sudo mkdir backup &>/dev/null
        # create configurations directory
        cd "${FOLDER_WOW:?}"/backup || exit
        sudo mkdir configurations &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        cd || exit
        cp "$FOLDER_DB"/InstallFullDB.config "${FOLDER_WOW:?}"/backup/configurations &>/dev/null
        cp "${FOLDER_CORE:?}"/run/etc/*.conf "${FOLDER_WOW:?}"/backup/configurations &>/dev/null
        sudo rm -R "$FOLDER_DB" &>/dev/null
      fi

      ;;

      # delete database directory (everything) done

      # install database system

    "11")

      # check if mangos user exist
      # mariadb
      PACKAGELIST_MARIA=(mariadb-client
        mariadb-server)
      # mysql
      PACKAGELIST_MYSQL=(mysql-client
        mysql-server)
      echo
      printf '%b' "MariaDB, MySQL - Database system"
      echo
      echo " 1) MariaDB"
      echo " 2) MySQL"
      echo
      read -r -n1 -s n
      echo "[!!] Please wait"
      case $n in

      "1") # install mariadb

        sudo apt-get install "${PACKAGELIST_MARIA[@]}" -y
        sudo service mariadb stop &>/dev/null
        sudo service mariadb start &>/dev/null

        ;;

      "2") # install mysql

        sudo apt-get install "${PACKAGELIST_MYSQL[@]}" -y
        sudo service mysql stop &>/dev/null
        sudo service mysql start &>/dev/null

        ;;

      "*") ;;

      esac

      ;;

      # install database system done

      # install database client

    "10")

      # mariadb-client
      PACKAGELIST_CLIENT_MARIA=(mariadb-client*)
      # mysql-client
      PACKAGELIST_CLIENT_MYSQL=(mysql-client*)

      echo
      printf '%b' "MariaDB, MySQL - Database Client
This is needed to operate local/remote database"
      echo
      echo
      echo " 1 : MariaDB-Client"
      echo " 2 : MySQL-Client"
      echo " q : Quit"
      echo
      read -r -n1 -s n
      echo "[!!] Please wait"
      case $n in

      "1") # install mariadb-client

        sudo apt-get install "${PACKAGELIST_CLIENT_MARIA[@]}" -y

        ;;

      "2") # install mysql-client

        sudo apt-get install "${PACKAGELIST_CLIENT_MYSQL[@]}" -y

        ;;

      "q")
        return

        ;;

      "*")
        exit

        ;;

      esac

      ;;

      # install database client done

      # update core-db

    "1")

      function install_mark_db() {
        # create installed mark
        cd "$FOLDER_DB" || exit
        LATEST_HEAD=$(git rev-parse --short HEAD)
        echo "Database was installed at ${NOW:?} Head: $LATEST_HEAD" >/home/"$(whoami)"/wow/Installed_db_"${TYPE_CORE:?}"
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      }

      function shutdown_server() {
        echo "[!!] Please wait"
        # this is for docker users
        if [ -f /.dockerenv ] &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
          cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
        else
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
        fi
      }

      # checking depends

      # mysql
      if sudo dpkg -s mysql-server &>/dev/null; then
        MYSQL_SERVER_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_SERVER_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mysql-client
      if sudo dpkg -s mysql-client &>/dev/null; then
        MYSQL_CLIENT_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_CLIENT_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mariadb
      if sudo dpkg -s mariadb-server &>/dev/null; then
        MARIADB_SERVER_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MARIADB_SERVER_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mariadb-client
      if sudo dpkg -s mariadb-client &>/dev/null; then
        MARIADB_CLIENT_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MARIADB_CLIENT_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      MYSQL_USER=$(sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = 'mangos')" 2>&1)
      if [ "$MYSQL_USER" = 1 ] &>/dev/null; then
        MYSQL_USER=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_USER=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      echo
      echo "$MYSQL_SERVER_INSTALLED - mysql-server
$MYSQL_CLIENT_INSTALLED - mysql-client
$MARIADB_SERVER_INSTALLED - mariadb-server
$MARIADB_CLIENT_INSTALLED - mariadb-client
$MYSQL_USER - database user 'mangos'

Database User, Client/Server is needed."
      echo

      read -r -p "[YN] InstallFullDB.sh? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        shutdown_server
        cd "$FOLDER_DB" || exit
        ./InstallFullDB.sh
        install_mark_db
      else

        # checking depends done

        read -r -p "[YN] Continue? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          read -t 5 -r -p "[YN] Restart localhost SQL Server? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            echo "[!!] Restarting service!"
            # restart mysql service, if it exists
            if sudo service mysql status 2>&1 | grep -E 'mysql'; then
              echo "[!!] No database system found"
              echo "[!!] Please install mysql or mariadb database/client"
              exit
            else
              sudo service mysql stop &>/dev/null
              sudo service mysql restart &>/dev/null
            fi
            # restart mariadb service, if it exists
            if sudo service mariadb status 2>&1 | grep -E 'mariadb'; then
              echo "[!!] No database system found"
              echo "[!!] Please install mysql or mariadb database/client"
              exit
            else
              sudo service mariadb stop &>/dev/null
              sudo service mariadb restart &>/dev/null
            fi
          fi
          shutdown_server

          sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null

          # backup
          mkdir "${FOLDER_WOW:?}"/backup &>/dev/null
          mkdir "${FOLDER_WOW:?}"/backup/old &>/dev/null
          cp "${FOLDER_WOW:?}"/backup/*.sql "${FOLDER_WOW:?}"/backup/old &>/dev/null
          cd "${FOLDER_WOW:?}"/backup/old/ || exit
          zip "$SERVER_NAME.zip" "${FOLDER_WOW:?}"/backup/*.sql &>/dev/null
          find "${FOLDER_WOW:?}"/backup/*.sql -mtime +7 -exec rm {} \; &>/dev/null
          find "${FOLDER_WOW:?}"/backup/old/*.sql -mtime +14 -exec rm {} \; &>/dev/null
          sleep 1
          # backup <- characters.sql
          echo
          FILE="${FOLDER_WOW:?}/backup/$DB_CHARACTERS-${NOW:?}.sql"
          if [ ! -f "$FILE" ] &>/dev/null; then
            printf '%b' "[!!] '${G1:?}Characters${N0:?}' Creating backup!"
            mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "$DB_CHARACTERS" >"${FOLDER_WOW:?}"/backup/"$DB_CHARACTERS"-"${NOW:?}".sql
            echo
          else
            printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-${NOW:?}.sql exist"
            echo
            read -t 5 -r -p "[YN] New backup? ($DB_CHARACTERS) y/n " -n 1 -r
            if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
              # backup characters sql
              echo
              printf '%b' "[${Y1:?}ok${N0:?}] Making fresh backup${G0:?}.${N0:?}"
              sleep 1
              printf '%b' "${G0:?}.${N0:?}"
              mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "$DB_CHARACTERS" >"${FOLDER_WOW:?}"/backup/"$DB_CHARACTERS"-"${NOW:?}".sql
              printf '%b' "${G0:?}.${N0:?}\n"
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}$DB_CHARACTERS-${NOW:?}.sql${N0:?}"
              sleep 2
            fi
          fi
          echo
          # backup <- realmd.sql
          FILE="${FOLDER_WOW:?}/backup/${DB_REALMD:?}-${NOW:?}.sql"
          if [ ! -f "$FILE" ] &>/dev/null; then
            printf '%b' "[!!] '${G1:?}Realmd${N0:?}' Creating backup!"
            mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "${DB_REALMD:?}" >"${FOLDER_WOW:?}"/backup/"${DB_REALMD:?}"-"${NOW:?}".sql
            echo
          else
            printf '%b' "[${G1:?}OK${N0:?}] ${DB_REALMD:?}-${NOW:?}.sql exist"
            echo
            read -t 5 -r -p "[YN] New backup? (${DB_REALMD:?}) y/n " -n 1 -r
            if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
              # backup characters sql
              echo
              printf '%b' "[${Y1:?}ok${N0:?}] Making fresh backup${G0:?}.${N0:?}"
              sleep 1
              printf '%b' "${G0:?}.${N0:?}"
              mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "${DB_REALMD:?}" >"${FOLDER_WOW:?}"/backup/"${DB_REALMD:?}"-"${NOW:?}".sql
              printf '%b' "${G0:?}.${N0:?}\n"
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${DB_REALMD:?}-${NOW:?}.sql${N0:?}\n"
              sleep 1
            fi
          fi
          # InstallFullDB?
          echo
          printf '%b' "[CD] $SERVER_BUILD\n"
          read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            if [ ! -z "$(ls -A "$FOLDER_DB" 2>&1)" ] &>/dev/null; then
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
              cd "$FOLDER_DB" || exit
              ./InstallFullDB.sh
            else
              printf '%b' "[!!] ${GR:?}$FOLDER_DB${N0:?} Not Found!\n"
            fi

            if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
              # create ms folder
              sudo mkdir /var/log/ms/ &>/dev/null
              # fix ownership
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
            fi
          fi
          printf '%b' "${GR:?}Please wait${N0:?}\n"
        fi
        install_mark_db
      fi

      ;;

      # InstallFullDB done

      # backup done

      # update core-db done

      # drop/import databases

    "2")

      read -t 5 -r -p "[YN] Drop & Import Databases? y/n " -n 1 -r
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        echo
        # this is for docker users
        if [ -f /.dockerenv ] &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>&1
          # keep old logs
          cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
          cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
        else
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
        fi
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        sleep 1
        # backup <- characters.sql
        FILE="${FOLDER_WOW:?}/backup/$DB_CHARACTERS-${NOW:?}.sql"
        if [ ! -f "$FILE" ] &>/dev/null; then
          printf '%b' "[!!] '${G1:?}Characters${N0:?}' Creating backup!\n"
          mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "$DB_CHARACTERS" >"${FOLDER_WOW:?}"/backup/"$DB_CHARACTERS"-"${NOW:?}".sql
        else
          printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-${NOW:?}.sql exist\n"
        fi
        # backup <- realmd.sql
        FILE="${FOLDER_WOW:?}/backup/${DB_REALMD:?}-${NOW:?}.sql"
        if [ ! -f "$FILE" ] &>/dev/null; then
          printf '%b' "[!!] '${G1:?}Realmd${N0:?}' Creating backup!\n"
          mysqldump --defaults-extra-file="${SQL_MYCNF:?}" "${DB_REALMD:?}" >"${FOLDER_WOW:?}"/backup/"${DB_REALMD:?}"-"${NOW:?}".sql
        else
          printf '%b' "[${G1:?}OK${N0:?}] ${DB_REALMD:?}-${NOW:?}.sql exist\n"
        fi

        # backup done

        # only drop databases, no importing

        read -r -p "[YN] Only Drop Databases? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          read -r -p "[YN] Drop realmd database? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "${DB_REALMD:?}"
          fi
          mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_CHARACTERS"
          mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_MANGOS"
          mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_LOGS"
        else

          # only drop databases, no importing done

          # drop databases

          # drop database 'characters'

          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "$DB_CHARACTERS")
          if [ "$RESULT" == "$DB_CHARACTERS" ] &>/dev/null; then
            mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_CHARACTERS"
          fi
          # drop database 'mangos'
          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "${DB_MANGOS:?}")
          if [ "$RESULT" == "$DB_MANGOS" ] &>/dev/null; then
            mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_MANGOS"
          fi
          read -r -p "[YN] Drop realmd database? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            echo
            # drop database 'realmd'
            RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "${DB_REALMD:?}")
            if [ "$RESULT" == "${DB_REALMD:?}" ] &>/dev/null; then
              mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "${DB_REALMD:?}"
            fi
            # drop database 'logs'
            RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "$DB_LOGS")
            if [ "$RESULT" == "$DB_LOGS" ] &>/dev/null; then
              mysqladmin --defaults-extra-file="${SQL_MYCNF:?}" -f DROP "$DB_LOGS"
            fi
          fi

          # drop databases done

          # create databases

          # create database 'characters'
          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "$DB_CHARACTERS")
          if [ "$RESULT" == "$DB_CHARACTERS" ] &>/dev/null; then
            printf '%b' "[${G1:?}OK${N0:?}] 'Characters' database installed!\n"
          else
            printf '%b' "[${Y1:?}ok${N0:?}] Importing 'Characters'\n"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "CREATE DATABASE $DB_CHARACTERS CHARACTER SET utf8 COLLATE utf8_general_ci"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" --database="$DB_CHARACTERS" <"${FOLDER_SQL:?}"/base/characters.sql
          fi
          # create database 'mangos'
          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "$DB_MANGOS")
          if [ "$RESULT" == "$DB_MANGOS" ] &>/dev/null; then
            printf '%b' "[${G1:?}OK${N0:?}] 'Mangos' database installed!\n"
          else
            printf '%b' "[${Y1:?}ok${N0:?}] Importing 'Mangos'\n"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "CREATE DATABASE $DB_MANGOS CHARACTER SET utf8 COLLATE utf8_general_ci"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" --database="$DB_MANGOS" <"$FOLDER_SQL"/base/mangos.sql
          fi
          # create database 'realmd'
          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "${DB_REALMD:?}")
          if [ "$RESULT" == "${DB_REALMD:?}" ] &>/dev/null; then
            printf '%b' "[${G1:?}OK${N0:?}] 'Realmd' database installed!\n"
          else
            printf '%b' "[${Y1:?}ok${N0:?}] Importing 'Realmd'\n"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "CREATE DATABASE ${DB_REALMD:?} CHARACTER SET utf8 COLLATE utf8_general_ci"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" --database="${DB_REALMD:?}" <"$FOLDER_SQL"/base/realmd.sql
          fi
          # create database 'logs'
          RESULT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "SHOW DATABASES" | grep "$DB_LOGS")
          if [ "$RESULT" == "$DB_LOGS" ] &>/dev/null; then
            printf '%b' "[${G1:?}OK${N0:?}] 'Logs' database installed!\n"
          else
            printf '%b' "[${Y1:?}ok${N0:?}] Importing 'Logs'\n"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" -e "CREATE DATABASE $DB_LOGS CHARACTER SET utf8 COLLATE utf8_general_ci"
            mysql --defaults-extra-file="${SQL_MYCNF:?}" --database="$DB_LOGS" <"$FOLDER_SQL"/base/logs.sql
          fi

          # create databases done

          # delete and start over done

          # InstallFullDB?
          printf '%b' "[CD] $SERVER_BUILD\n"
          read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            if [ ! -z "$(ls -A "$FOLDER_DB" 2>&1)" ] &>/dev/null; then
              sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
              cd "$FOLDER_DB" || exit
              ./InstallFullDB.sh
            else
              printf '%b' "[!!] ${GR:?}$FOLDER_DB${N0:?} Not Found!\n"
            fi
          fi

          # InstallFullDB done

          # list backup?
          read -t 5 -r -p "[YN] List backup? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            echo "[!!] Backup files (${FOLDER_WOW:?}/backup)"
            ls -lQS "${FOLDER_WOW:?}"/backup
          fi
          # import backup?
          read -r -p "[YN] Import latest backup? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
            sleep 1
            echo -ne '[00] Importing characters backup!\r'
            mysql --defaults-extra-file="${SQL_MYCNF:?}" "$DB_CHARACTERS" <"${FOLDER_WOW:?}"/backup/"$DB_CHARACTERS"-"${NOW:?}".sql
            sleep 1
            echo -ne '[50] Importing realmd backup!    \r'
            mysql --defaults-extra-file="${SQL_MYCNF:?}" "${DB_REALMD:?}" <"${FOLDER_WOW:?}"/backup/"${DB_REALMD:?}"-"${NOW:?}".sql
            sleep 1
            echo -ne '[OK] Done!                       \r'
          fi
        fi
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # drop/import databases done

      # update Database done

      # import backup done

      # convert_mysql_engine = myisam -> innodb

    "3")

      read -t 5 -r -p "[YN] Convert MySQL Engine = myisam -> innodb? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        # this is for docker users
        if [ -f /.dockerenv ] &>/dev/null; then
          echo
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
          cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
        else
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
        fi

        ########################################################################

        # title
        MYSQL_TITLE="MySQL New Connection"

        # new remote connection
        read -r -p "[YN] New connection? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

          # hostname
          MYSQL_HOSTNAME=$(
            dialog --title "$MYSQL_TITLE" \
              --nocancel \
              --inputbox "Enter Hostname:" 8 40 \
              3>&1 1>&2 2>&3 3>&-
          )

          # port
          MYSQL_PORT=$(
            dialog --title "$MYSQL_TITLE" \
              --nocancel \
              --inputbox "Enter Port:" 8 40 \
              3>&1 1>&2 2>&3 3>&-
          )

          # user
          MYSQL_USER=$(
            dialog --title "$MYSQL_TITLE" \
              --nocancel \
              --inputbox "Enter User:" 8 40 \
              3>&1 1>&2 2>&3 3>&-
          )

          # password
          MYSQL_PASSWORD=$(
            dialog --title "$MYSQL_TITLE" \
              --nocancel \
              --inputbox "Enter Password:" 8 40 \
              3>&1 1>&2 2>&3 3>&-
          )

          # if any data
          if [[ -n "$MYSQL_HOSTNAME" && "$MYSQL_PORT" && "$MYSQL_USER" && "$MYSQL_PASSWORD" ]] &>/dev/null; then
            # new remote mysql configuration
            SQL_MYCNF="[mysql]
host=$MYSQL_HOSTNAME
port=$MYSQL_PORT
user=$MYSQL_USER
password=$MYSQL_PASSWORD

[mysqldump]
host=$MYSQL_HOSTNAME
port=$MYSQL_PORT
user=$MYSQL_USER
password=$MYSQL_PASSWORD

[mysqladmin]
host=$MYSQL_HOSTNAME
port=$MYSQL_PORT
user=$MYSQL_USER
password=$MYSQL_PASSWORD"
          fi
        fi

        ########################################################################

        clear
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null

        # display progress bar
        {

          ######################################################################
          echo "$(awk 'BEGIN {srand(); printf "%d\n", int(1 + rand() * (8 - 1))}')"
          sleep 0.1
          ######################################################################

          TABLES=$(sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" --skip-column-names -B -D "$DB_MANGOS" -e 'show tables')
          for T in $TABLES; do
            # alter mangos
            sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" -D "$DB_MANGOS" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          done

          ######################################################################
          echo "$(awk 'BEGIN {srand(); printf "%d\n", int(1 + rand() * (32 - 8))}')"
          sleep 0.1
          ######################################################################

          TABLES=$(sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" --skip-column-names -B -D "$DB_CHARACTERS" -e 'show tables')
          for T in $TABLES; do
            # alter characters
            sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" -D "$DB_CHARACTERS" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          done

          ######################################################################
          echo "$(awk 'BEGIN {srand(); printf "%d\n", int(40 + rand() * (87 - 32))}')"
          sleep 0.1
          ######################################################################

          TABLES=$(sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" --skip-column-names -B -D "${DB_REALMD:?}" -e 'show tables')
          for T in $TABLES; do
            # alter realmd
            sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" -D "${DB_REALMD:?}" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          done

          ######################################################################
          echo "$(awk 'BEGIN {srand(); printf "%d\n", int(40 + rand() * (99 - 87))}')"
          sleep 0.1
          ######################################################################

          TABLES=$(sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" --skip-column-names -B -D "${DB_LOGS:?}" -e 'show tables')
          for T in $TABLES; do
            # alter logs
            sudo mysql --defaults-extra-file="${SQL_MYCNF:?}" -D "${DB_LOGS:?}" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          done

          ######################################################################
          echo "100"
          sleep 0.05
          ######################################################################

        } | dialog --title "Converting MySQL Engine: myisam -> innodb" --gauge " Please wait! myisam --> innodb" 6 60 0

        ########################################################################

        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # convert_mysql_engine = myisam -> innodb done

      # reinstall (delete /core-db)

    "4")

      read -t 5 -r -p "[YN] Reinstall (Delete /core-db)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        cp "$FOLDER_DB"/InstallFullDB.config "${FOLDER_WOW:?}" &>/dev/null
        sudo rm -r "$FOLDER_DB" &>/dev/null
        cd "${FOLDER_WOW:?}" || exit
        git clone "$GITHUB_DATABASE"
        mv "${FOLDER_WOW:?}"/*.config "$FOLDER_DB" &>/dev/null
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /core-db) done

      # reset --hard origin/master

    "5")

      read -t 5 -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        cd "$FOLDER_DB" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # restart mysql/mariadb server (service)

    "6")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Restart MariaDB
 2 : Restart MySQL
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # restart mariadb

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sleep 1
        sudo service mariadb status 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart mysql

      "2")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql restart &>/dev/null
        sleep 1
        sudo service mysql status 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # restart mysql/mariadb server (service) done

      # Stop mysql/mariadb server (service)

    "7")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Stop MySQL
 2 : Stop MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # stop mysql

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql status 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # stop mariadb

      "2")

        sudo service mariadb stop &>/dev/null
        sleep 1
        sudo service mariadb status 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # Stop mysql/mariadb server (service) done

      # enable/disable mysql/mariadb server

    "8")

      clear
      cat <<EOF
 Enable/Disable MySQL
 (systemctl)

 1 : Enable MySQL
 2 : Disable MySQL
 3 : Enable MariaDB
 4 : Disable MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # enable mysql

      "1")

        sudo systemctl enable mysql 2>&1
        sudo systemctl enable mysql.service 2>&1
        # reload
        sudo systemctl daemon-reload 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mysql

      "2")

        sudo systemctl disable mysql 2>&1
        sudo systemctl disable mysql.service 2>&1
        # reload
        sudo systemctl daemon-reload 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # enable mariadb

      "3")

        sudo systemctl enable mariadb@.service 2>&1
        sudo systemctl enable mariadb@ 2>&1
        # reload
        sudo systemctl daemon-reload 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mariadb

      "4")

        sudo systemctl disable mariadb@ 2>&1
        sudo systemctl disable mariadb.service 2>&1
        # reload
        sudo systemctl daemon-reload 2>&1
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # enable/disable mysql/mariadb server

      # apply all updates [A] to [B]

    "9")

      sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
      printf '%b' "[!!] [${R0:?}Warning${N0:?}]: Only update whats missing.
Check log for which database needs 'applying updates'"
      echo
      # combine [A] to [B] updates individually
      cat "${FOLDER_CORE:?}"/sql/updates/characters/*.sql >"${FOLDER_WOW:?}"/.all_characters.sql
      cat "${FOLDER_CORE:?}"/sql/updates/mangos/*.sql >"${FOLDER_WOW:?}"/.all_mangos.sql
      cat "${FOLDER_CORE:?}"/sql/updates/realmd/*.sql >"${FOLDER_WOW:?}"/.all_realmd.sql

      # apply all updates [A] to [B] characters?
      echo
      read -t 5 -r -p "[YN] Characters? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Loading..\n"
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_realmd stop
          ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_mangosd stop
          ;;
        esac

        # mysql db_characters db fix
        mysql --defaults-extra-file="${SQL_MYCNF:?}" -f --database="$DB_CHARACTERS" <"${FOLDER_WOW:?}"/.all_characters.sql &>/dev/null

        # local service restart
        if [[ "$(sudo service mariadb status)" ]] &>/dev/null; then
          sudo service mariadb restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mariadb\n"
        fi
        sleep 1
        if [[ "$(sudo service mysql status)" ]] &>/dev/null; then
          sudo service mysql restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mysql\n"
        fi

        printf '%b' "[${G1:?}OK${N0:?}]\n"
      fi
      # apply all updates [A] to [B] mangos?
      read -t 5 -r -p "[YN] Mangos? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Loading..\n"
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_realmd stop
          ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_mangosd stop
          ;;
        esac

        # mysql db_mangos db fix
        mysql --defaults-extra-file="${SQL_MYCNF:?}" -f --database="$DB_MANGOS" <"${FOLDER_WOW:?}"/.all_mangos.sql &>/dev/null

        # local service restart
        if [[ "$(sudo service mariadb status)" ]] &>/dev/null; then
          sudo service mariadb restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mariadb\n"
        fi
        sleep 1
        if [[ "$(sudo service mysql status)" ]] &>/dev/null; then
          sudo service mysql restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mysql\n"
        fi

        printf '%b' "[${G1:?}OK${N0:?}]\n"
      fi
      # apply all updates [A] to [B] realmd?
      read -t 5 -r -p "[YN] Realmd? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Loading..\n"
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_realmd stop
          ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *)
          printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
          sudo service "$TYPE_CORE"_mangosd stop
          ;;
        esac

        # mysql db_realmd db fix
        mysql --defaults-extra-file="${SQL_MYCNF:?}" -f --database="${DB_REALMD:?}" <"${FOLDER_WOW:?}"/.all_realmd.sql &>/dev/null

        # local service restart
        if [[ "$(sudo service mariadb status)" ]] &>/dev/null; then
          sudo service mariadb restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mariadb\n"
        fi
        sleep 1
        if [[ "$(sudo service mysql status)" ]] &>/dev/null; then
          sudo service mysql restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Restarting mysql\n"
        fi

        printf '%b' "[${G1:?}OK${N0:?}]\n"
      fi
      # remove old 'combined updates' sql files
      rm "${FOLDER_WOW:?}"/.*.sql 2>&1
      # InstallFullDB?
      echo
      printf '%b' "${G0:?}Recommended if you applied anything${N0:?}\n"
      printf '%b' "[CD] $SERVER_BUILD\n"
      read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
        if [ ! -z "$(ls -A "$FOLDER_DB" 2>&1)" ] &>/dev/null; then
          printf '%b' "[${G1:?}OK${N0:?}] Loading..\n"
          sleep 1
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping realmd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_realmd stop
            ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *)
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}Stopping mangosd.service${N0:?}\n"
            sudo service "$TYPE_CORE"_mangosd stop
            ;;
          esac
          printf '%b' "[${G1:?}OK${N0:?}]"
          echo
          sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_WOW:?}" &>/dev/null
          cd "$FOLDER_DB" || exit
          ./InstallFullDB.sh
          sudo service mariadb stop &>/dev/null
          sudo service mysql stop &>/dev/null
          sleep 1
          sudo service mariadb restart &>/dev/null
          sudo service mysql restart &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] "
        else
          printf '%b' "[!!] ${GR:?}$FOLDER_DB${N0:?} Not Found!\n"
        fi
      fi
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # apply all updates [A] to [B] done

    esac

    ;;

    # update database done

    # accounts

  "u")

    mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT id, accountId, ip, loginTime, loginSource, id FROM ${DB_REALMD:?}.account_logons;" >/var/log/ms/last_logins 2>&1

    # user accounts
    display_result() {
      dialog --title "User Accounts" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }

    USER_ACCOUNTS="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT username, gmlevel, lockedIp, active_realm_id, id FROM ${DB_REALMD:?}.account;" 2>&1)"

    RESULT="$(echo "$USER_ACCOUNTS" | column -t)"
    display_result 2>/dev/null

    # last logins
    display_result() {
      dialog --title "Last 100 Logins" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }

    LAST_LOGINS="$(echo "id accountId ip login Time loginSource id
$(tail -100 /var/log/ms/last_logins 2>/dev/null | grep -v "id" | tac)")"

    RESULT="$(echo "$LAST_LOGINS" | column -t)"
    display_result 2>/dev/null

    # database size
    display_result() {
      dialog --title "Database size" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }
    DATABASE_SIZE="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in (MB)' FROM information_schema.TABLES WHERE table_schema = \"${DB_REALMD:?}\" ORDER BY (data_length + index_length) DESC;" 2>&1)"

    RESULT="$(echo "$DATABASE_SIZE" | column -t)"
    display_result 2>/dev/null

    ;;

    # accounts done

    # characters

  "t")

    # minute old list, update
    if [[ ! -f /var/log/ms/player_list."$(date +"%M" 2>&1)" ]] &>/dev/null; then
      rm /var/log/ms/player_list* &>/dev/null
      printf '%b' "${N0:?}Loading player list${N0:?}\n"
      # save player list from mysql
      mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name, level, online, account, class, gender, xp, money, map, totaltime, leveltime, is_logout_resting, rest_bonus, zone, honor_highest_rank, honor_standing, stored_honor_rating, stored_dishonorable_kills, stored_honorable_kills, drunk, health, power1 FROM ${DB_CHARACTERS:?}.characters ORDER BY name;" >/var/log/ms/player_list."$(date +"%M" 2>&1)" 2>&1
    fi

    HEIGHT=11
    WIDTH=27
    CHOICE_HEIGHT=4
    BACKTITLE="Player database"
    TITLE="Heroes of Azeroth"
    MENU="Choose one option:"

    OPTIONS=(1 "Online players"
      2 "Player database"
      3 "Search database"
      4 "Database size")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    "1")

      display_result() {
        dialog --title "Player(s) online" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      RESULT="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name, level, online, account, class FROM ${DB_CHARACTERS:?}.characters WHERE online = 1 ORDER BY name;" 2>&1 | column -t)"
      display_result 2>/dev/null

      ;;

    "2")

      # class count
      FILE_CLASSES="/var/log/ms/classes.${NOW:?}"
      if [ ! -f $FILE_CLASSES ] &>/dev/null; then
        # remove old file
        rm /var/log/ms/classes.* &>/dev/null
        # classes from table characters
        mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT class FROM ${DB_CHARACTERS:?}.characters;" 2>&1 | tr -d 'class' >/var/log/ms/classes."${NOW:?}" 2>&1 # update this everyday
      fi

      # count lines in classes
      COUNT_LINES_CLASSES=$(wc -l /var/log/ms/classes.* 2>&1 | awk '{ print $1 }' 2>&1)

      if [ "$COUNT_LINES_CLASSES" -eq "0" ] &>/dev/null; then
        # remove old empty file
        rm /var/log/ms/classes.* &>/dev/null
      fi

      # index class, count each one
      WARRIOR=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | egrep -x '.{1}' 2>&1 | grep "1" 2>&1 | wc -l 2>&1)
      PALADIN=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "2" 2>&1 | wc -l 2>&1)
      HUNTER=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "3" 2>&1 | wc -l 2>&1)
      ROGUE=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "4" 2>&1 | wc -l 2>&1)
      PRIEST=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "5" 2>&1 | wc -l 2>&1)
      SHAMAN=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "7" 2>&1 | wc -l 2>&1)
      MAGE=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "8" 2>&1 | wc -l 2>&1)
      WARLOCK=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "9" 2>&1 | wc -l 2>&1)
      DRUID=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | egrep -x '.{2}' 2>&1 | grep "11" 2>&1 | wc -l 2>&1)
      # after vanilla
      DK=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "6" 2>&1 | wc -l 2>&1)

      # total count
      CLASS_TOTAL=$(cat /var/log/ms/classes."${NOW:?}" 2>&1 | grep "[1-9]" 2>&1 | wc -l 2>&1)

      # percentage of each class
      WARRIOR_P=$(echo "100/$CLASS_TOTAL*$WARRIOR" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      PALADIN_P=$(echo "100/$CLASS_TOTAL*$PALADIN" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      HUNTER_P=$(echo "100/$CLASS_TOTAL*$HUNTER" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      ROGUE_P=$(echo "100/$CLASS_TOTAL*$ROGUE" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      PRIEST_P=$(echo "100/$CLASS_TOTAL*$PRIEST" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      DK_P=$(echo "100/$CLASS_TOTAL*$DK" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      SHAMAN_P=$(echo "100/$CLASS_TOTAL*$SHAMAN" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      MAGE_P=$(echo "100/$CLASS_TOTAL*$MAGE" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      WARLOCK_P=$(echo "100/$CLASS_TOTAL*$WARLOCK" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)
      DRUID_P=$(echo "100/$CLASS_TOTAL*$DRUID" 2>&1 | bc -l 2>&1 | awk -F. '{ print $1 }' 2>&1)

      # get character list from mysql
      printf '%b' "Character list ${G1:?}$(cat /var/log/ms/classes."${NOW:?}" 2>/dev/null | xargs 2>&1 | wc -w 2>&1)${N0:?}\n"
      echo
      mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name, level, online, account, class FROM ${DB_CHARACTERS:?}.characters ORDER BY name;" 2>&1
      echo
      printf '%b' "Classes

Warrior${G0:?}.:${N0:?} $WARRIOR ${GR:?}$WARRIOR_P%${N0:?}
Paladin${G0:?}.:${N0:?} $PALADIN ${GR:?}$PALADIN_P%${N0:?}
Hunter${G0:?}..:${N0:?} $HUNTER ${GR:?}$HUNTER_P%${N0:?}
Rogue${G0:?}...:${N0:?} $ROGUE ${GR:?}$ROGUE_P%${N0:?}
Priest${G0:?}..:${N0:?} $PRIEST ${GR:?}$PRIEST_P%${N0:?}
DK${G0:?}......:${N0:?} $DK ${GR:?}$DK_P%${N0:?}
Shaman${G0:?}..:${N0:?} $SHAMAN ${GR:?}$SHAMAN_P%${N0:?}
Mage${G0:?}....:${N0:?} $MAGE ${GR:?}$MAGE_P%${N0:?}
Warlock${G0:?}.:${N0:?} $WARLOCK ${GR:?}$WARLOCK_P%${N0:?}
Druid${G0:?}...:${N0:?} $DRUID ${GR:?}$DRUID_P%${N0:?}\n"
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

    "3")

      # search player list
      SEARCHWORD=$(
        dialog --title "Character database" \
          --nocancel \
          --inputbox "Enter player name:" 8 40 \
          3>&1 1>&2 2>&3 3>&-
      )

      if [[ ! -z "$SEARCHWORD" ]] &>/dev/null; then

        # create player profile out of search
        cat /var/log/ms/player_list* 2>/dev/null | egrep "${SEARCHWORD:?}" >/var/log/ms/player_search 2>&1

        # one profile on each search, if more list it
        if [[ "$(wc -l /var/log/ms/player_search 2>&1 | awk '{ print $1 }' 2>&1)" -gt "1" ]] &>/dev/null; then

          echo
          printf '%b' "Found more than one! ${G1:?}+$(wc -l /var/log/ms/player_search 2>&1 | awk '{ print $1 }' 2>&1)${G1:?}\n"
          echo
          printf '%b' "${GR:?}$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $1,$2 }' 2>&1)${N0:?}\n"

        else

          # name, level, online, account, class, gender, xp, money, map
          # totaltime, leveltime, is_logout_resting, rest_bonus, zone
          # honor_highest_rank, honor_standing, stored_honor_rating
          # stored_dishonorable_kills, stored_honorable_kills
          # drunk, health, power1

          # skip if nothing is found
          if [[ "$(wc -l /var/log/ms/player_search 2>&1 | awk '{ print $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then

            TOON_NAME=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $1 }' 2>&1)
            TOON_LVL=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $2 }' 2>&1)
            TOON_ON=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $3 }' 2>&1)
            TOON_AC=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $4 }' 2>&1)
            TOON_C=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $5 }' 2>&1)
            TOON_GE=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $6 }' 2>&1)
            TOON_XP=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $7 }' 2>&1)
            TOON_GS=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $8 }' 2>&1)
            TOON_MAP=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $9 }' 2>&1)
            TOON_TOT_T=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $10 }' 2>&1)
            TOON_TOT_LT=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $11 }' 2>&1)
            TOON_REST_B=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $12 }' 2>&1)
            TOON_ZONING=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $14 }' 2>&1)
            TOON_HONOR_HR=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $15 }' 2>&1)
            TOON_HONOR_S=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $16 }' 2>&1)
            TOON_STORED_HR=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $17 }' 2>&1)
            TOON_STORED_DK=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $18 }' 2>&1)
            TOON_STORED_HK=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $19 }' 2>&1)
            TOON_DRUNK=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $20 }' 2>&1)
            TOON_HEALTH=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $21 }' 2>&1)
            TOON_MANA=$(cat /var/log/ms/player_search 2>/dev/null | awk '{ print $22 }' 2>&1)

            # level range (1 - 60+)
            if [[ "$TOON_LVL" -ge "1" ]] &>/dev/null; then
              LVLC="${GR:?}"
            fi
            if [[ "$TOON_LVL" -ge "3" ]] &>/dev/null; then
              LVLC="${Y0:?}"
            fi
            if [[ "$TOON_LVL" -ge "9" ]] &>/dev/null; then
              LVLC="${Y1:?}"
            fi
            if [[ "$TOON_LVL" -ge "19" ]] &>/dev/null; then
              LVLC="${G0:?}"
            fi
            if [[ "$TOON_LVL" -ge "29" ]] &>/dev/null; then
              LVLC="${G1:?}"
            fi
            if [[ "$TOON_LVL" -ge "39" ]] &>/dev/null; then
              LVLC="${CY:?}"
            fi
            if [[ "$TOON_LVL" -ge "49" ]] &>/dev/null; then
              LVLC="${C1:?}"
            fi
            if [[ "$TOON_LVL" -ge "60" ]] &>/dev/null; then
              LVLC="${P1:?}"
            fi

            if [[ -z "$LVLC" ]] &>/dev/null; then
              LVLC="${GR:?}"
            fi

            # class range
            if [[ "$TOON_C" -eq "1" ]] &>/dev/null; then
              TOON_C="Warrior"
            elif [[ "$TOON_C" -eq "2" ]] &>/dev/null; then
              TOON_C="Paladin"
            elif [[ "$TOON_C" -eq "3" ]] &>/dev/null; then
              TOON_C="Hunter"
            elif [[ "$TOON_C" -eq "4" ]] &>/dev/null; then
              TOON_C="Rogue"
            elif [[ "$TOON_C" -eq "5" ]] &>/dev/null; then
              TOON_C="Priest"
            elif [[ "$TOON_C" -eq "6" ]] &>/dev/null; then
              TOON_C="Death Knight"
            elif [[ "$TOON_C" -eq "7" ]] &>/dev/null; then
              TOON_C="Shaman"
            elif [[ "$TOON_C" -eq "8" ]] &>/dev/null; then
              TOON_C="Mage"
            elif [[ "$TOON_C" -eq "9" ]] &>/dev/null; then
              TOON_C="Warlock"
            elif [[ "$TOON_C" -eq "11" ]] &>/dev/null; then
              TOON_C="Druid"
            fi

            # gender range
            if [[ "$TOON_GE" -eq "0" ]] &>/dev/null; then
              TOON_GE="Male"
            else
              TOON_GE="Female"
            fi

            # gold
            TOON_GS="$(echo "${TOON_GS:?}/10000" 2>&1 | bc -l 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)"
            if [[ "$(echo "${TOON_GS:?}" 2>&1 | awk -F. '{ print $1 }' 2>&1)" -gt "0" ]] &>/dev/null; then
              GSC="${Y1:?}"
            else
              GSC="${GR:?}"
            fi

            # total time /played
            TOON_TOT_T_C=$(printf '%dh:%dm:%ds\n' $(("$TOON_TOT_T/3600")) $(("$TOON_TOT_T%3600/60")) $(("$TOON_TOT_T%60")))
            TOON_TOT_LT_C=$(printf '%dh:%dm:%ds\n' $(("$TOON_TOT_LT/3600")) $(("$TOON_TOT_LT%3600/60")) $(("$TOON_TOT_LT%60")))

            # calculate days elapsed
            TOON_TOT_DAYS=$(echo "${TOON_TOT_T:?}/3600/24" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)
            TOON_TOT_LVL_DAYS=$(echo "${TOON_TOT_LT:?}/3600/24" 2>&1 | bc -l 2>&1 | awk '{ printf "%.0f\n", $1 }' 2>&1)

            # map zone
            if [[ "$TOON_MAP" -eq "1" ]] &>/dev/null; then
              TOON_MAP="Kalimdor"
            else
              TOON_MAP="Eastern Kingdoms"
            fi

            # resting
            if [[ "$TOON_REST_B" -eq "1" ]] &>/dev/null; then
              TOON_REST_B="${G1:?}Yes${N0:?}"
            else
              TOON_REST_B="${GR:?}N0${N0:?}"
            fi

            # online/offline status
            if [[ "$TOON_ON" -eq "0" ]] &>/dev/null; then
              TOON_ON="${GR:?}Offline${N0:?}"
            else
              TOON_ON="${G1:?}Online${N0:?}"
            fi

            if [[ ! -z "$TOON_NAME" ]] &>/dev/null; then
              clear
              printf '%b' "Looking up ${GR:?}${SEARCHWORD:?}${N0:?}

Account${G0:?}.: ${N0:?}${TOON_AC:?}${N0:?}
Status${G0:?}..: ${N0:?}${TOON_ON:?}${N0:?}

Name${G0:?}....: ${N0:?}${TOON_NAME:?}${N0:?}
Class${G0:?}...: ${N0:?}${TOON_C:?}${N0:?}
Level${G0:?}...: ${LVLC:?}${TOON_LVL:?}${N0:?}
HP${G0:?}......: ${G1:?}${TOON_HEALTH:?}${N0:?}
MP${G0:?}......: ${B1:?}${TOON_MANA:?}${N0:?}
Gender${G0:?}..: ${N0:?}${TOON_GE:?}${N0:?}
Gold${G0:?}....: ${GSC:?}${TOON_GS:?}${N0:?}
XP${G0:?}......: ${N0:?}${TOON_XP:?}${N0:?}
Resting${G0:?}.: ${N0:?}${TOON_REST_B:?}${N0:?}
Map${G0:?}.....: ${N0:?}${TOON_MAP:?}${N0:?}
Played${G0:?}..: ${N0:?}${TOON_TOT_T_C:?}${N0:?} - ${TOON_TOT_DAYS:?} days
LVLTime${G0:?}.: ${N0:?}${TOON_TOT_LT_C:?}${N0:?} - ${TOON_TOT_LVL_DAYS:?} days
Zone${G0:?}....: ${N0:?}${TOON_ZONING:?}${N0:?}
Honored${G0:?}.: ${N0:?}${TOON_HONOR_HR:?}${N0:?}
Ranked${G0:?}..: ${N0:?}${TOON_HONOR_S:?}${N0:?}
Honor${G0:?}...: ${N0:?}${TOON_STORED_HR:?}${N0:?}
Kills${G0:?}...: ${N0:?}${TOON_STORED_HK:?}${N0:?}
DKills${G0:?}..: ${N0:?}${TOON_STORED_DK:?}${N0:?}
Drunk${G0:?}...: ${N0:?}${TOON_DRUNK:?}${N0:?}\n"
            fi
          else
            clear
            printf '%b' "${GR:?}Nothing was found!${N0:?}\n"
          fi
        fi
      else
        clear
        printf '%b' "${GR:?}empty${N0:?}\n"
      fi
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

    "4")

      # get database size from mysql
      display_result() {
        dialog --title "Database size" \
          --no-collapse \
          --msgbox "$RESULT" 0 0
      }
      DATABASE_SIZE="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' FROM information_schema.TABLES WHERE table_schema = \"${DB_CHARACTERS:?}\" ORDER BY (data_length + index_length) DESC;")"

      RESULT="$(echo "$DATABASE_SIZE" | column -t)"
      display_result 2>/dev/null

      ;;

    esac

    ;;

    # characters done

    # guilds

  "g")

    display_result() {
      dialog --title "Guilds ($GUILDS_COUNT)" \
        --no-collapse \
        --msgbox "$RESULT" 0 0
    }
    GUILDS_NAME="$(mysql --defaults-extra-file="${SQL_MYCNF:?}" --execute="SELECT name FROM $DB_CHARACTERS.guild;" 2>&1)"
    GUILDS_DATA="$(echo "$GUILDS_NAME" | grep -v "name")"
    GUILDS_COUNT="$(echo "$GUILDS_DATA" | wc -l)"

    RESULT="$(echo "$GUILDS_DATA")"
    display_result 2>/dev/null

    ;;

    # guilds done

    # shutdown server? >> (ﾉ °益°)ﾉ 彡 ┻━┻ holy *@?!1kek .. need muh grindz x()<zz ! OO

  "s")

    # check if 'mangosd.conf' are installed
    FILE="${FOLDER_CORE:?}/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ] &>/dev/null; then
      printf '%b' "[!!] ${GR:?}mangosd.conf${N0:?} Not Found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "${FOLDER_WOW:?}"/backup/configurations/mangosd.conf "${FOLDER_CORE:?}"/run/etc/ &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="${FOLDER_CORE:?}/run/etc/realmd.conf"
    if [ ! -f "$FILE" ] &>/dev/null; then
      printf '%b' "[!!] ${GR:?}realmd.conf${N0:?} Not Found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "${FOLDER_WOW:?}"/backup/configurations/realmd.conf "${FOLDER_CORE:?}"/run/etc/ &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      HEIGHT=10
      WIDTH=27
      CHOICE_HEIGHT=4
      BACKTITLE="Shutdown server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Shutdown Server"
        2 "Shutdown realmd"
        3 "Shutdown mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # shutdown realmd, mangosd

      "1")

        read -t 5 -r -p "[YN] Shutdown realmd, mangosd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            # running screen named realmd
            if screen -list 2>&1 | grep -q "realmd" &>/dev/null; then
              # realmd screen id
              REALMD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.realmd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $REALMD_ID.realmd!\n"
            else
              printf '%b' "[!!] realmd not running!\n"
            fi
            if screen -list 2>&1 | grep -q "mangosd" &>/dev/null; then
              # mangosd screen id
              MANGOSD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.mangosd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $MANGOSD_ID.mangosd!\n"
            else
              printf '%b' "[!!] mangosd not running!\n"
            fi
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            # this is for docker users
            if [ -f /.dockerenv ] &>/dev/null; then
              # keep old logs
              cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
              cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            else
              # realmd service
              case "$(echo "$PIDOF_REALMD")" in
              0)
                printf '%b' "[${GR:?}OK${N0:?}] realmd.service not running.\n"
                sleep 1
                ;;
              *)
                printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd.service\n"
                sleep 1
                sudo service "$TYPE_CORE"_realmd stop
                sudo kill -9 "$PIDOF_REALMD" &>/dev/null
                sleep 1
                printf '%b' "[${G1:?}OK${N0:?}] Stopped realmd.service!\n"
                ;;
              esac
              # mangosd service
              case "$(echo "$PIDOFMANGOSD")" in
              0)
                printf '%b' "[${GR:?}OK${N0:?}] mangosd service not running.\n"
                sleep 1
                ;;
              *)
                printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd.service\n"
                sleep 1
                sudo service "${TYPE_CORE:?}"_mangosd stop
                sudo kill -9 "$PIDOFMANGOSD" &>/dev/null
                sleep 1
                printf '%b' "[${G1:?}OK${N0:?}] Stopped mangosd.service!\n"
                ;;
              esac
            fi
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown realmd, mangosd done

        # shutdown realmd

      "2")

        read -t 5 -r -p "[YN] Shutdown realmd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            if screen -list 2>&1 | grep -q "realmd" &>/dev/null; then
              # realmd screen id
              REALMD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.realmd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $REALMD_ID.realmd!\n"
              # keep old logs
              cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
              cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            else
              printf '%b' "[!!] realmd not running!\n"
              sleep 2
            fi
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            # realmd service
            case "$(echo "$PIDOF_REALMD")" in
            0)
              printf '%b' "[${GR:?}NO${N0:?}] realmd.service already shutdown!\n"
              sleep 1
              ;;
            *)
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd.service\n"
              sleep 1
              sudo service "$TYPE_CORE"_realmd stop
              sudo kill -9 "$PIDOF_REALMD" &>/dev/null
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] Stopped realmd.service!\n"
              sleep 2
              ;;
            esac
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown realmd done

        # shutdown mangosd

      "3")

        read -t 5 -r -p "[YN] Shutdown mangosd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            if screen -list 2>&1 | grep -q "mangosd" &>/dev/null; then
              # mangosd screen id
              MANGOSD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.mangosd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $MANGOSD_ID.mangosd!\n"
              # keep old logs
              cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
              cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            else
              printf '%b' "[!!] mangosd not running!\n"
              sleep 2
            fi
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            # mangosd service
            case "$(echo "$PIDOFMANGOSD")" in
            0)
              printf '%b' "[${GR:?}OK${N0:?}] mangosd.service already shutdown!\n"
              sleep 1
              ;;
            *)
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd.service\n"
              sleep 1
              sudo service "$TYPE_CORE"_mangosd stop
              sudo kill -9 "$PIDOFMANGOSD" &>/dev/null
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] Stopped mangosd.service!\n"
              ;;
            esac
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown mangosd done

      esac
    fi

    ;;

    # shutdown server done << it's over!!

    # restart server

  "r")

    # check if 'mangosd.conf' are installed
    FILE="${FOLDER_CORE:?}/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ] &>/dev/null; then
      printf '%b' "[!!] ${GR:?}mangosd.conf${N0:?} Not Found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "${FOLDER_WOW:?}"/backup/configurations/mangosd.conf "${FOLDER_CORE:?}"/run/etc/ &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="${FOLDER_CORE:?}/run/etc/realmd.conf"
    if [ ! -f "$FILE" ] &>/dev/null; then
      printf '%b' "[!!] ${GR:?}realmd.conf${N0:?} Not Found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "${FOLDER_WOW:?}"/backup/configurations/realmd.conf "${FOLDER_CORE:?}"/run/etc/ &>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      # is screen installed?
      if ! [ -x "$(command -v screen)" ] &>/dev/null; then
        sudo apt-get install screen -y 2>&1
      fi

      HEIGHT=10
      WIDTH=26
      CHOICE_HEIGHT=4
      BACKTITLE="Restart server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Restart server"
        2 "Restart realmd"
        3 "Restart mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # restart realmd,mangos

      "1")

        read -t 5 -r -p "[YN] Restart realmd,mangos? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            # running screen named realmd
            if screen -list 2>&1 | grep -q "realmd" &>/dev/null; then
              # realmd screen id
              REALMD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.realmd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $REALMD_ID.realmd!\n"
            else
              printf '%b' "[!!] realmd not running!\n"
            fi
            # running screen named mangosd
            if screen -list 2>&1 | grep -q "mangosd" &>/dev/null; then
              # mangosd screen id
              MANGOSD_ID=$(screen -list 2>&1 | grep -Eo "[0-9]+.mangosd" 2>&1 | awk -F. '{ print $1 }' 2>&1)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped $MANGOSD_ID.mangosd!\n"
            else
              printf '%b' "[!!] mangosd not running!\n"
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screens
            screen -dmS realmd &>/dev/null
            screen -dmS mangosd &>/dev/null
            # setup variables ruled by configuration
            REALMD_SCREEN="${FOLDER_CORE:?}/run/bin/./realmd -c ${FOLDER_CORE:?}/run/etc/realmd.conf\n"
            MANGOSD_SCREEN="${FOLDER_CORE:?}/run/bin/./mangosd -c ${FOLDER_CORE:?}/run/etc/mangosd.conf\n"
            # implement daemons inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN" &>/dev/null
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN" &>/dev/null
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf '%b' "[${G1:?}OK${N0:?}] Restarting realmd, mangos service..\n"
            sleep 1
            sudo service "$TYPE_CORE"_realmd restart &>/dev/null
            # realmd service
            case "$(echo "$PIDOF_REALMD")" in
            0) printf '%b' "[${G0:?}OK${N0:?}] realmd.service starting\n" ;;
            1) printf '%b' "[${G1:?}OK${N0:?}] realmd.service started!\n" ;;
            *) printf '%b' "[${Y1:?}0!${N0:?}] realmd.service running?\n" ;;
            esac
            sleep 1
            sudo service "$TYPE_CORE"_mangosd restart &>/dev/null
            # mangosd service
            case "$(echo "$PIDOFMANGOSD")" in
            0) printf '%b' "[${G0:?}OK${N0:?}] mangosd.service starting\n" ;;
            1) printf '%b' "[${G1:?}OK${N0:?}] mangosd.service started!\n" ;;
            *) printf '%b' "[${Y1:?}0!${N0:?}] mangosd.service running?\n" ;;
            esac
            sleep 1
            read -t 2 -r -p "[YN] Wait on mangosd? y/n " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Nn]$ ]] &>/dev/null; then
              # wait on mangosd
              until grep -q -o "World initialized" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; do
                printf '%b' "[${GR:?}OK${N0:?}] ${GR:?}Waiting 5 seconds..${N0:?}\n"
                sleep 5
              done
            fi

            # realmd.log #######################################################

            # if realm failed
            if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
              # if any, print "Realm failed or halted"
              printf '%b' "[${R1:?}0H${N0:?}] Realm failed or halted!\n"
            else
              # look for empty tables
              if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                # count empty inside log
                COUNT_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." 2>&1)
                # if any, print "empty"
                printf '%b' "[${Y1:?}0E${N0:?}] Realm: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty, doesn't exist!\n"
              fi
              # look for error
              if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                # count errors inside log
                COUNT_ERROR_REALM=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
                # error rate (total)
                LOG_LINES=$(wc -l "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | awk '{ print $1 }' 2>&1)
                # save genesis realm error rate
                echo "$CALC_ERROR_REALM" >"${FOLDER_CORE:?}"/run/logs/RealmERRORrate.log 2>&1
                # calculate error rate
                CALC_ERROR_REALM=$(echo "scale=4; 100/$LOG_LINES*$COUNT_ERROR_REALM" 2>&1 | bc -l 2>&1)
                ERROR_RATE_REALM=$(echo "${CALC_ERROR_REALM:?}%")
                # if any, print "error"
                printf '%b' "[${R1:?}1E${N0:?}] Realm: ${R1:?}$COUNT_ERROR_REALM${N0:?} Error! ${GR:?}$ERROR_RATE_REALM${N0:?}\n"
              else
                # if nothing, print "ok"
                printf '%b' "[${G1:?}OK${N0:?}] Realm: OK!\n"
              fi
              # this database (realmd) is out of date!
              if grep -q -E "You\shave:\s-->" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                printf '%b' "[${Y1:?}0D${N0:?}] Realm database is out of date!\n"
                printf '%b' "[${G0:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
              fi
              # databases is missing or corrupt.
              if grep -q -E "\sdatabase\sis\smissing\sor\scorrupt." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                printf '%b' "[${R1:?}X0${N0:?}] Realm database is missing or corrupt!\n"
              fi
              # reinstall your (realmd) database
              if grep -q -E "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                printf '%b' "[${R1:?}X1${N0:?}] Reinstall your realm database!\n"
              fi
              # can't connect to local mysql through socket
              if grep -q -E ".*Can't\sconnect\sto\slocal\sMySQL*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                printf '%b' "[${R1:?}X2${N0:?}] Realm can't connect to local MySQL!\n"
              fi
              # your realmd.conf version indicates your conf file is out of date
              if grep -q -E ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
                printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
              fi
            fi

            # server.log #######################################################

            # if world failed
            if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
              # if any, print "World failed or halted"
              printf '%b' "[${R1:?}0H${N0:?}] World failed or halted!\n"
            else
              # look for empty tables
              if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # count empty inside log
                COUNT_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." 2>&1)
                # if any, print "empty"
                printf '%b' "[${Y1:?}0E${N0:?}] World: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty or doesn't exist!\n"
              fi
              # look for error
              if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # count errors inside log
                COUNT_ERROR_SERVER=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
                # error rate (total)
                LOG_LINES=$(wc -l "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | awk '{ print $1 }' 2>&1)
                # save genesis realm error rate
                echo "$CALC_ERROR_SERVER" >"${FOLDER_CORE:?}"/run/logs/ServerERRORrate.log 2>&1
                # calculate error rate
                CALC_ERROR_SERVER=$(echo "scale=4; 100/$LOG_LINES*$COUNT_ERROR_SERVER" 2>&1 | bc -l 2>&1)
                ERROR_RATE_SERVER="$(echo "${CALC_ERROR_SERVER:?}" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)%"
                # if any, print "error"
                printf '%b' "[${R1:?}1E${N0:?}] World: ${R1:?}$COUNT_ERROR_SERVER${N0:?} Error! ${N0:?}${ERROR_RATE_SERVER:?}${N0:?}\n"
                # look for serious error
                if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                  # count serious errors inside log
                  COUNT_ERROR_SERIOUS=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
                  # if any, print "serious"
                  printf '%b' "[${R1:?}X9${N0:?}] World has ${R1:?}$COUNT_ERROR_SERIOUS${N0:?} serious error!\n"
                fi
              else
                # if nothing, print "ok"
                printf '%b' "[${G1:?}OK${N0:?}] World OK!\n"
              fi
              # world failed
              if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # if any, print "World failed"
                echo
                printf '%b' "$SERVER_LOG_FAILED"
                echo
              fi
              # this database (mangosd) is out of date!
              if grep -q -E "You\shave:\s-->" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                printf '%b' "[${GR:?}0D${N0:?}] World database is out of date!\n"
                printf '%b' "[${GR:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
              fi
              # databases is missing or corrupt.
              if grep -q -E "\sdatabase\sis\smissing\sor\scorrupt." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                printf '%b' "[${R1:?}X0${N0:?}] World database is missing or corrupt!\n"
              fi
              # reinstall your (mangosd) database
              if grep -q -E "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                printf '%b' "[${R1:?}X1${N0:?}] Reinstall your world database!\n"
              fi
              # can't connect to local mysql through socket
              if grep -q -E ".*Can't\sconnect\sto\slocal\sMySQL*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                printf '%b' "[${R1:?}X2${N0:?}] World can't connect to local MySQL!\n"
              fi
              # your mangosd.conf version indicates your conf file is out of date
              if grep -q -E ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
              fi

              # ahbot loaded and initialized
              if grep -q -E "Initialize AuctionHouseBot..." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # if any, print "AHbot ok"
                printf '%b' "[${G1:?}OK${N0:?}] AHbot\n"
              else
                # off
                printf '%b' "[${GR:?}NO${N0:?}] AHbot\n"
              fi
              # warden loaded
              if grep -q -E "Loading Warden scan database..." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # if any, print "Warden ok"
                printf '%b' "[${G1:?}OK${N0:?}] Warden\n"
              else
                # off
                printf '%b' "[${GR:?}NO${N0:?}] Warden\n"
              fi
              # Playerbot loaded
              if grep -q -E "Playerbot: Using configuration file" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
                # if any, print "Playerbot ok"
                printf '%b' "[${G1:?}OK${N0:?}] Playerbot\n"
              else
                # offline
                printf '%b' "[${GR:?}NO${N0:?}] Playerbot\n"
              fi
              # startup time
              STARTUP_TIME=$(grep "SERVER\sSTARTUP\sTIME*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | cut -d\  -f6-9 2>&1)
              printf '%b' "[${G1:?}OK${N0:?}] World initialized! ${G1:?}$STARTUP_TIME${N0:?}\n"
            fi
            echo
            printf '%b' "${G0:?}>${N0:?} hit Any key to go back."
            echo
            read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
            echo
            echo
            case $ans in
            "t")
              tail "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1
              echo
              read -r -p "Press Enter to continue" </dev/tty
              ;;
            "f")
              echo
              tail -f "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1
              ;;
            "n")
              echo
              nano "${FOLDER_CORE:?}"/run/logs/Server.log
              ;;
            "N")
              echo
              nano "${FOLDER_CORE:?}"/run/logs/Realmd.log
              ;;

              # lnav

            "l")
              echo
              LOGS=("${FOLDER_CORE:?}"/run/logs/EventAIErrors.log
                "${FOLDER_CORE:?}"/run/logs/DBErrors.log
                "${FOLDER_CORE:?}"/run/logs/Realmd.log
                "${FOLDER_CORE:?}"/run/logs/Server.log)
              # is lnav installed?
              if ! [ -x "$(command -v lnav)" ] &>/dev/null; then
                sudo apt install lnav -y 2>&1
              fi
              lnav "${LOGS[@]}" 2>&1
              ;;

            esac
          fi
          # save genesis realm error rate
          echo "$CALC_ERROR_REALM" >"${FOLDER_CORE:?}"/run/logs/RealmERRORrate.log 2>&1
          echo "$CALC_ERROR_SERVER" >"${FOLDER_CORE:?}"/run/logs/ServerERRORrate.log 2>&1
        fi

        ;;

        # restart realmd,mangos done

        # restart realmd

      "2")

        read -t 5 -r -p "[YN] Restart realmd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            if screen -list 2>&1 | grep -q "realmd" &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}realmd${N0:?})\n"
              sudo killall screen
              sleep 2
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screen
            screen -dmS realmd &>/dev/null
            # setup variable ruled by configuration
            REALMD_SCREEN="${FOLDER_CORE:?}/run/bin/./realmd -c ${FOLDER_CORE:?}/run/etc/realmd.conf\n"
            # implement daemon inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN" &>/dev/null
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
            # restart service (realmd)
            printf '%b' "[${Y1:?}OK${N0:?}] Restarting realmd.service\n"
            sleep 1
            sudo service "$TYPE_CORE"_realmd restart &>/dev/null
            printf '%b' "[${G1:?}OK${N0:?}] realmd.service started!\n"
            sleep 2
          fi
          # save genesis realm error rate
          echo "$CALC_ERROR_REALM" >"${FOLDER_CORE:?}"/run/logs/RealmERRORrate.log 2>&1
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart realmd done

        # restart mangosd

      "3")

        read -t 5 -r -p "[YN] Restart mangos? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          # this is for docker users
          if [ -f /.dockerenv ] &>/dev/null; then
            if screen -list 2>&1 | grep -q "mangosd" &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}mangosd${N0:?})\n"
              sudo killall screen
              sleep 2
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screen
            screen -dmS mangosd &>/dev/null
            # setup variables ruled by configuration
            MANGOSD_SCREEN="${FOLDER_CORE:?}/run/bin/./mangosd -c ${FOLDER_CORE:?}/run/etc/mangosd.conf\n"
            # implement daemon inside newly made screens
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN" &>/dev/null
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            cp "${FOLDER_CORE:?}"/run/logs/Realmd.log "${FOLDER_CORE:?}"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "${FOLDER_CORE:?}"/run/logs/Server.log "${FOLDER_CORE:?}"/run/logs/Server.log.old &>/dev/null
            # restart service (mangosd)
            printf '%b' "[${Y1:?}OK${N0:?}] Restarting mangos.service\n"
            sleep 1
            sudo service "${TYPE_CORE:?}"_mangosd restart &>/dev/null
            printf '%b' "[${G1:?}OK${N0:?}] mangosd service started!\n"
            sleep 2
          fi
          # save genesis server error rate
          echo "$CALC_ERROR_SERVER" >"${FOLDER_CORE:?}"/run/logs/ServerERRORrate.log 2>&1
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart mangosd done

      esac
    fi

    ;;

    # lnav - done

    # restart server done

    # update cmangos-script

  "w")

    # is dialog installed?
    if ! [ -x "$(command -v dialog)" ] &>/dev/null; then
      sudo apt-get install dialog -y
    fi

    HEIGHT=10
    WIDTH=37
    CHOICE_HEIGHT=3
    BACKTITLE="Update Helper"
    TITLE="Update cmangos-script [Helper]"
    MENU="Choose one option:"

    OPTIONS=(1 "Update helper"
      2 "Reinstall /cmangos-script"
      3 "Reset --hard origin/master")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # update helper

    "1")

      function install_mark_tool() {

        if [[ ! "$(echo "$(ls -l /var/log/ms 2>&1)" | grep "total" 2>&1 | awk '{ print $2 }' 2>&1)" -gt "0" ]] &>/dev/null; then
          # create ms folder
          sudo mkdir /var/log/ms/ &>/dev/null
          # fix ownership
          sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }' 2>&1)" /var/log/ms &>/dev/null
        fi

        # create installed mark
        cd "$FOLDER_HELPER" || exit
        LATEST_HEAD=$(git rev-parse --short HEAD)
        echo "CMaNGOS Script was installed at ${NOW:?} Head: $LATEST_HEAD" >/home/"$(whoami)"/wow/Installed_ms
      }

      FILE="${FOLDER_INSTALL:?}/cmangos-script/README.md"
      if [ ! -f "$FILE" ] &>/dev/null; then
        # not installed
        sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "$FOLDER_INSTALL" &>/dev/null
        cd "$FOLDER_INSTALL" || exit
        git clone "${GITHUB_HELPER:?}"
      else
        # installed
        read -t 5 -r -p "[YN] Update/Install Helper? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then
          sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "$FOLDER_INSTALL" &>/dev/null
          printf '%b' "[${G1:?}OK${N0:?}] Checking your current release\n"
          sleep 1
          cd "$FOLDER_HELPER" || exit
          if git checkout master &>/dev/null &&
            git fetch origin master &>/dev/null &&
            [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
            git merge origin/master; then
            LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
            LATEST_HEAD=$(git rev-parse --short HEAD)
            printf '%b' "[!!] (${G0:?}${UND:?}$LATEST_HEAD${DEF:?}${N0:?}) ${G0:?}${UND:?}New Updates For Tool${DEF:?}${N0:?}! $LATEST_DATE\n"
            cd "$FOLDER_HELPER" || exit
            sleep 1
            printf '%b' "[!!] Old release installed!\n"
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] Updating Tool!\n"
            # keep old mangos
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            # done
            printf '%b' "[${G1:?}OK${N0:?}] ${GR:?}/usr/local/bin/mangos.old${N0:?}\n"
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] Stripping executable on 'mangos.old'\n"
            sleep 1
            sudo chmod -x /usr/local/bin/mangos.old
            sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "$FOLDER_HELPER" &>/dev/null
            cd "$FOLDER_HELPER" || exit
            printf '%b' "[${G1:?}OK${N0:?}] Installing new release\n"
            sleep 1
            sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin &>/dev/null
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] Installed!\n"
            # create installed mark
            install_mark_tool
            sleep 1 && exit
          else
            # install new upgrades
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            # non executable
            sudo chmod -x /usr/local/bin/mangos.old
            # install mangos script
            sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin/mangos &>/dev/null
            # make mangos executable
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] Installed!"
            echo
            echo
          fi
          # create installed mark
          install_mark_tool
          sleep 1 && exit
        fi
      fi

      ;;

      # update helper/tool done

      # fresh install (delete/git clone /cmangos-script)

    "2")

      read -t 5 -r -p "[YN] Reinstall (delete/git clone /cmangos-script)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        sudo mv /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] Installed mangos removed."
        echo
        sudo rm -r "$FOLDER_HELPER"
        printf '%b' "[${G1:?}OK${N0:?}] cmangos-script removed."
        echo
        sudo mkdir "${FOLDER_INSTALL:?}" &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] $FOLDER_INSTALL/> git clone.."
        echo
        cd "$FOLDER_INSTALL" || exit
        git clone "$GITHUB_HELPER"
        sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] Installing new release"
        sudo chmod +x /usr/local/bin/mangos
        echo
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] Installed!"
        echo
        echo
        sleep 2
        exit
      fi

      ;;

      # fresh install (delete/git clone /cmangos-script) done

      # reset --hard origin/master

    "3")

      read -t 5 -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]] &>/dev/null; then

        cd "$FOLDER_HELPER" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # update cmangos-script done

    esac

    ;;

    # Check logs

  "l")

    clear

    # realmd.log ###############################################################

    if [[ "$PIDOFMANGOSD" -eq "1" ]] &>/dev/null; then
      # if realm failed
      if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "Realm failed or halted"
        printf '%b' "[${R1:?}0H${N0:?}] Realm failed or halted!\n"
      else
        # look for empty tables
        if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          # count empty inside log
          COUNT_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." 2>&1)
          # if any, print "empty"
          printf '%b' "[${Y1:?}0E${N0:?}] Realm: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty, doesn't exist!\n"
        fi
        # look for error
        if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          # count errors inside log
          COUNT_ERROR_REALM=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
          # error rate (total)
          LOG_LINES=$(wc -l "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1 | awk '{ print $1 }' 2>&1)
          # calculate error rate
          CALC_ERROR_REALM=$(echo "scale=4; 100/$LOG_LINES*$COUNT_ERROR_REALM" 2>&1 | bc -l 2>&1)
          ERROR_RATE_REALM=$(echo "${CALC_ERROR_REALM:?}%")
          # genesis realm error rate
          GEN_R_ER=$(cat "${FOLDER_CORE:?}"/run/logs/RealmERRORrate.log 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
          GEN_R_ER="${GEN_R_ER:?}%"
          # if any, print "error"
          printf '%b' "[${R1:?}1E${N0:?}] Realm: ${R1:?}$COUNT_ERROR_REALM${N0:?} Error! ${GR:?}$ERROR_RATE_REALM ${N0:?}$GEN_R_ER${N0:?}\n"
        else
          # if nothing, print "ok"
          printf '%b' "[${G1:?}OK${N0:?}] Realm: OK!\n"
        fi
        # this database (realmd) is out of date!
        if grep -q -E "You\shave:\s-->" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          printf '%b' "[${Y1:?}0D${N0:?}] Realm database is out of date!\n"
          printf '%b' "[${G0:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
        fi
        # databases is missing or corrupt.
        if grep -q -E "\sdatabase\sis\smissing\sor\scorrupt." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          printf '%b' "[${R1:?}X0${N0:?}] Realm database is missing or corrupt!\n"
        fi
        # reinstall your (realmd) database
        if grep -q -E "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          printf '%b' "[${R1:?}X1${N0:?}] Reinstall your realm database!\n"
        fi
        # can't connect to local mysql through socket
        if grep -q -E ".*Can't\sconnect\sto\slocal\sMySQL*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          printf '%b' "[${R1:?}X2${N0:?}] Realm can't connect to local MySQL!\n"
        fi
        # your realmd.conf version indicates your conf file is out of date
        if grep -q -E ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
          printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
        fi
      fi

      # server.log ###############################################################

      # if world failed
      if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        # if any, print "World failed or halted"
        printf '%b' "[${R1:?}0H${N0:?}] World failed or halted!\n"
      else
        # look for empty tables
        if grep -q -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # count empty inside log
          COUNT_EMPTY=$(grep -E -v "ERROR*.|Only expired mails*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty|is\sempty." 2>&1)
          # if any, print "empty"
          printf '%b' "[${Y1:?}0E${N0:?}] World: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty or doesn't exist!\n"
        fi
        # look for error
        if grep -q -E ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # count errors inside log
          COUNT_ERROR_SERVER=$(grep -E -v ".*is empty*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | grep -c -E ".*ERROR*." 2>&1)
          # error rate (total)
          LOG_LINES=$(wc -l "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | awk '{ print $1 }' 2>&1)
          # calculate error rate
          CALC_ERROR_SERVER=$(echo "scale=4; 100/$LOG_LINES*$COUNT_ERROR_SERVER" 2>&1 | bc -l 2>&1)
          ERROR_RATE_SERVER="$(echo "${CALC_ERROR_SERVER:?}" 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)%"
          # genesis server error rate
          GEN_S_ER=$(cat "${FOLDER_CORE:?}"/run/logs/ServerERRORrate.log 2>&1 | awk '{ printf "%.2f\n", $1 }' 2>&1)
          GEN_S_ER="${GEN_S_ER:?}%"
          # if any, print "error"
          printf '%b' "[${R1:?}1E${N0:?}] World: ${R1:?}$COUNT_ERROR_SERVER${N0:?} Error! ${N0:?}${ERROR_RATE_SERVER:?} ${GR:?}$GEN_S_ER${N0:?}\n"
          # look for serious error
          if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
            # count serious errors inside log
            COUNT_ERROR_SERIOUS=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
            # if any, print "serious"
            printf '%b' "[${R1:?}X9${N0:?}] World has ${R1:?}$COUNT_ERROR_SERIOUS${N0:?} serious error!\n"
          fi
        else
          # if nothing, print "ok"
          printf '%b' "[${G1:?}OK${N0:?}] World OK!\n"
        fi
        # world failed
        if grep -q -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # if any, print "World failed"
          echo
          printf '%b' "$SERVER_LOG_FAILED"
          echo
        fi
        # this database (mangosd) is out of date!
        if grep -q -E "You\shave:\s-->" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          printf '%b' "[${GR:?}0D${N0:?}] World database is out of date!\n"
          printf '%b' "[${GR:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
        fi
        # databases is missing or corrupt.
        if grep -q -E "\sdatabase\sis\smissing\sor\scorrupt." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          printf '%b' "[${R1:?}X0${N0:?}] World database is missing or corrupt!\n"
        fi
        # reinstall your (mangosd) database
        if grep -q -E "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          printf '%b' "[${R1:?}X1${N0:?}] Reinstall your world database!\n"
        fi
        # can't connect to local mysql through socket
        if grep -q -E ".*Can't\sconnect\sto\slocal\sMySQL*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          printf '%b' "[${R1:?}X2${N0:?}] World can't connect to local MySQL!\n"
        fi
        # your mangosd.conf version indicates your conf file is out of date
        if grep -q -E ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
        fi

        # ahbot loaded and initialized
        if grep -q -E "Initialize AuctionHouseBot..." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # if any, print "AHbot ok"
          printf '%b' "[${G1:?}OK${N0:?}] AHbot\n"
        else
          # off
          printf '%b' "[${GR:?}NO${N0:?}] AHbot\n"
        fi
        # warden loaded
        if grep -q -E "Loading Warden scan database..." "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # if any, print "Warden ok"
          printf '%b' "[${G1:?}OK${N0:?}] Warden\n"
        else
          # off
          printf '%b' "[${GR:?}NO${N0:?}] Warden\n"
        fi
        # Playerbot loaded
        if grep -q -E "Playerbot: Using configuration file" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
          # if any, print "Playerbot ok"
          printf '%b' "[${G1:?}OK${N0:?}] Playerbot\n"
        else
          # offline
          printf '%b' "[${GR:?}NO${N0:?}] Playerbot\n"
        fi
        # startup time
        if STARTUP_TIME=$(grep "SERVER\sSTARTUP\sTIME*." "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1 | cut -d\  -f6-9 2>&1); then
          printf '%b' "[${G1:?}OK${N0:?}] World initialized! ${G1:?}$STARTUP_TIME${N0:?}\n"
        fi
      fi
    fi

    # table db_version in your [REALMD] database indicates that this database is out of date!
    if grep -q -E "You need.*|You have.*" "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
      A2B_W=$(grep -Eo "You have.*" "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1)
      B2A_W=$(grep -Eo "You need.*" "${FOLDER_CORE:?}"/run/logs/Realmd.log 2>&1)
      A2B_W=$(echo "$A2B_W" 2>&1 | tr -d '`' 2>&1)
      B2A_W=$(echo "$B2A_W" 2>&1 | tr -d '`' 2>&1)
      printf '%b' "[${R1:?}X3${N0:?}] Realm: ${GR:?}$A2B_W${N0:?}\n" # cat doing some coding today = ==/////0,
      printf '%b' "[${R1:?}X3${N0:?}] Realm: ${G1:?}$B2A_W${N0:?}\n"
      printf '%b' "[${R1:?}!!${N0:?}] Realm: ${GR:?}(d) Database > Apply all updates${N0:?}\n"
    fi

    # table db_version in your [WORLD] database indicates that this database is out of date!
    if grep -q -E "You need.*|You have.*" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
      A2B_R=$(grep -Eo "You have.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
      B2A_R=$(grep -Eo "You need.*" "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1)
      A2B_R=$(echo "$A2B_R" 2>&1 | tr -d '`' 2>&1)
      B2A_R=$(echo "$B2A_R" 2>&1 | tr -d '`' 2>&1)
      printf '%b' "[${R1:?}X3${N0:?}] World: ${GR:?}$A2B_R${N0:?}\n"
      printf '%b' "[${R1:?}X3${N0:?}] World: ${G1:?}$B2A_R${N0:?}\n"
      printf '%b' "[${R1:?}!!${N0:?}] World: ${GR:?}(d) Database > Apply all updates${N0:?}\n"
    fi

    echo
    printf '%b' "${G0:?}>${N0:?} hit Any key to go back."
    echo
    read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
    echo
    case $ans in
    "t")
      tail "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1
      echo
      read -r -p "Press Enter to continue" </dev/tty
      ;;
    "f")
      echo
      tail -f "${FOLDER_CORE:?}"/run/logs/Server.log 2>&1
      ;;
    "n")
      echo
      nano "${FOLDER_CORE:?}"/run/logs/Server.log
      ;;
    "N")
      echo
      nano "${FOLDER_CORE:?}"/run/logs/Realmd.log
      ;;

      # lnav

    "l")
      echo
      LOGS=("${FOLDER_CORE:?}"/run/logs/EventAIErrors.log
        "${FOLDER_CORE:?}"/run/logs/DBErrors.log
        "${FOLDER_CORE:?}"/run/logs/Realmd.log
        "${FOLDER_CORE:?}"/run/logs/Server.log)
      # is lnav installed?
      if ! [ -x "$(command -v lnav)" ] &>/dev/null; then
        sudo apt install lnav -y 2>&1
      fi
      lnav "${LOGS[@]}" 2>&1
      ;;

    esac

    ;;

    # check logs done

    # create/apply .patch file

  "p")

    HEIGHT=11
    WIDTH=34
    CHOICE_HEIGHT=4
    BACKTITLE="Patch"
    TITLE="Patch operations"
    MENU="Choose one option:"

    OPTIONS=(1 "Create new patch"
      2 "Apply existing patch"
      3 "Search for .patch files"
      4 "Delete all .patch files")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # create patch

    "1")

      echo "[!!] Please wait"
      sudo chown -R "$(whoami)":"$(groups 2>&1 | awk '{ print $1 }')" "${FOLDER_CORE:?}" &>/dev/null
      # change directory, core
      cd "${FOLDER_CORE:?}" || exit
      git checkout sql/create/db_create_mysql.sql 2>&1
      # create patch
      git diff >"${PATCH:?}"
      printf '%b' "${G1:?}${PATCH:?}${N0:?} Created!\n"
      sleep 2

      ;;

      # create patch done

      # apply patch

    "2")

      cd "${FOLDER_CORE:?}" || exit
      if [ ! -z "$PATCH" ] &>/dev/null; then
        PATCH_FILES=$(sudo find "${FOLDER_WOW:?}" -name "*.patch" 2>&1)
        if [ -z "$PATCH_FILES" ] &>/dev/null; then
          # non responsive
          PATCH_FILES="${GR:?}[!!] No files found!${N0:?}"
        fi
        echo "Patch files inside ${FOLDER_WOW:?}:"
        echo
        printf '%b' "${G0:?}$PATCH_FILES${N0:?}\n"
        echo
        printf '%b' "${GR:?}Press Enter to go back${N0:?}\n"
        printf '%b' "Enter name /${GR:?}name.patch${N0:?}\n"
        read -r NAMED_PATCH
        if [ -z "$NAMED_PATCH" ] &>/dev/null; then
          # non responsive
          echo "[!!] Empty!"
          sleep 1
        else
          # named patch
          patch -p1 <"$NAMED_PATCH"
        fi
      else
        # named patch ruled by configuration
        patch -p1 <"$PATCH"
      fi

      ;;

      # apply patch done

      # search for .patch files

    "3")

      PATCH_FILES=$(sudo find "${FOLDER_WOW:?}" -name "*.patch" 2>&1)
      if [ -z "$PATCH_FILES" ] &>/dev/null; then
        # non responsive
        PATCH_FILES="${GR:?}No files found!${N0:?}"
      fi
      echo "Patch files inside ${FOLDER_WOW:?}:"
      echo
      printf '%b' "${G0:?}$PATCH_FILES${N0:?}\n"
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # remove patch files (all of them)

    "4")

      cd "${FOLDER_CORE:?}" || exit
      if [ ! -z "$PATCH" ] &>/dev/null; then
        PATCH_FILES=$(sudo find "${FOLDER_WOW:?}" -name "*.patch" 2>&1)
        if [ -z "$PATCH_FILES" ] &>/dev/null; then
          NOFILES="1"
          # non responsive
          PATCH_FILES="${GR:?}No files found!${N0:?}"
        else
          NOFILES="0"
        fi
        echo "Removing:"
        echo
        printf '%b' "${GR:?}$PATCH_FILES${N0:?}\n"
        echo
        # remove all .patch files inside core folder
        sudo rm -r "${FOLDER_CORE:?}"/*.patch* &>/dev/null
        if [[ "$NOFILES" -eq "1" ]] &>/dev/null; then
          sleep 1
          printf '%b' "[${Y1:?}ok${N0:?}]\n"
          sleep 1
        else
          sleep 1
          printf '%b' "[${G1:?}OK${N0:?}]\n"
          sleep 1
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # remove patch files (all of them) done

    esac

    ;;

    # search for .patch files done

    # create/apply .patch file done

    # online check

  "o")

    # is fping installed?
    if ! [ -x "$(command -v fping)" ] &>/dev/null; then
      sudo apt-get install fping -y 2>&1
    fi
    printf '%b' "Online check -> ${G1:?}internet${N0:?}/${G1:?}intranet${N0:?}\n"
    echo
    # internet
    if nc -z "${INTERNET:?}" "${REALM_PORT:?}" &>/dev/null; then
      PING_MS=$(fping -c 1 "$INTERNET" 2>&1 | grep -o '[0-9].[0-9][0-9] ms' 2>&1)
      PING_LOSS=$(fping -c 1 "$INTERNET" 2>&1 | grep -o '[0-100]% loss' 2>&1)
      printf '%b' "${G0:?}✓${N0:?} $INTERNET - ${CY:?}$SERVER_NAME${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$INTERNET - $SERVER_NAME - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    # intranet
    if nc -z "${INTRANET:?}" "${REALM_PORT:?}" &>/dev/null; then
      PING_MS=$(fping -c 1 "$INTRANET" 2>&1 | grep -o '[0-9].[0-9][0-9] ms' 2>&1)
      PING_LOSS=$(fping -c 1 "$INTRANET" 2>&1 | grep -o '[0-100]% loss' 2>&1)
      printf '%b' "${G0:?}✓${N0:?} $INTRANET - ${CY:?}${SERVER_NAME_LAN:?}${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$INTRANET - $SERVER_NAME_LAN - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    echo
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # online check done

    # edit/copy config files?

  "e")

    HEIGHT=22
    WIDTH=61
    CHOICE_HEIGHT=15
    BACKTITLE="Server configuration"
    TITLE="Configurations"
    MENU="Choose one option:"

    OPTIONS=(1 "server.txt              Helper/Tool config"
      2 "server.cnf              MySQL config"
      3 "mangos.conf             MaNGOS config"
      4 "realmd.conf             Realmd config"
      5 "ahbot.conf              Auction House Bot config"
      6 "playerbot.conf          Player Bot config"
      7 "aiplayerbot.conf        Ike3 Bot config"
      8 "anticheat.conf          Anti Cheat config"
      9 "InstallFullDB           Install Full DB config"
      10 "mangos.conf.dist        original"
      11 "realmd.conf.dist        original"
      12 "ahbot.conf.dist         original"
      13 "anticheat.conf.dist     original"
      14 "playerbot.conf.dist     original"
      15 "aiplayerbot.conf.dist   original")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in
    "1") nano "$FOLDER_INSTALL"/server.txt ;;
    "2") nano "$FOLDER_INSTALL"/server.cnf ;;
    "3") nano "${FOLDER_CORE:?}"/run/etc/mangosd.conf ;;
    "4") nano "${FOLDER_CORE:?}"/run/etc/realmd.conf ;;
    "5") nano "${FOLDER_CORE:?}"/run/etc/ahbot.conf ;;
    "6") nano "${FOLDER_CORE:?}"/run/etc/playerbot.conf ;;
    "7") nano "${FOLDER_CORE:?}"/run/etc/aiplayerbot.conf ;;
    "8") nano "${FOLDER_CORE:?}"/run/etc/anticheat.conf ;;
    "9") nano "$FOLDER_DB"/InstallFullDB.config ;;
    "10") nano "${FOLDER_CORE:?}"/run/etc/mangosd.conf.dist ;;
    "11") nano "${FOLDER_CORE:?}"/run/etc/realmd.conf.dist ;;
    "12") nano "${FOLDER_CORE:?}"/run/etc/ahbot.conf.dist ;;
    "13") nano "${FOLDER_CORE:?}"/run/etc/anticheat.conf.dist ;;
    "14") nano "${FOLDER_CORE:?}"/run/etc/playerbot.conf.dist ;;
    "15") nano "${FOLDER_CORE:?}"/run/etc/aiplayerbot.conf.dist ;;
    esac

    ;;

  "q") exit ;;
  "Q") echo "CAPS ON!" ;;
  *) ;;

  esac

done

# edit/copy config files done

# b9ea65cd1e2b40cfcbf777559ef0c9ca
