#!/bin/bash

# script

############################################################################
#                      C M a N G O S  -  H E L P E R                       #
#               Continued Massive Network Game Object Server               #
############################################################################

# Built on a Linux ubuntu 5.4.0-1028-raspi - (Raspberry Pi4)
# https://ubuntu.com/download/raspberry-pi

# C(ontinued)-MaNGOS (Classic fork)

# By Rainman
# V20211002
# 4.9.4.1

# codes
while :; do

  # config directory
  # shellcheck disable=SC1091
  source /home/server.txt # please edit if wrong.

  # color
  B0='\e[34m'   # Blue
  B1='\e[94m'   # Blue light
  CY='\e[36m'   # Cyan
  C1='\e[96m'   # Cyan light
  G0='\e[32m'   # Green
  G1='\e[92m'   # Green light
  GR='\e[90m'   # Grey
  N0='\033[0m'  # No color
  P0='\e[0;35m' # Purple
  P1='\e[1;35m' # Purple light
  R0='\e[31m'   # Red
  R1='\e[91m'   # Red light
  Y0='\e[33m'   # Yellow
  Y1='\e[93m'   # Yellow light

  # effects
  UND='\e[4m' # Underline

  # themes, must contain a number
  # shellcheck disable=SC2153
  # shellcheck disable=SC2154
  # shellcheck disable=SC2034
  if [[ $THEME =~ [0-9] ]] 2>/dev/null; then
    if [ -z "$THEME" ] 2>/dev/null; then
      # NULL, print white theme (safemode)
      THEMES="${N0:?}"
    fi
    if [[ "$THEME" -gt "13" ]] 2>/dev/null; then
      # greater than n, print white theme (safemode)
      THEMES="${N0:?}"
    fi
    if [[ "$THEME" -lt "0" ]] 2>/dev/null; then
      # less than zero, print white theme (safemode)
      THEMES="${N0:?}"
    fi
    # configuration ruled by config
    if [[ "$THEME" -eq "0" ]] 2>/dev/null; then
      # white theme
      THEMES="${N0:?}"
    elif [[ "$THEME" -eq "1" ]] 2>/dev/null; then
      # red light theme
      THEMES="${R1:?}"
    elif [[ "$THEME" -eq "2" ]] 2>/dev/null; then
      # red theme
      THEMES="${R0:?}"
    elif [[ "$THEME" -eq "3" ]] 2>/dev/null; then
      # blue light theme
      THEMES="${B1:?}"
    elif [[ "$THEME" -eq "4" ]] 2>/dev/null; then
      # blue theme
      THEMES="${B0:?}"
    elif [[ "$THEME" -eq "5" ]] 2>/dev/null; then
      # cyan light theme
      THEMES="${C1:?}"
    elif [[ "$THEME" -eq "6" ]] 2>/dev/null; then
      # cyan theme
      THEMES="${CY:?}"
    elif [[ "$THEME" -eq "7" ]] 2>/dev/null; then
      # purple light theme
      THEMES="${P1:?}"
    elif [[ "$THEME" -eq "8" ]] 2>/dev/null; then
      # purple theme
      THEMES="${P0:?}"
    elif [[ "$THEME" -eq "9" ]] 2>/dev/null; then
      # yellow light theme
      THEMES="${Y1:?}"
    elif [[ "$THEME" -eq "10" ]] 2>/dev/null; then
      # yellow theme
      THEMES="${Y0:?}"
    elif [[ "$THEME" -eq "11" ]] 2>/dev/null; then
      # green light theme
      THEMES="${G1:?}"
    elif [[ "$THEME" -eq "12" ]] 2>/dev/null; then
      # green theme
      THEMES="${G0:?}"
    elif [[ "$THEME" -eq "13" ]] 2>/dev/null; then
      # black light (grey) theme
      THEMES="${GR:?}"
    fi
  else
    # non numerical value, print white theme (safemode)
    THEMES="${N0:?}"
    printf '%b' "${R1:?}Theme config contains non numerical value!${N0:?}\n"
    printf '%b' "${Y1:?}Fix your configuration! ${GR:?}server.txt${Y1:?}${N0:?}\n"
    read -r -p "Press Enter to go back" </dev/tty
  fi

  # dialog, ncurses no utf8 acs
  # ! -> https://github.com/scarygliders/X11RDP-o-Matic/issues/45
  export NCURSES_NO_UTF8_ACS=1

  # get database info
  if mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(online) FROM ${DB_CHARACTERS:?}.characters;" &>/dev/null; then
    MENU_ON_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(online) FROM ${DB_CHARACTERS:?}.characters;" 2>/dev/null)
  else
    MENU_ON_COUNT=$(printf '%b' "${R0:?}0${N0:?}")
  fi
  if mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.guild;" &>/dev/null; then
    MENU_GU_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.guild;" 2>/dev/null)
  else
    MENU_GU_COUNT=$(printf '%b' "${R0:?}0${N0:?}")
  fi

  # get date
  NOW="$(date +"%m.%d.%Y")"

  # get load
  LOAD="$(while IFS= read -r i; do echo "${i%?}"; done </proc/loadavg 2>/dev/null | awk '{ print $1,$2,$3 }')"

  # get pid of realmd, mangosd
  PIDOF_REALMD=$(pidof $REALM_SERVICE 2>/dev/null | wc -w 2>/dev/null)
  PIDOFMANGOSD=$(pidof $WORLD_SERVICE 2>/dev/null | wc -w 2>/dev/null)

  # realmd service
  case "$(echo "$PIDOF_REALMD")" in
  0) MENU_REALMD="${GR:?}Realm${N0:?}" ;;
  1) MENU_REALMD="${G0:?}Realm${N0:?}" ;;
  *) MENU_REALMD="${Y0:?}Realm${N0:?}" ;;
  esac

  # mangosd service
  case "$(echo "$PIDOFMANGOSD")" in
  0) MENU_MANGOSD="${GR:?}MaNGOS${N0:?}" ;;
  1) MENU_MANGOSD="${G0:?}MaNGOS${N0:?}" ;;
  *) MENU_MANGOSD="${Y0:?}MaNGOS${N0:?}" ;;
  esac

  # this is for docker users
  if [ -f /.dockerenv ]; then
    # docker realmd status
    if screen -list 2>/dev/null |
      grep -q "realmd" &>/dev/null; then
      MENU_REALMD="${G0:?}Realm${N0:?}"
      PIDOFMANGOSD="1"
    else
      MENU_REALMD="${GR:?}Realm${N0:?}"
      PIDOFMANGOSD="0"
    fi
    # docker mangosd status
    if screen -list 2>/dev/null |
      grep -q "mangosd" &>/dev/null; then
      MENU_MANGOSD="${G0:?}MaNGOS${N0:?}"
      PIDOFMANGOSD="1"
    else
      MENU_MANGOSD="${GR:?}MaNGOS${N0:?}"
      PIDOFMANGOSD="0"
    fi
  fi

  # codes done

  # menu
  clear
  printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -${N0:?}
    _____ _____     _____ _____ _____ _____
   |     |     |___|   | |   __|     |   __|
   |   --| | | | .'| | | |  |  |  |  |__   |${THEMES:?}
   |_____|_|_|_|__,|_|___|_____|_____|_____|${N0:?}
           C(ontinued)-MaNGOS Helper${GR:?}
              - - - - - - - - - -${N0:?}
               Online Players $MENU_ON_COUNT
                   Guilds $MENU_GU_COUNT

                $LOAD
                $MENU_MANGOSD $GR|$N0 $MENU_REALMD

   A : Login (command)      t : Characters
   a : Create account       u : Accounts
   c : Check for updates    g : Guilds
   m : Update CMaNGOS       e : Config
   d : Update Database      p : Patch
   w : Update Helper        o : Ping
   s : Shutdown server      l : Logs
   r : Restart server       q : Quit

"
  read -r -n1 -s
  case "$REPLY" in

  # menu done

  "a")

    # codes
    AC_COUNT=$(mysql --defaults-extra-file="$SQL_MYCNF" -N --execute="SELECT count(*) FROM ${DB_REALMD:?}.account;" 2>/dev/null)
    BN_COUNT=$(mysql --defaults-extra-file="$SQL_MYCNF" -N --execute="SELECT count(*) FROM $DB_REALMD.account_banned;" 2>/dev/null)
    # codes done

    # menu
    clear
    printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -
${N0:?}                                       __
   .---.-.----.----.-----.--.--.-----.|  |_
   |  _  |  __|  __|  _  |  |  |     ||   _|${THEMES:?}
   |___._|____|____|_____|_____|__|__||____|
           ${N0:?}C(ontinued)-MaNGOS Helper
             ${GR:?}- - - - - - - - - -${N0:?}

                Accounts${G0:?}...:${N0:?} $AC_COUNT
                Banned${G0:?}.....:${N0:?} $BN_COUNT

                    ${THEMES:?}Info:

           ${G0:?}Select account operation${N0:?}

              c : Create account
              d : Delete account

>"

    read -r -n1 -s
    case "$REPLY" in

    # create account

    "c")

      clear
      printf '%b' "${GR:?} - - - - - - - - - - - - - - - - - - - - - - -${N0:?}

           ${N0:?}0: Vanilla${G0:?}
           1: The Burning Crusade
           2: Wrath of the Lich King

           ${N0:?}0: Player${G0:?}
           1: Moderator
           2: Game Master
           3: Administrator${N0:?}

      Minimum 5 characters account name.

        Create new account (${THEMES:?}username${N0:?})
        Set the (${THEMES:?}expansion${N0:?}) version.
        Set the (${THEMES:?}account${N0:?}) privilege.

        ${THEMES:?}Example${N0:?}: 'username' '0' '0'"

      # menu done

      # username, password, expansion, gmlevel

      echo
      echo
      echo "Username"
      read -r USR
      if [[ -z "$USR" ]]; then
        printf '%b' "empty"
        echo
      else
        printf '%b' "[${G1:?}OK${N0:?}] $USR"
        echo
        echo "Password"
        read -r -s PWD
        if [[ -z "$PWD" ]]; then
          printf '%b' "empty"
          echo
        else
          printf '%b' "[${G1:?}OK${N0:?}] Password"
          echo
          echo "Expansion - 0"
          read -r -s XPV
          if [[ -z "$XPV" ]]; then
            printf '%b' "empty"
            echo
          else
            printf '%b' "[${G1:?}OK${N0:?}] Expansion ($XPV)"
            echo
            echo "GMlevel - 0-3"
            read -r -s LVL
            if [[ -z "$LVL" ]]; then
              printf '%b' "empty"
              echo
            else
              printf '%b' "[${G1:?}OK${N0:?}] GMlevel ($LVL)"
              echo "${USER_NC:?}
${PASS_NC:?}
.account create $USR $PWD
.account set addon $USR $XPV
.account set gmlevel $USR $LVL" >"${FOLDER_WOW:?}"/tmp.txt
              nc -q 1 "${host_nc:?}" "${port_nc:?}" <"${FOLDER_WOW:?}"/tmp.txt
              rm "${FOLDER_WOW:?}"/tmp.txt
              echo
              echo
              printf '%b' "[${G1:?}OK${N0:?}] Account '${THEMES:?}$USR${N0:?}' ($XPV/$LVL) created."
              echo
              echo
            fi
          fi
        fi
      fi
      echo

      ;;

      # username, password, expansion, gmlevel done

      # create account done

      # delete account

    "d")

      # codes
      # check for backup
      # realmd backup
      FILE="$FOLDER_WOW/backup/$DB_REALMD-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        REALMD_BACKUP="[${R0:?}old${N0:?}]"
        echo
      else
        REALMD_BACKUP="[${G1:?}OK${N0:?}]"
        echo
      fi
      # characters backup
      FILE="$FOLDER_WOW/backup/$DB_CHARACTERS-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        CHARAC_BACKUP="[${R0:?}old${N0:?}]"
        echo
      else
        CHARAC_BACKUP="[${G1:?}OK${N0:?}]"
        echo
      fi
      # codes done

      # menu
      clear
      echo
      printf '%b' "${R0:?}
 @@@@@@@  @@@@@@@@ @@@      @@@@@@@@ @@@@@@@ @@@@@@@@
 @@!  @@@ @@!      @@!      @@.        @@!   @@!
 @!@  !@! @!!!.:   @!!      @!!.:!     @!!   @!!!:.
 .!.  .!! !.:      !!.      .!:        !.:   !!.
 .: :  .  : .:  .. : .: : . . :. :.:    .    : .: .:.${N0:?}

 Note: Make sure you have backup laying around!
 $REALMD_BACKUP$CHARAC_BACKUP

 Delete by id ->
 ${CY:?}Examples${N0:?}: 'id' - 'id1,id2' - 'id1 AND id5'
 Delete by username ->
 ${CY:?}Examples${N0:?}: 'username' - 'username1,username2'
 Select (${G0:?}username${N0:?}) or (${G0:?}id${N0:?}) - Press Enter To Confirm"

      echo
      echo
      read -r -p " Show list" </dev/tty
      echo
      mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT username, gmlevel, id FROM $DB_REALMD.account;"
      echo
      printf '%b' " Delete directly from '${CY:?}$DB_REALMD.account${N0:?}'"
      echo

      printf '%b' "

>"
      read -r ID
      echo
      if [[ -z "$ID" ]]; then
        printf '%s\n' "empty"
      else
        DELETED=$(printf '%b' "${R1:?}DELETE${N0:?} '$ID' ${R1:?}?!${N0:?}")
        echo
        read -r -p "$DELETED

[YN] Are You Sure? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # delete by id -> examples: ('id') (id1,id2,) & (id1 AND id5)
          mysql --defaults-extra-file="$SQL_MYCNF" --execute="DELETE FROM $DB_REALMD.account WHERE id = $ID;" &>/dev/null
          mysql --defaults-extra-file="$SQL_MYCNF" --execute="DELETE FROM $DB_REALMD.account WHERE id IN ($ID);" &>/dev/null
          mysql --defaults-extra-file="$SQL_MYCNF" --execute="DELETE FROM $DB_REALMD.account WHERE id BETWEEN $ID;" &>/dev/null
          # delete by username -> examples: ('username') & (username1,username2,)
          mysql --defaults-extra-file="$SQL_MYCNF" --execute="DELETE FROM $DB_REALMD.account WHERE username='$ID';" &>/dev/null
          mysql --defaults-extra-file="$SQL_MYCNF" --execute="DELETE FROM $DB_REALMD.account WHERE username IN ($ID);" &>/dev/null
          sleep 1
          echo
          echo " kek!"
          printf '%b' "(∩ ᐛ )⊃━━ "
          sleep 3
          printf '%b' "^${Y0:?}｡·.·${N0:?}ﾟ${Y0:?}★☆ﾟ.｡*${N0:?}(つ﹏⊂)${Y0:?}?･ ｡★·"
          sleep 2
          printf '%b' ".${N0:?}..poof!"
          sleep 1
          echo
          echo
          printf '%b' "$ID ${N0:?}..vanished!"
          sleep 1
          echo
          echo
        fi
      fi
      echo

      ;;

    *)
      echo "empty"
      echo
      ;;
    esac
    read -r -p "Press Enter to continue" </dev/tty
    echo

    ;;

    # menu done

    # delete account done

    # Login (command)

    # * f★★ck; b7122@rd >> @ct1vlz1★n && chln@.

  "A")

    while :; do
      clear

      # codes

      # realmd service
      case "$(echo "$PIDOF_REALMD")" in
      0) COMMAND_REALMD="[${R1:?}off${N0:?}]" ;;
      1) COMMAND_REALMD="[${G1:?}OK${N0:?}]" ;;
      *) COMMAND_REALMD="[${Y1:?}ok${N0:?}]" ;;
      esac

      # mangosd service
      case "$(echo "$PIDOFMANGOSD")" in
      0) COMMAND_MANGOSD="[${R1:?}off${N0:?}]" ;;
      1) COMMAND_MANGOSD="[${G1:?}OK${N0:?}]" ;;
      *) COMMAND_MANGOSD="[${Y1:?}ok${N0:?}]" ;;
      esac

      # Thank you! -> https://stackoverflow.com/questions/59862020

      # shellcheck disable=SC2034  # Unused variables left for readability
      # init_colors
      init_colors() {
        RESET=$(tput sgr0)
        BOLD=$(tput bold)
        BLACK=$(tput setaf 0)
        RED=$(tput setaf 1)
        GREEN=$(tput setaf 2)
        YELLOW=$(tput setaf 3)
        BLUE=$(tput setaf 4)
        MAGENTA=$(tput setaf 5)
        CYAN=$(tput setaf 6)
        WHITE=$(tput setaf 7)
        USER_COLOR=$BOLD
      }

      # colorstring reads from stdin and uses parameter 1 as an escape sequence
      # with more parameters the first is used as a color, the other as the string to be modified
      # It will set colors until the last space sqquence
      colorstring() {
        case $# in
        0) # invalid
          echo "colorstring called without parameters"
          ;;
        1)
          sed -r "s/^.*[^ ]/$1&${RESET}/"
          ;;
        *)
          COLOR="$1"
          shift
          sed -r "s/^.*[^ ]/${COLOR}&${RESET}/" <<<"$@"
          ;;
        esac
      }
      dot_field() {
        # todo: Change implementation when field can be 2 words with a space in between
        printf "%-12.12s" "$1" | colorstring "${WHITE}" | tr ' ' '.'
        # The : must be printed in a second statement when you don't want cyan dots.
        printf ':'
      }
      # todo: Change implementation when field can be 2 words with a space in between
      space_number() {
        printf "%-9.9s" "$1" | colorstring "${GREEN}"
      }
      # todo: add logic when only 4 parameters are given
      printline() {
        echo "   $(dot_field "$1") $(space_number "$2")$(dot_field "$3") $(space_number "$4")$(dot_field "$5") $(space_number "$6")"
      }
      # init the color variables
      init_colors

      # log data

      # Realmd.log

      # look for error
      if grep -E -q ".*ERROR*." "${FOLDER_CORE:?}"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "error"
        CM_REALMD_LOG="[${R1:?}E${N0:?}]"
      else
        # if nothing, print "ok"
        CM_REALMD_LOG="[${G0:?}✓${N0:?}]"
      fi
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log &>/dev/null; then
        # if any, print "empty"
        CM_REALMD_LOG_EMPTY="[${Y1:?}E${N0:?}]"
      fi
      # Realmd.log done

      # Server.log

      # look for error
      if grep -E -q ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log &>/dev/null; then
        # if any, print "error"
        CM_SERVER_LOG="[${R1:?}E${N0:?}]"
      else
        # if nothing, print "ok"
        CM_SERVER_LOG="[${G0:?}✓${N0:?}]"
      fi
      # look for empty tables
      if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Server.log &>/dev/null; then
        # if any, print "empty"
        CM_SERVER_LOG_EMPTY="[${Y1:?}E${N0:?}]"
      fi
      # look for serious error
      if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log &>/dev/null; then
        # if any, print "serious"
        CM_SERVER_LOG_SERIOUS="[${R1:?}Serious${N0:?}]"
      fi

      if [ ! -f "$FOLDER_CORE"/run/logs/Server.log ]; then
        # non responsive
        CM_SERVER_LOG="[${GR:?}✗${N0:?}]"
      fi
      if [ ! -f "$FOLDER_CORE"/run/logs/Realmd.log ]; then
        # non responsive
        CM_REALMD_LOG="[${GR:?}✗${N0:?}]"
      fi

      # Server.log done

      # check for backup

      # realmd backup
      FILE="$FOLDER_WOW/backup/$DB_REALMD-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        REALMD_BACKUP="[${R0:?}old${N0:?}]"
      else
        REALMD_BACKUP="[${G1:?}OK${N0:?}]"
      fi
      # characters backup
      FILE="$FOLDER_WOW/backup/$DB_CHARACTERS-$NOW.sql"
      if [ ! -f "$FILE" ]; then
        CHARAC_BACKUP="[${R0:?}old${N0:?}]"
      else
        CHARAC_BACKUP="[${G1:?}OK${N0:?}]"
      fi

      # world server latest build
      if grep -q -o -a "\sBuilt\son\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
        # if any, print "built date"
        LATEST_WORLD_BUILT=$(grep -o -a "\sBuilt\son\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        LATEST_WORLD_BUILT="${GR:?}Built on Nov 23 2004 at 10:00:01${N0:?}"
      fi
      # built for
      if grep -q -o -a "\sBuilt\sfor\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
        # if any, print "built for"
        BUILT_FOR=$(grep -o -a "\sBuilt\sfor\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        BUILT_FOR="${GR:?}Built for Linux_x00 (next-to-nothing)${N0:?}"
      fi
      # EventAI
      if grep -q -o -a "\sACID\s1.12.x\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
        # if any, print "EventAI"
        EVENTAI=$(grep -o -a "\sACID\s1.12.x\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        EVENTAI="${GR:?}ACID 0.00.x (Classic) for CMaNGOS-CLASSIC (0.00.X Client)${N0:?}"
      fi
      # World DB
      if grep -q -o -a "\s1.11\s*.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
        # if any, print "World DB"
        WORLD_DB=$(grep -Eo "Classic DB version.*" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null |
          sed 's/^ *//' 2>/dev/null)
      # if nothing, print "Restart server please.."
      else
        WORLD_DB="${GR:?}0.00 'Into the Abyss of nothing.' For Classic core z0000.${N0:?}"
      fi
      # cpu temp
      if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
        MENU_CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
          cut -c -4 2>/dev/null)
        MENU_PRINT_CPU_TEMP=$(printf '%b' "CPU Temp${G0:?}........:${N0:?} ${MENU_CPU_TEMP:?}c")
      else
        MENU_PRINT_CPU_TEMP=""
      fi
      # commit
      if grep -E "Using commit.*(.*)" "${FOLDER_CORE:?}"/run/logs/Server.log &>/dev/null; then
        COMMIT_HASH=$(grep -E "Using commit.*(.*)" "${FOLDER_CORE:?}"/run/logs/Server.log 2>/dev/null |
          grep -o "(.*)" 2>/dev/null | tr -d '()' 2>/dev/null | sed 's/^ *//' 2>/dev/null)
      else
        COMMIT_HASH="0000000000000000000000000000000000000000"
      fi
      # codes done

      printf '%b' "
   Realm${G0:?}.......:${G1:?} ${SERVER_NAME:?}${N0:?}
   World${G0:?}.......:${N0:?} $LATEST_WORLD_BUILT
   System${G0:?}......:${N0:?} $BUILT_FOR
   Commit Hash${G0:?}.:${GR:?} $COMMIT_HASH${N0:?}

   r : ${THEMES:?}Login${N0:?}   - Remote access  service.mangosd${G0:?}.:${N0:?} $COMMAND_MANGOSD
   l : ${THEMES:?}Logs${N0:?}    - Analyze logs   service.realmd${G0:?}..:${N0:?} $COMMAND_REALMD
   b : ${THEMES:?}Backup${N0:?}  - New backup
   h : ${THEMES:?}Reset${N0:?}   - Reset --hard   characters.sql${G0:?}..:${N0:?} $CHARAC_BACKUP
   p : ${THEMES:?}htop${N0:?}    - Process view   realmd.sql${G0:?}......:${N0:?} $REALMD_BACKUP
   m : ${THEMES:?}Maps${N0:?}    - Download maps
   w : ${THEMES:?}Stats${N0:?}   - World stats    Realmd.log${G0:?}......:${N0:?} $CM_REALMD_LOG_EMPTY$CM_REALMD_LOG
   q : ${THEMES:?}Quit${N0:?}    - Back to menu   Server.log${G0:?}......:${N0:?} $CM_SERVER_LOG_EMPTY$CM_SERVER_LOG$CM_SERVER_LOG_SERIOUS
   i : ${THEMES:?}Info${N0:?}    - Helper info    $MENU_PRINT_CPU_TEMP
\n"
      read -r -s -n1
      case "$REPLY" in

      # Information

      "i")

        clear
        printf '%b' "${N0:?}
     _____     __  __       _   _  _____  ____   _____
    / ____|   |  \/  |     | \ | |/ ____|/ __ \ / ____|
   | |        | \  / |     |  \| | |  __  |  | | (___
   | |ontinued| |\/| | __ _| .   | | |_ | |  | |\___ \\
   | |____    | |  | |/ _  | |\  | |__| | |__| |____) |
    \_____|   |_|  |_| (_| |_| \_|\_____|\____/ \____/
    http://cmangos.net\__,_|     Doing things right!

   ${G0:?}C(ontinued)-MaNGOS (Classic fork)${N0:?}

   EventAI
   ${GR:?}$EVENTAI${N0:?}
   World DB
   ${GR:?}$WORLD_DB${N0:?}

   ${THEMES:?}https://github.com/cmangos/mangos-classic${N0:?}
   ${THEMES:?}https://github.com/cmangos/classic-db${N0:?}

   ${G0:?}C(ontinued)-MaNGOS - Helper${N0:?}

   ${THEMES:?}https://github.com/Daedalus-code/cmangos-script${N0:?}

   This script was built on a ubuntu system - (Raspberry Pi4)
   https://ubuntu.com/download/raspberry-pi

   Functions and features for admins running a WoW Vanilla server.

   Planned Features: Time will tell.

   ---What

   * Install this script on a ubuntu system, make everything more easy.
   * Connect to a MySQL server outside or localhost
   * Download latest core/database updates
   * Upgrade Database with latest fixes
   * Compile CMaNGOS with latest fixes
   * Download/Install classic maps
   * Setup RA for account tools
   * Profit

${G0:?}>${N0:?} hit Enter to go back.
${N0:?}"
        echo
        read -r -p ">" </dev/tty

        ;;

        # Information done

        # seedbox menu

      "m")

        # get remote information from transmission, create a file
        transmission-remote -t all -i >/var/log/ms/transmission_list 2>/dev/null
        # pidof transmission-daemon, cli, pid/status
        PIDOFP2P_CLI=$(pidof transmission-cli 2>/dev/null)
        PIDOFP2P_DAE=$(pidof transmission-daemon 2>/dev/null)

        # codes
        if ! [ -x "$(command -v transmission-cli)" ]; then
          SEED_TRANSMISSION="${GR:?}Not Installed!${N0:?}"
          INTRANET_SEED="${GR:?}0.0.0.0:9091${N0:?}"
          P2P_FILE_NAME="${GR:?}vanilla_maps.zip${N0:?}"
          P2P_DWNS="${GR:?}N/A${N0:?} "
          P2P_UPLS="${GR:?}N/A${N0:?} "
          P2P_STAT="${GR:?}N/A${N0:?}"
          P2P_PROG="${GR:?}N/A${N0:?}"
          P2P_RATI="${GR:?}N/A${N0:?}"
        else
          if [ -f /var/log/ms/transmission_list ]; then
            # cat that file
            P2P_INFO=$(cat /var/log/ms/transmission_list 2>/dev/null)
            # peers, connected, seeding to, downloading from
            P2P_PEERS_CONNECTED=$(echo "$P2P_INFO" 2>/dev/null | grep "Peers" 2>/dev/null | awk '{ print $4 }' 2>/dev/null | awk -F, '{ print $1 }' 2>/dev/null)
            P2P_PEERS_SEEDINGTO=$(echo "$P2P_INFO" 2>/dev/null | grep "Peers" 2>/dev/null | awk '{ print $7 }' 2>/dev/null | awk -F, '{ print $1 }' 2>/dev/null)
            P2P_PEERS_DOWN_LOAD=$(echo "$P2P_INFO" 2>/dev/null | grep "Peers" 2>/dev/null | awk '{ print $10 }' 2>/dev/null)
            # get progress
            if echo "$P2P_INFO" 2>/dev/null | grep -q -o "Percent Done: 100%" 2>/dev/null; then
              P2P_FILE_NAME="${N0:?}vanilla_maps.zip${N0:?}"
            else
              P2P_FILE_NAME="${GR:?}vanilla_maps.zip${N0:?}"
            fi
            # get progress
            if echo "$P2P_INFO" 2>/dev/null | grep -q -o "Percent Done: 100%" 2>/dev/null; then
              P2P_PROG="${G1:?}100%${N0:?}"
            else
              P2P_PROG=$(echo "$P2P_INFO" 2>/dev/null | grep -Eo "Percent Done:.*" 2>/dev/null |
                awk '{ print $3 }' 2>/dev/null)
            fi
            # get download stats
            P2P_DWNS=$(echo "$P2P_INFO" 2>/dev/null | grep -o "Downloaded:.*" 2>/dev/null |
              awk '{ print $2 }' 2>/dev/null)
            P2P_DWNS=$(echo "$P2P_DWNS ")
            # get upload stats
            P2P_UPLS=$(echo "$P2P_INFO" 2>/dev/null | grep -o "Uploaded:.*" 2>/dev/null |
              awk '{ print $2 }' 2>/dev/null)
            P2P_UPLS=$(echo "$P2P_UPLS ")
            # get ratio
            P2P_RATI=$(echo "$P2P_INFO" 2>/dev/null | grep -o "Ratio:.*" 2>/dev/null |
              awk '{ print $2 }' 2>/dev/null)
            # get status
            P2P_STAT=$(echo "$P2P_INFO" 2>/dev/null | grep -o "State:.*" 2>/dev/null |
              awk '{ print $2 }' 2>/dev/null)
          fi
          # transmission-daemon status
          case "$(pidof transmission-daemon 2>/dev/null | wc -w 2>/dev/null)" in
          "0")

            SEED_TRANSMISSION="${GR:?}Offline${N0:?}"
            INTRANET_SEED="${GR:?}0.0.0.0:9091${N0:?}"
            P2P_FILE_NAME="${GR:?}vanilla_maps.zip${N0:?}"
            P2P_DWNS="${GR:?}N/A${N0:?} "
            P2P_UPLS="${GR:?}N/A${N0:?} "
            P2P_STAT="${GR:?}N/A${N0:?}"
            P2P_PROG="${GR:?}N/A${N0:?}"
            P2P_RATI="${GR:?}N/A${N0:?}"
            P2P_PEERS_CONNECTED="${GR:?}N/A${N0:?}"
            SLASH=""

            ;;

          "1")

            SEED_TRANSMISSION="${G1:?}Online${N0:?}"
            INTRANET_SEED="${N0:?}${INTRANET:?}:9091${N0:?}"
            P2P_FILE_NAME="${N0:?}vanilla_maps.zip${N0:?}"
            SLASH="/"

            ;;

          "*")

            SEED_TRANSMISSION="${Y1:?}Online+${N0:?}"
            INTRANET_SEED="${Y1:?}${INTRANET:?}:9091${N0:?}"
            SLASH="/"

            ;;

          esac
        fi

        # codes done

        # seedbox menu

        clear
        echo
        printf '%b' "${N0:?}   CMaNGOS${N0:?} - ${THEMES:?}Vanilla Maps ${N0:?}Seedbox

   Seedbox${G0:?}..:${N0:?} $SEED_TRANSMISSION
   Access${G0:?}...:${N0:?} $INTRANET_SEED
   Filename${G0:?}.:${N0:?} $P2P_FILE_NAME
   Download${G0:?}.:${N0:?} $P2P_DWNS${GR:?}Unlimited${N0:?}
   Upload${G0:?}...:${N0:?} $P2P_UPLS${GR:?}128kb/s${N0:?}
   Status${G0:?}...:${N0:?} $P2P_STAT
   Progress${G0:?}.:${N0:?} $P2P_PROG
   Ratio${G0:?}....:${N0:?} $P2P_RATI
   Peers${G0:?}....:${G1:?} $P2P_PEERS_CONNECTED${N0:?}$SLASH${G0:?}$P2P_PEERS_SEEDINGTO${N0:?}$SLASH${Y1:?}$P2P_PEERS_DOWN_LOAD${N0:?}

   t : ${THEMES:?}Install${N0:?} - Setup$N0
   u : ${THEMES:?}Remove${N0:?}  - Uninstall$N0
   r : ${THEMES:?}Start${N0:?}   - Start p2p$N0
   s : ${THEMES:?}Stop${N0:?}    - Stop p2p$N0
   m : ${THEMES:?}Maps${N0:?}    - Import maps$N0
   i : ${THEMES:?}Info${N0:?}    - Torrent info$N0
   q : ${THEMES:?}Quit${N0:?}    - Return$N0

${N0:?}"
        read -r -s -n1
        case "$REPLY" in

        # transmission-remote information

        "i")

          # is seedbox running?
          if pidof transmission-daemon 2>/dev/null; then
            printf '%b' "${GR:?}INFO${N0:?}\n"
            # list statistical information from the server
            P2P_ST=$(transmission-remote -st)
            printf '%b' "${GR:?}$P2P_ST${N0:?}\n"
            echo
            # show details of the current torrent(s)
            P2P_T=$(transmission-remote -t all -i 2>/dev/null)
            printf '%b' "${N0:?}$P2P_T${N0:?}\n"
            echo
            # list session information from the server
            P2P_SI=$(transmission-remote -t all -si 2>/dev/null)
            printf '%b' "${GR:?}$P2P_SI${N0:?}\n"
            echo
            # list peers, if any
            P2P_PI=$(transmission-remote -t all -pi 2>/dev/null)
            printf '%b' "${N0:?}$P2P_PI${N0:?}\n"
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          else
            echo "Please Install/Start seedbox first!"
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          fi

          ;;

          # transmission-remote information

          # remove transmission-daemon

        "u")

          echo
          read -r -p "[YN] Remove Seedbox? (keeping maps) y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            echo "[OK] Please wait"
            # remove old file
            sudo rm -R /var/log/ms/transmission_list &>/dev/null
            sudo apt-get remove transmission-* --purge -y 2>/dev/null
          fi

          ;;

          # remove transmission-daemon done

          # setup seedbox (transmission)
          # ubuntu

        "t")

          echo
          read -r -p "[YN] Setup Seedbox? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            # already installed?
            if ! [ -x "$(command -v transmission-daemon)" ]; then
              # check for updates regardless
              echo "[OK] Please wait"
              sudo apt-get update &>/dev/null
              # clear the local repository of retrieved package files that are left in /var/cache.
              sudo apt-get clean &>/dev/null
              # clear the local repository of retrieved package files
              sudo apt-get autoclean &>/dev/null
              # remove packages that were automatically installed because some other package required them
              sudo apt-get -y --purge autoremove &>/dev/null
              # make sure unzip exist
              sudo apt-get install unzip -y &>/dev/null
              # install transmission-daemon
              sudo apt-get install transmission-daemon -y &>/dev/null
              # temporary stop ^
              sudo service transmission-daemon stop &>/dev/null
              # remove old config
              sudo rm /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
              # create 'seedbox' directory
              cd || exit
              sudo mkdir "/seedbox" &>/dev/null
              # fix folder owner
              sudo chown -R debian-transmission:debian-transmission /seedbox/ &>/dev/null
              # setup transmission-daemon configuration file
              # settings.json
              cat >"$FOLDER_WOW"/settings.json <<'EOF'
{
    "alt-speed-down": 50,
    "alt-speed-enabled": false,
    "alt-speed-time-begin": 540,
    "alt-speed-time-day": 127,
    "alt-speed-time-enabled": false,
    "alt-speed-time-end": 1020,
    "alt-speed-up": 50,
    "bind-address-ipv4": "0.0.0.0",
    "bind-address-ipv6": "::",
    "blocklist-enabled": true,
    "blocklist-url": "http://john.bitsurge.net/public/biglist.p2p.gz",
    "cache-size-mb": 16,
    "dht-enabled": true,
    "download-dir": "/seedbox",
    "download-queue-enabled": true,
    "download-queue-size": 5,
    "encryption": 1,
    "idle-seeding-limit": 30,
    "idle-seeding-limit-enabled": false,
    "incomplete-dir": "/seedbox",
    "incomplete-dir-enabled": false,
    "lpd-enabled": true,
    "message-level": 1,
    "peer-congestion-algorithm": "",
    "peer-id-ttl-hours": 6,
    "peer-limit-global": 100,
    "peer-limit-per-torrent": 50,
    "peer-port": 51413,
    "peer-port-random-high": 65535,
    "peer-port-random-low": 49152,
    "peer-port-random-on-start": false,
    "peer-socket-tos": "default",
    "pex-enabled": true,
    "port-forwarding-enabled": true,
    "preallocation": 1,
    "prefetch-enabled": true,
    "queue-stalled-enabled": true,
    "queue-stalled-minutes": 30,
    "ratio-limit": 2,
    "ratio-limit-enabled": false,
    "rename-partial-files": true,
    "rpc-authentication-required": false,
    "rpc-bind-address": "0.0.0.0",
    "rpc-enabled": true,
    "rpc-host-whitelist": "",
    "rpc-host-whitelist-enabled": false,
    "rpc-password": "{8cdc09d82992af11050cd6ca97c14f9117df07a1PiXvOluY",
    "rpc-port": 9091,
    "rpc-url": "/transmission/",
    "rpc-username": "mangos",
    "rpc-whitelist": "*.*.*.*",
    "rpc-whitelist-enabled": true,
    "scrape-paused-torrents-enabled": true,
    "script-torrent-done-enabled": false,
    "script-torrent-done-filename": "",
    "seed-queue-enabled": false,
    "seed-queue-size": 10,
    "speed-limit-down": 100,
    "speed-limit-down-enabled": false,
    "speed-limit-up": 128,
    "speed-limit-up-enabled": true,
    "start-added-torrents": true,
    "trash-original-torrent-files": false,
    "umask": 2,
    "upload-slots-per-torrent": 5,
    "utp-enabled": true
}
EOF
              # install to correct folder
              sudo mv "$FOLDER_WOW"/settings.json /var/lib/transmission-daemon/.config/transmission-daemon/settings.json &>/dev/null
              sleep 1
              # start transmission-daemon
              sudo service transmission-daemon start &>/dev/null
              echo
              printf '%b' "[${G1:?}OK${N0:?}] - Installed!\n"
              sleep 1
              # add magnet link: vanilla.maps.zip.torrent
              transmission-remote -a "magnet:?xt=urn:btih:1cdcaa3d77a7f4df79935d885e639903e37dda24&dn=vanilla%5Fmaps.zip&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce" &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] - Torrent added\n"
              # try to verify torrent data
              P2P_VERIFY=$(transmission-remote -t all -v 2>/dev/null)
              printf '%b' "[${Y1:?}ok${N0:?}] - Verifying data..\n"
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] - $P2P_VERIFY\n"
              sleep 1
              # reload
              sudo systemctl daemon-reload 2>/dev/null
              sleep 1
            else
              printf '%b' "SeedBox already installed!\n"
              sleep 2
            fi
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          fi

          ;;

          # setup seedbox (transmission) done

          # start seedbox (transmission)

        "r")

          echo
          read -r -p "[YN] Re/start seedbox? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # already installed?
            if [ -x "$(command -v transmission-daemon)" ]; then
              echo "[OK] Please wait"
              # find it, shut it down
              for PID in $(ps -ef 2>/dev/null | grep -E "transmission-cli|transmission-daemon" 2>/dev/null |
                awk '{print $2}'); do kill -9 $PID 2>/dev/null; done
              # go over it again, kill daemon, cli
              sudo kill -9 "$PIDOFP2P_DAE" &>/dev/null
              sudo kill -9 "$PIDOFP2P_CLI" &>/dev/null
              sudo service transmission-daemon stop &>/dev/null
              sleep 1
              sudo service transmission-daemon start &>/dev/null
              sleep 1
              # enable service
              sudo systemctl enable transmission-daemon &>/dev/null
              # reload
              sudo systemctl daemon-reload &>/dev/null
              echo
              printf '%b' "[${G1:?}OK${N0:?}] - seedbox started."
              echo
              sleep 1
            else
              echo "Install seedbox please!"
              sleep 1
              echo
              read -r -p "Press Enter to continue" </dev/tty
              echo
            fi
          fi

          ;;

          # start seedbox (transmission) done

          # stop seedbox (transmission)

        "s")

          echo
          read -r -p "[YN] Stop seedbox? y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # already installed?
            if [ -x "$(command -v transmission-daemon)" ]; then
              echo "[OK] Please wait"
              # find it, shut it down
              for PID in $(ps -ef 2>/dev/null | grep -E "transmission-cli|transmission-daemon" 2>/dev/null |
                awk '{print $2}'); do kill -9 $PID 2>/dev/null; done
              # go over it again, kill daemon, cli
              sudo kill -9 "$PIDOFP2P_DAE" &>/dev/null
              sudo kill -9 "$PIDOFP2P_CLI" &>/dev/null
              # stop transmission service
              sudo service transmission-daemon stop &>/dev/null
              sleep 1
              # disable service
              sudo systemctl disable transmission-daemon &>/dev/null
              # reload
              sudo systemctl daemon-reload &>/dev/null
              echo
              printf '%b' "${R1:?}Halted${N0:?} - seedbox stopped."
              echo
              sleep 1
            else
              echo "Install seedbox please!"
              sleep 1
              echo
              read -r -p "Press Enter to continue" </dev/tty
              echo
            fi
          fi

          ;;

          # stop seedbox (transmission) done

          # install maps

        "m")

          echo
          read -r -p "[YN] Install maps? (vanilla_maps.zip) y/n " -n 1 -r
          echo
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then

            # codes
            MAPS="$FOLDER_CORE"/run/maps/5332742.map
            MMAPS="$FOLDER_CORE"/run/mmaps/5332742.mmtile
            VMAPS="$FOLDER_CORE"/run/vmaps/Zulgurub_Ziggurat.wmo.vmo
            # codes done

            if [ -f "$MAPS" ] && [ -f "$MMAPS" ] && [ -f "$VMAPS" ]; then
              printf '%b' "[OK] Maps already installed."
              echo
              sleep 2
            else
              sudo unzip /seedbox/vanilla_maps.zip -d "$FOLDER_CORE"/run
              echo
              printf '%b' "[${G1:?}OK${N0:?}] - maps installed."
              echo
              sleep 1
            fi
          fi

          ;;

        esac

        ;;

        # install maps done

        # seedbox menu done

        # htop

      "p")

        if ! [ -x "$(command -v htop)" ]; then
          echo "Please wait"
          sudo apt-get install htop -y 2>/dev/null
        fi
        htop

        ;;

        # htop done

        # reset --hard (everything)

      "h")

        printf '%b' "[YN] 'reset --hard' (${Y1:?}EVERYTHING${N0:?}) Are You Sure? (y/n)"
        echo
        read -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          echo
          echo
          printf '%b' "${THEMES:?}[OK] mangos-classic${N0:?}: "
          cd "$FOLDER_CORE" || exit
          git reset --hard
          printf '%b' "${THEMES:?}[OK] classic-db${N0:?}: "
          cd "${FOLDER_DB:?}" || exit
          git reset --hard
          printf '%b' "${THEMES:?}[OK] cmangos-script${N0:?}: "
          cd "${FOLDER_HELPER:?}" || exit
          git reset --hard
          echo
          echo
          read -r -p "Press Enter to continue" </dev/tty
          echo
        fi

        ;;

        # reset --hard (everything) done

        # dive into logs

      "l")

        # codes
        # server.log.old
        DIVE_SERVER_OLD_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty.|.*empty*." "$FOLDER_CORE"/run/logs/Server.log.old 2>/dev/null)
        DIVE_SERVER_OLD_ERROR=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log.old 2>/dev/null)
        DIVE_SERVER_OLD_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log.old 2>/dev/null)
        DIVE_SERVER_OLD_IGNOR=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "$FOLDER_CORE"/run/logs/Server.log.old 2>/dev/null)
        DIVE_SERVER_OLD_POLYR=$(grep -c -E "Invalid poly ref" "$FOLDER_CORE"/run/logs/Server.log.old 2>/dev/null)
        if [[ -z "$DIVE_SERVER_OLD_EMPTY" || -z "$DIVE_SERVER_OLD_ERROR" || -z "$DIVE_SERVER_OLD_SERIO" || -z "$DIVE_SERVER_OLD_IGNOR" || -z "$DIVE_SERVER_OLD_POLYR" ]]; then
          # non responsive
          DIVE_SERVER_OLD_EMPTY="0"
          DIVE_SERVER_OLD_ERROR="0"
          DIVE_SERVER_OLD_SERIO="0"
          DIVE_SERVER_OLD_IGNOR="0"
          DIVE_SERVER_OLD_POLYR="0"
        fi
        # server.log
        DIVE_SERVER_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty.|.*empty*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
        DIVE_SERVER_ERROR=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
        DIVE_SERVER_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
        DIVE_SERVER_IGNOR=$(grep -c -E ".*ignoring*.|.*ignore*.|.*ignored*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
        DIVE_SERVER_POLYR=$(grep -c -E "Invalid poly ref" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
        if [[ -z "$DIVE_SERVER_EMPTY" || -z "$DIVE_SERVER_ERROR" || -z "$DIVE_SERVER_SERIO" || -z "$DIVE_SERVER_IGNOR" || -z "$DIVE_SERVER_POLYR" ]]; then
          # non responsive
          DIVE_SERVER_EMPTY="0"
          DIVE_SERVER_ERROR="0"
          DIVE_SERVER_SERIO="0"
          DIVE_SERVER_IGNOR="0"
          DIVE_SERVER_POLYR="0"
        fi
        # realmd.log
        DIVE_REALMD_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
        DIVE_REALMD_ERROR=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
        DIVE_REALMD_SERIO=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
        if [[ -z "$DIVE_REALMD_EMPTY" || -z "$DIVE_REALMD_ERROR" || -z "$DIVE_REALMD_SERIO" ]]; then
          # non responsive
          DIVE_REALMD_EMPTY="0"
          DIVE_REALMD_ERROR="0"
          DIVE_REALMD_SERIO="0"
        fi
        # DBErrors.log
        DIVE_DBERROR_CORR=$(grep -c -E "does\snot\shave\scorresponding" "$FOLDER_CORE"/run/logs/DBErrors.log 2>/dev/null)
        DIVE_DBERROR_EXIS=$(grep -c -E "doesn't\sexist" "$FOLDER_CORE"/run/logs/DBErrors.log 2>/dev/null)
        DIVE_DBERROR_QUER=$(grep -c -E "query\sERROR" "$FOLDER_CORE"/run/logs/DBErrors.log 2>/dev/null)
        DIVE_DBERROR_USED=$(grep -c -E "Option\swill\snever\sbe\sused" "$FOLDER_CORE"/run/logs/DBErrors.log 2>/dev/null)
        DIVE_DBERROR_CRAS=$(grep -c -E "can\scrash\sclient" "$FOLDER_CORE"/run/logs/DBErrors.log 2>/dev/null)
        if [[ -z "$DIVE_DBERROR_CORR" || -z "$DIVE_DBERROR_EXIS" || -z "$DIVE_DBERROR_QUER" || -z "$DIVE_DBERROR_USED" || -z "$DIVE_DBERROR_CRAS" ]]; then
          # non responsive
          DIVE_DBERROR_CORR="0"
          DIVE_DBERROR_EXIS="0"
          DIVE_DBERROR_QUER="0"
          DIVE_DBERROR_USED="0"
          DIVE_DBERROR_CRAS="0"
        fi
        # char.log
        DIVE_CHAR_CREATED=$(grep -c -E "Create\sCharacter" "$FOLDER_CORE"/run/logs/Char.log 2>/dev/null)
        DIVE_CHAR_LOGIN_C=$(grep -c -E "Login" "$FOLDER_CORE"/run/logs/Char.log 2>/dev/null)
        DIVE_CHAR_LOGOUTS=$(grep -c -E "Logout" "$FOLDER_CORE"/run/logs/Char.log 2>/dev/null)
        if [[ -z "$DIVE_CHAR_CREATED" || -z "$DIVE_CHAR_LOGIN_C" || -z "$DIVE_CHAR_LOGOUTS" ]]; then
          # non responsive
          DIVE_CHAR_CREATED="0"
          DIVE_CHAR_LOGIN_C="0"
          DIVE_CHAR_LOGOUTS="0"
        fi
        # EventAIErrors.log
        DIVE_EVENTAIERROR=$(grep -c -E "skipping" "$FOLDER_CORE"/run/logs/EventAIErrors.log 2>/dev/null)
        DIVE_EVENTAINOEFF=$(grep -c -E "Action\swill\snot\shave\sany\seffect." "$FOLDER_CORE"/run/logs/EventAIErrors.log 2>/dev/null)
        DIVE_EVENTAINONEX=$(grep -c -E "nonexistent|non-existing" "$FOLDER_CORE"/run/logs/EventAIErrors.log 2>/dev/null)
        DIVE_EVENTAI_NULL=$(grep -c -E ".*NULL*." "$FOLDER_CORE"/run/logs/EventAIErrors.log 2>/dev/null)
        DIVE_EVENTAINOTUS=$(grep -c -E "but\snot\sused" "$FOLDER_CORE"/run/logs/EventAIErrors.log 2>/dev/null)
        if [[ -z "$DIVE_EVENTAIERROR" || -z "$DIVE_EVENTAINOEFF" || -z "$DIVE_EVENTAINONEX" || -z "$DIVE_EVENTAI_NULL" || -z "$DIVE_EVENTAINOTUS" ]]; then
          # non responsive
          DIVE_EVENTAIERROR="0"
          DIVE_EVENTAINOEFF="0"
          DIVE_EVENTAINONEX="0"
          DIVE_EVENTAI_NULL="0"
          DIVE_EVENTAINOTUS="0"
        fi

        # Server.log, .old, Realmd.log
        DIVE_LOG_EMPTY=$(printf '%b' "${Y0:?}Empty..${N0:?}")
        DIVE_LOG_ERROR=$(printf '%b' "${R0:?}Error..${N0:?}")
        DIVE_LOG_IGNOR=$(printf '%b' "${R0:?}Ignore.${N0:?}")
        DIVE_LOG_SERIO=$(printf '%b' "${R1:?}Serious${N0:?}")
        DIVE_LOG_POLYR=$(printf '%b' "${R0:?}InvPoly${N0:?}")
        # DBErrors.log
        DIVE_LOG_CORRE=$(printf '%b' "${R0:?}NotCorresponding${N0:?}")
        DIVE_LOG_EXIST=$(printf '%b' "${R0:?}Doesn'tExist....${N0:?}")
        DIVE_LOG_QUERY=$(printf '%b' "${R0:?}QueryERROR......${N0:?}")
        DIVE_LOG_NEVER=$(printf '%b' "${R0:?}WillNeverBeUsed.${N0:?}")
        DIVE_LOG_CRASH=$(printf '%b' "${R0:?}CanCrashClient!.${N0:?}")
        # EventAIErrors.log
        DIVE_LOG_SKIPP=$(printf '%b' "${R0:?}Skipping${N0:?}")
        DIVE_LOG_NOEFF=$(printf '%b' "${R0:?}NoEffect${N0:?}")
        DIVE_LOG_NONEX=$(printf '%b' "${R0:?}NonExist${N0:?}")
        DIVE_LOG_NULL0=$(printf '%b' "${R0:?}NULL....${N0:?}")
        DIVE_LOG_NOTUS=$(printf '%b' "${R0:?}NotUsed.${N0:?}")
        # Char.log
        DIVE_LOG_CREAT=$(printf '%b' "${Y0:?}Created${N0:?}")
        DIVE_LOG_LOGIN=$(printf '%b' "${Y0:?}Login..${N0:?}")
        DIVE_LOG_LOGOU=$(printf '%b' "${Y0:?}Logout.${N0:?}")
        # empty table
        DIVE_LOG_NONE=$(printf '%b' "\e[2mempty..${N0:?}")
        DIVE_LOG_ZERO=$(printf '%b' "0")
        # codes done

        printf '%b' "   Server            Server.old        Realmd"
        echo
        printline "$DIVE_LOG_EMPTY" "$DIVE_SERVER_EMPTY" "$DIVE_LOG_EMPTY" "$DIVE_SERVER_OLD_EMPTY" "$DIVE_LOG_EMPTY" "$DIVE_REALMD_EMPTY"
        printline "$DIVE_LOG_ERROR" "$DIVE_SERVER_ERROR" "$DIVE_LOG_ERROR" "$DIVE_SERVER_OLD_ERROR" "$DIVE_LOG_ERROR" "$DIVE_REALMD_ERROR"
        printline "$DIVE_LOG_IGNOR" "$DIVE_SERVER_IGNOR" "$DIVE_LOG_IGNOR=" "$DIVE_SERVER_OLD_IGNOR" "$DIVE_LOG_IGNOR" "$DIVE_REALMD_SERIO"
        printline "$DIVE_LOG_POLYR" "$DIVE_SERVER_POLYR" "$DIVE_LOG_POLYR" "$DIVE_SERVER_OLD_POLYR" "$DIVE_LOG_NONE" "$DIVE_LOG_ZERO"
        printline "$DIVE_LOG_SERIO" "$DIVE_SERVER_SERIO" "$DIVE_LOG_SERIO" "$DIVE_SERVER_OLD_SERIO" "$DIVE_LOG_SERIO" "$DIVE_LOG_ZERO"
        echo
        printf '%b' "   DBErrors          Char              EventAIErrors"
        echo
        printline "$DIVE_LOG_CORRE" "$DIVE_DBERROR_CORR" "$DIVE_LOG_CREAT" "$DIVE_CHAR_CREATED" "$DIVE_LOG_SKIPP" "$DIVE_EVENTAIERROR"
        printline "$DIVE_LOG_EXIST" "$DIVE_DBERROR_EXIS" "$DIVE_LOG_LOGIN" "$DIVE_CHAR_LOGIN_C" "$DIVE_LOG_NOEFF" "$DIVE_EVENTAINOEFF"
        printline "$DIVE_LOG_QUERY" "$DIVE_DBERROR_QUER" "$DIVE_LOG_LOGOU" "$DIVE_CHAR_LOGOUTS" "$DIVE_LOG_NONEX" "$DIVE_EVENTAINONEX"
        printline "$DIVE_LOG_NEVER" "$DIVE_DBERROR_USED" "$DIVE_LOG_NONE" "$DIVE_LOG_ZERO" "$DIVE_LOG_NULL0" "$DIVE_EVENTAI_NULL"
        printline "$DIVE_LOG_CRASH" "$DIVE_DBERROR_CRAS" "$DIVE_LOG_NONE" "$DIVE_LOG_ZERO" "$DIVE_LOG_NOTUS" "$DIVE_EVENTAINOTUS"

        printf '%b' "
1 : Raw error output
2 : tail error output\n"
        echo
        read -n1 -s
        case "$REPLY" in

        "1")

          # get raw error from logs
          ERROR_ERROR=$(grep --no-filename -Eo "ERROR:.*" "$FOLDER_CORE"/run/logs/*.log 2>/dev/null)
          # get raw empty from logs
          EMPTY_ERROR=$(grep --no-filename -Eo ".*empty*." "$FOLDER_CORE"/run/logs/*.log 2>/dev/null)
          printf '%b' "${Y1:?}$EMPTY_ERROR${N0:?}\n"
          printf '%b' "${R0:?}$ERROR_ERROR${N0:?}\n"

          ;;

        "2")

          # tail logs for error
          echo "Tail logs.."
          printf '%b' "${GR:?}CTRL+C to exit${N0:?}\n"
          tail -f "$FOLDER_CORE"/run/logs/*.log 2>/dev/null |
            grep -Eo "ERROR:.*|.*empty*." 2>/dev/null

          ;;

        "q") exit ;;
        "Q") ;;
        *) ;;
        esac

        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # dive into logs done

        # Get database info (kinda heavy..)

      "w")

        ON_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT SUM(online) FROM ${DB_CHARACTERS:?}.characters;" 2>/dev/null)
        GU_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM ${DB_CHARACTERS:?}.guild;" 2>/dev/null)
        AC_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_REALMD.account;" 2>/dev/null)
        BN_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_REALMD.account_banned;" 2>/dev/null)
        # on_count at TOP ^
        CH_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.characters;" 2>/dev/null)

        # gu_count at TOP ^
        ME_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.guild_member;" 2>/dev/null)
        MA_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.mail;" 2>/dev/null)
        PE_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_pet;" 2>/dev/null)

        TI_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.gm_tickets;" 2>/dev/null)
        CO_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.corpse;" 2>/dev/null)
        PV_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.pvpstats_players;" 2>/dev/null)
        GI_COUNT=$(mysql --defaults-extra-file="${SQL_MYCNF:?}" -N --execute="SELECT count(*) FROM $DB_CHARACTERS.character_gifts;" 2>/dev/null)

        printline "Accounts" "$AC_COUNT" "Guilds" "$GU_COUNT" "Tickets" "$TI_COUNT"
        printline "Banned" "$BN_COUNT" "Members" "$ME_COUNT" "Corpses" "$CO_COUNT"
        printline "Online" "$ON_COUNT" "Mail" "$MA_COUNT" "PvP" "$PV_COUNT"
        printline "Characters" "$CH_COUNT" "Pets" "$PE_COUNT" "Gifts" "$GI_COUNT"

        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # Get database info (kinda heavy..) done

        # backup sql

      "b")

        # create directory, backup
        mkdir "$FOLDER_WOW"/backup &>/dev/null
        # well (: backup probably hours old by now
        echo
        printf '%b' "Making fresh backup${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_CHARACTERS" >"$FOLDER_WOW"/backup/"$DB_CHARACTERS"-"$NOW".sql
        printf '%b' "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-$NOW.sql"
        sleep 2
        echo
        # backup characters sql
        printf '%b' "Making fresh backup${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "${G0:?}.${N0:?}"
        mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_REALMD" >"$FOLDER_WOW"/backup/"$DB_REALMD"-"$NOW".sql
        printf '%b' "${G0:?}.${N0:?}"
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] $DB_REALMD-$NOW.sql"
        sleep 1
        # well (: backup probably hours old by now done

        ;;

        # backup sql done

        # remote access

      "r")

        echo
        read -r -p "[YN] Want to login? y/n " -n 1 -r
        echo
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          clear
          printf '%b' "
${THEMES:?}      ._________________.
      |.---------------.|
      || ${N0:?}mangos>${THEMES:?}       ||
      ||               ||
      ||               ||
      ||               ||
      ||               ||
      ||_______________||
      /.-.-.-.-.-.-.-.-.\\
     /.-.-.-.-.-.-.-.-.-.\\
    /.-.-.-.-.-.-.-.-.-.-.\\
   /______/__________\___${G0:?}o${THEMES:?}_\\
   \_______________________/${N0:?}"
          echo
          printf '%b' "
     CMaNGOS Command Center

  ${G0:?}>${N0:?} hit Enter two times to go back.
  ------------------------------------------------
  'commands' will list all of the available commands
  'quit' and then hit Enter two times to exit

  Tip: Set '${CY:?}Message of the Day${N0:?}' inside mangosd.conf"
          echo
          echo
          nc "$HOST_NC" "$PORT_NC"
          echo
        fi

        ;;

        # remote access done

      "q")
        echo
        break
        ;;
      *)
        echo
        echo "empty"
        ;;
      esac
    done

    ;;

    # Login (command) done * Free Hong Kong.

    # Checking for updates

  "c")

    # updated and installed
    FILE_CORE="/var/log/ms/installed_core"
    if [ -f "$FILE_CORE" ]; then
      OK_CORE="[${G1:?}OK${N0:?}]"
    fi
    FILE_CORE="/var/log/ms/installed_core"
    if [ ! -f "$FILE_CORE" ]; then
      OK_CORE="[${Y1:?}ok${N0:?}]"
    fi
    FILE_DB="/var/log/ms/installed_db"
    if [ -f "$FILE_DB" ]; then
      OK_DB="[${G1:?}OK${N0:?}]"
    fi
    FILE_DB="/var/log/ms/installed_db"
    if [ ! -f "$FILE_DB" ]; then
      OK_DB="[${Y1:?}ok${N0:?}]"
    fi
    FILE_MS="/var/log/ms/installed_ms"
    if [ -f "$FILE_MS" ]; then
      OK_MS="[${G1:?}OK${N0:?}]"
    fi
    FILE_MS="/var/log/ms/installed_ms"
    if [ ! -f "$FILE_MS" ]; then
      OK_MS="[${Y1:?}ok${N0:?}]"
    fi

    # check if 'mangos-classic' exist
    FILE="$FOLDER_CORE/README.md"
    if [ ! -f "$FILE" ]; then
      # look for directory
      echo -ne '[!!] Please wait, looking for core directory!\r'
      sleep 2
      # remove old file
      rm /var/log/ms/installed_core &>/dev/null
      # fresh install ?
      DOWN_CORE=$(echo -e "\033[5m?\033[0m" 2>/dev/null)
      echo -ne '                                      \r'
      printf '%b' "${GR:?}[YN] (${UND:?}0000000${GR:?}) Download Core$DOWN_CORE y/n, or wait 5 sec${N0:?}"
      read -t 5 -r -p "" -n 1 -r -s
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Cloning repository! Please wait this might take a while
(${G1:?}${GITHUB_CMANGOS:?}${N0:?})\n"
        sudo mkdir "$FOLDER_WOW" &>/dev/null
        sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_WOW"
        cd "$FOLDER_WOW" || exit
        read -r -p "[YN] --recursive? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          RECURSIVE="--recursive"
          git clone "${GITHUB_CMANGOS:?}" "$RECURSIVE"
        else
          git clone "${GITHUB_CMANGOS:?}"
        fi
        echo "Done"
        sleep 1
      fi
    else
      # check for updates

      # CMaNGOS Core (mangos-classic)
      printf '%b' "[ Checking for ${G0:?}+${R0:?}-${N0:?} Updates${N0:?} ] .. "
      echo
      echo
      cd "$FOLDER_CORE" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_core &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${N0:?}) ${G1:?}${UND:?}New Updates For Core${N0:?}! - $LATEST_DATE
${GR:?}(m) Update CMaNGOS > Compile latest${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "$OK_CORE (${G0:?}${UND:?}$LATEST_HEAD${N0:?}) Core Updated - $LATEST_DATE"
        echo
      fi
    # check if 'mangos-classic' exist done
    fi

    # check if 'classic-db' exist
    FILE="$FOLDER_DB/README.md"
    if [ ! -f "$FILE" ]; then
      # look for directory
      echo -ne '[!!] Please wait, looking for database directory!\r'
      sleep 2
      # remove old file
      rm /var/log/ms/installed_db &>/dev/null
      # fresh install ?
      DOWN_DB=$(echo -e "\033[5m?\033[0m" 2>/dev/null)
      echo -ne '                                      \r'
      printf '%b' "${GR:?}[YN] (${UND:?}0000000${GR:?}) Download Database$DOWN_DB y/n, or wait 5 sec${N0:?}"
      read -t 5 -r -p "" -n 1 -r -s
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Cloning repository! Please wait this might take a while
(${G1:?}${GITHUB_DATABASE:?})${N0:?}\n"
        sudo mkdir "$FOLDER_WOW" &>/dev/null
        sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_WOW"
        cd "$FOLDER_WOW" || exit
        git clone "${GITHUB_DATABASE:?}"
        cd "$FOLDER_DB" || exit
        ./InstallFullDB.sh
        echo "[OK] Done!"
        sleep 1
        # check if 'InstallFullDB.config' exist
        FILE="$FOLDER_DB/InstallFullDB.config"
        if [ -z "$FILE" ]; then
          cd "$FOLDER_DB" || exit
          ./InstallFullDB.sh &>/dev/null
        fi
        # check if 'InstallFullDB.config' exist done
      fi
      # restore InstallFullDB.config backup
      cp "${FOLDER_WOW:?}"/backup/configurations "$FOLDER_DB" 2>/dev/null
    else

      # check for updates

      # check if 'classic-db' exist

      # Classic Database (classic-db)

      cd "${FOLDER_DB:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_db &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${N0:?}) ${G1:?}${UND:?}New Updates For Database${N0:?}! - $LATEST_DATE
${GR:?}(d) Update Database > Update classic-db${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "$OK_DB (${G0:?}${UND:?}$LATEST_HEAD${N0:?}) Database Updated - $LATEST_DATE"
        echo
      fi
    # check if 'classic-db' exist done
    fi

    # check if 'cmangos-script' exist
    FILE="$FOLDER_HELPER/README.md"
    if [ ! -f "$FILE" ]; then
      # remove old file
      rm /var/log/ms/installed_ms &>/dev/null
      # fresh install ?
      echo "Cloning repository 'cmangos-script' Please wait"
      sudo mkdir "$FOLDER_HELPER" &>/dev/null
      sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_HELPER"
      cd "$FOLDER_HELPER" || exit
      git clone "${GITHUB_HELPER:?}"
      echo "Done"
      sleep 1
    else
      # check for updates

      # CMaNGOS Helper

      cd "${FOLDER_HELPER:?}" || exit
      if git checkout master &>/dev/null &&
        git fetch origin master &>/dev/null &&
        [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
        git merge origin/master; then
        # remove old file
        rm /var/log/ms/installed_ms &>/dev/null
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "[${G1:?}NEW${N0:?}] (${G1:?}${UND:?}$LATEST_HEAD${N0:?}) ${G1:?}${UND:?}New Updates For Helper${N0:?}! - $LATEST_DATE
${GR:?}(w) Update Helper > Update Helper${N0:?}\n"
      else
        LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
        LATEST_HEAD=$(git rev-parse --short HEAD)
        printf '%b' "$OK_MS (${G0:?}${UND:?}$LATEST_HEAD${N0:?}) Helper Updated - $LATEST_DATE"
        echo
      fi
    # check if 'cmangos-script' exist done
    fi
    echo
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # Checking for updates done

    # update CMaNGOS

  "m")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y 2>/dev/null
    fi
    # required 'packagelist' to build CMaNGOS
    # ubuntu server
    PACKAGELIST=(autoconf
      automake
      binutils
      build-essential
      checkinstall
      cmake
      g++
      gcc
      git
      git-core
      grep
      libboost-all-dev
      libbz2-dev
      libc6
      libmysql++-dev
      libssl-dev
      libtool
      make
      patch
      subversion
      unzip
      zip
      zlibc
      psmisc)
    # codes done
    HEIGHT=14
    WIDTH=38
    CHOICE_HEIGHT=6
    BACKTITLE="update CMaNGOS"
    TITLE="Update mangos-classic [core]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Compile latest build"
      2 "Install systemd unit files"
      3 "Reinstall (delete /build)"
      4 "Reset --hard origin/master"
      5 "Delete Core /mangos-classic"
      6 "Backup configurations")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # compile latest build

    "1")

      read -r -p "[YN] Compile latest build? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "[OK] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
          cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
        else
          if ! [ -x "$(command -v "${PACKAGELIST[@]}")" ]; then
            sudo apt-get install "${PACKAGELIST[@]}" -y 2>/dev/null
          fi
          printf '%b' "[OK] ${GR:?}Shutting down, realmd & mangosd service${N0:?}\n"
          sleep 1
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *) sudo service realmd stop ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_WOW"
        mkdir "$FOLDER_CORE"/run &>/dev/null
        mkdir "$FOLDER_CORE"/run/logs &>/dev/null
        mkdir "$FOLDER_CORE"/run/logs/old &>/dev/null
        touch "$FOLDER_CORE"/run/logs/Server.log &>/dev/null
        cp "$FOLDER_CORE"/run/logs/*.log "$FOLDER_CORE"/run/logs/old
        # ahbot.conf
        cp "$FOLDER_CORE"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$FOLDER_CORE"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "$FOLDER_CORE"/run/logs || exit &>/dev/null
        mv -t "$FOLDER_CORE"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        mkdir "$FOLDER_CORE"/build &>/dev/null
        cd "${FOLDER_BUILD:?}" || exit
        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        echo
        cmake .. ${CMAKE:?}
        cd "$FOLDER_BUILD" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>/dev/null)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>/dev/null)
          CPU_FREQ=$(echo "@ ${CPU_FREQ:?}GHz")
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G0:?}${CPU_TEMP:?}°${N0:?}")
        else
          CMAKE_TEMP=$(printf '%b' "")
        fi

        # get cpu model name
        KERNAL_RE=$(uname -r 2>/dev/null)
        PROCESSOR=$(uname -p 2>/dev/null)
        CPU_MODEL=$(lscpu 2>/dev/null | grep 'Model name' 2>/dev/null |
          cut -f 2 -d ":" 2>/dev/null | awk '{$1=$1}1' 2>/dev/null)
        if [ ! -z "$CPU_MODEL" ]; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL $CPU_FREQ ($PROCESSOR)${Y0:?}\n")
        else
          CPU_MODEL=""
        fi

        # count system cores
        CORES=$(grep -c ^processor /proc/cpuinfo 2>/dev/null)
        if [[ "$CORES" -ge "1" ]]; then
          # report count
          CORES_COUNT=$(printf '%b' "${GR:?}$KERNAL_RE${N0:?}
${N0:?}This system has ${G1:?}$CORES${N0:?} Cores!
${GR:?}$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        cat <<EOF

$CORES_COUNT $CMAKE_TEMP

Compiling using multiple cores:

 1 : 1 core
 2 : 2 cores
 3 : 3 cores
 4 : 4 cores
 8 : 8 cores
 h : 16 cores
 w : 32 cores
 t : 64 cores
 H : 128 cores

 c : custom

 q : quit

EOF
        read -r -n1 -s
        case "$REPLY" in

        "c")

          printf '%b' "${GR:?}[  0%] Enter amount of core(s): ${N0:?}"
          read -r CUSTOM
          CORES=("$CUSTOM")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j"$CUSTOM" # custom n cores

          ;;

        "1")

          CORES=("1")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make # 1 core

          ;;

        "2")

          CORES=("2")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j2 # 2 cores

          ;;

        "3")

          CORES=("3")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j3 # 3 cores

          ;;

        "4")

          CORES=("4")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j4 # 4 cores

          ;;

        "8")

          CORES=("8")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j8 # 8 cores

          ;;

        "h")

          CORES=("16")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j16 # 16 cores, h1gh-

          ;;

        "w")

          CORES=("32")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j32 # 32 cores, -w@y

          ;;

        "t")

          CORES=("64")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j64 # 64 cores, t0

          ;;

        "H")

          CORES=("128")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j128 # 128 cores, h3ll

          ;;

        "q") exit ;;
        "Q") echo "case sensitive!!" ;;
        *)
          echo "Invalid option. Restart please.."
          exit
          ;;

        esac

        # compiling using multiple cores done

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G1:?}$CPU_TEMP${N0:?}°")
        else
          CMAKE_TEMP=""
        fi
        # get seconds since start
        DURATION=$(echo "$SECONDS-$START" 2>/dev/null | bc 2>/dev/null)
        # convert seconds
        TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
        echo
        printf '%b' "$CMAKE_TEMP
Build time: ${G1:?}$TIMER${N0:?} with ${G1:?}${CORES[0]}${N0:?} Core(s)${N0:?}

Select install operation"
        echo
        echo " 1) make install"
        echo " 2) checkinstall with backup"
        echo
        read -r n
        case $n in

        "1")

          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${USER:?}":"${GROUP:?}" /var/log/ms
          # create installed mark
          echo "Core was installed at ${NOW:?}" >/var/log/ms/installed_core

          echo "make install"

          cd "$FOLDER_BUILD" || exit
          sudo make install

          ;;

        "2")

          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${USER:?}":"${GROUP:?}" /var/log/ms
          # create installed mark
          echo "Core was installed at ${NOW:?} with backup" >/var/log/ms/installed_core

          echo "checkinstall"

          cd "$FOLDER_BUILD" || exit
          sudo checkinstall

          ;;

        *)
          echo "invalid option"

          ;;

        esac

        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # compile latest build done

      # install systemd Services
      # ubuntu

    "2")

      read -r -p "[YN] Install systemd Services? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # /etc/systemd/system/realmd.service
        echo "[Unit]
Description=WoW Vanilla realmd service
After=network.target mysql.service

[Service]
Type=simple
User=$USER
ExecStart=$FOLDER_CORE/run/bin/realmd -c $FOLDER_CORE/run/etc/realmd.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"$FOLDER_WOW"/realmd.service 2>/dev/null
        # /etc/systemd/system/mangosd.service
        echo "[Unit]
Description=WoW Vanilla mangosd service
After=network.target mysql.service realmd.service getty@tty3.service

[Service]
Type=simple
User=$USER
StandardInput=tty
TTYPath=/dev/tty3
TTYRESET=yes
TTYVHangup=yes
WorkingDirectory=$FOLDER_CORE/run/bin
ExecStart=$FOLDER_CORE/run/bin/mangosd -c $FOLDER_CORE/run/etc/mangosd.conf -a $FOLDER_CORE/run/etc/ahbot.conf
Restart=on-abort

[Install]
WantedBy=multi-user.target" >"$FOLDER_WOW"/mangosd.service 2>/dev/null
        # install services
        sudo mv "$FOLDER_WOW"/*.service /etc/systemd/system/ &>/dev/null
        # enable services
        sudo systemctl enable realmd
        sleep 1
        sudo systemctl enable mangosd
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        sleep 1
        echo
        printf '%b' "[${G1:?}OK${N0:?}]

/etc/systemd/system/'${THEMES:?}realmd.service${N0:?}'
/etc/systemd/system/'${THEMES:?}mangosd.service${N0:?}'

Check if correct information, or just restart server."
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # install systemd Services done

      # reinstall (delete /build)

    "3")

      read -r -p "[YN] Reinstall (delete /build)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        # this is for docker users
        if [ -f /.dockerenv ]; then
          printf '%b' "[OK] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
          cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
        else
          if ! [ -x "$(command -v "${PACKAGELIST[@]}")" ]; then
            sudo apt-get install "${PACKAGELIST[@]}" -y 2>/dev/null
          fi
          printf '%b' "[OK] ${GR:?}Shutting down, realmd & mangosd service${N0:?}\n"
          sleep 1
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *) sudo service realmd stop ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        cd || exit
        sudo mkdir wow &>/dev/null
        sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_WOW"
        sudo rm -r "$FOLDER_CORE"/build/ &>/dev/null
        cd "$FOLDER_WOW" || exit
        git clone "$GITHUB_CMANGOS" 2>/dev/null
        sudo mkdir "$FOLDER_CORE"/build &>/dev/null
        sudo chown -R "${USER:?}":"${GROUP:?}" "$FOLDER_WOW"
        mkdir "$FOLDER_CORE"/run &>/dev/null
        mkdir "$FOLDER_CORE"/run/logs &>/dev/null
        mkdir "$FOLDER_CORE"/run/logs/old &>/dev/null
        touch "$FOLDER_CORE"/run/logs/Server.log &>/dev/null
        cp "$FOLDER_CORE"/run/logs/*.log "$FOLDER_CORE"/run/logs/old
        # ahbot.conf
        cp "$FOLDER_CORE"/src/game/AuctionHouseBot/ahbot.conf.dist.in "$FOLDER_CORE"/run/etc/ahbot.conf.dist &>/dev/null
        # new compile, new system logs
        cd "$FOLDER_CORE"/run/logs || exit &>/dev/null
        mv -t "$FOLDER_CORE"/run/logs/old/ Realmd.log Server.log Server.log.old DBErrors.log EventAIErrors.log &>/dev/null
        # done
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        mkdir "$FOLDER_CORE"/build &>/dev/null
        cd "${FOLDER_BUILD:?}" || exit
        # double quotes ("") and single quotes ('') around > $cmake < will mess things up.
        # shellcheck disable=SC2086
        echo
        cmake .. ${CMAKE:?}
        cd "$FOLDER_BUILD" || exit

        # compiling using multiple cores

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_FREQ=$(sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq 2>/dev/null)
          CPU_FREQ=$(echo "$CPU_FREQ/1000000" | bc -l | awk '{ printf "%.2f\n", $1 }' 2>/dev/null)
          CPU_FREQ=$(echo "@ ${CPU_FREQ:?}GHz")
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G0:?}${CPU_TEMP:?}°${N0:?}")
        else
          CMAKE_TEMP=$(printf '%b' "")
        fi

        # get cpu model name
        KERNAL_RE=$(uname -r 2>/dev/null)
        PROCESSOR=$(uname -p 2>/dev/null)
        CPU_MODEL=$(lscpu 2>/dev/null | grep 'Model name' 2>/dev/null |
          cut -f 2 -d ":" 2>/dev/null | awk '{$1=$1}1' 2>/dev/null)
        if [ ! -z "$CPU_MODEL" ]; then
          CPU_MODEL=$(printf '%b' "${GR:?}$CPU_MODEL $CPU_FREQ ($PROCESSOR)${N0:?}\n")
        else
          CPU_MODEL=""
        fi

        # count system cores
        CORESC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null)
        if [[ "${CORES:?}" -ge "1" ]]; then
          # report count
          CORES_COUNT=$(printf '%b' "${GR:?}$KERNAL_RE${N0:?}
${N0:?}This system has ${G1:?}$CORESC${N0:?} Cores!
${GR:?}$CPU_MODEL${N0:?}")
        else
          CORES_COUNT=""
        fi

        cat <<EOF

$CORES_COUNT $CMAKE_TEMP

Compiling using multiple cores:

 1 : 1 core
 2 : 2 cores
 3 : 3 cores
 4 : 4 cores
 8 : 8 cores
 h : 16 cores
 w : 32 cores
 t : 64 cores
 H : 128 cores

 c : custom

 q : quit

EOF
        read -r -n1 -s
        case "$REPLY" in

        "c")

          printf '%b' "${GR:?}[  0%] Enter amount of core(s): ${N0:?}"
          read -r CUSTOM
          CORES=("$CUSTOM")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j"$CUSTOM" # custom n cores

          ;;

        "1")

          CORES=("1")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make # 1 core

          ;;

        "2")

          CORES=("2")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j2 # 2 cores

          ;;

        "3")

          CORES=("3")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j3 # 3 cores

          ;;

        "4")

          CORES=("4")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j4 # 4 cores

          ;;

        "8")

          CORES=("8")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j8 # 8 cores

          ;;

        "h")

          CORES=("16")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j16 # 16 cores, h1gh-

          ;;

        "w")

          CORES=("32")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j32 # 32 cores, -w@y

          ;;

        "t")

          CORES=("64")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j64 # 64 cores, t0

          ;;

        "H")

          CORES=("128")
          printf '%b' "${G0:?}[  0%] Building with ${N0:?}${CORES[0]}${G0:?} core(s)${N0:?}\n"
          # start counting (seconds)
          START="$SECONDS"
          make -j128 # 128 cores, h3ll

          ;;

        "q") exit ;;
        "Q") echo "case sensitive!!" ;;
        *)
          echo "Invalid option. Restart please.."
          exit
          ;;

        esac

        # compiling using multiple cores done

        # cpu temp
        if awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp &>/dev/null; then
          CPU_TEMP=$(awk '{print $cpu/1000}' /sys/class/thermal/thermal_zone0/temp 2>/dev/null |
            cut -c -4 2>/dev/null)
          CMAKE_TEMP=$(printf '%b' "CPU: ${G1:?}$CPU_TEMP${N0:?}°")
        else
          CMAKE_TEMP=""
        fi
        # get seconds since start
        DURATION=$(echo "$SECONDS-$START" 2>/dev/null | bc 2>/dev/null)
        # convert seconds
        TIMER=$(printf '%dh:%dm:%ds\n' $(("$DURATION/3600")) $(("$DURATION%3600/60")) $(("$DURATION%60")))
        echo
        printf '%b' "$CMAKE_TEMP
Build time: ${G1:?}$TIMER${N0:?} with ${G1:?}${CORES[0]}${N0:?} Core(s)${N0:?}

Select install operation"
        echo
        echo " 1) make install"
        echo " 2) checkinstall with backup"
        echo
        read -r n
        case $n in

        "1")
          echo "make install"

          cd "$FOLDER_BUILD" || exit
          sudo make install

          ;;

        "2")
          echo "checkinstall"

          cd "$FOLDER_BUILD" || exit
          sudo checkinstall

          ;;

        *)
          echo "invalid option"

          ;;

        esac

        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /build) done

      # reset --hard origin/master ?

    "4")

      read -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$FOLDER_CORE" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # delete core directory (everything)

    "5")

      printf '%b' "${GR:?}Deleting Core! $FOLDER_CORE${N0:?}\n"
      read -r -p "[YN] Backup configurations first? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo mkdir "${FOLDER_WOW:?}"/backup 2>/dev/null
        sudo mkdir "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null
        sudo cp -R "$FOLDER_CORE"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
      fi
      read -r -p "[YN] Delete Core Directory? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo cp -R "$FOLDER_CORE"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null
        sudo rm -R "$FOLDER_CORE" &>/dev/null
      fi

      ;;

      # delete core directory (everything) done

      # backup configurations

    "6")

      sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
      sudo cp -R "$FOLDER_CORE"/run/etc/* "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null

      ;;

    esac

    # backup configurations

    # update CMaNGOS done

    # update Database

    ;;

  "d")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y 2>/dev/null
    fi
    # codes done
    HEIGHT=19
    WIDTH=42
    CHOICE_HEIGHT=12
    BACKTITLE="update Database"
    TITLE="Update classic-db [database]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Update classic-db"
      2 "Drop/Import databases"
      3 "myisam -> innodb (MariaDB)"
      4 "Reinstall (delete /classic-db)"
      5 "Reset --hard origin/master"
      6 "Restart MySQL Server (service)"
      7 "Stop MySQL Server (service)"
      8 "Enable/Disable MySQL Server"
      9 "Apply all updates [A]-[B]"
      10 "Install database client"
      11 "Install database system"
      12 "Delete /classic-db")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # delete database directory (everything)

    "12")

      printf '%b' "${GR:?}Deleting Database! $FOLDER_DB${N0:?}\n"
      read -r -p "[YN] Delete Database Directory? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        # create backup directory
        cd "$FOLDER_WOW" || exit
        sudo mkdir backup &>/dev/null
        # create configurations directory
        cd "$FOLDER_WOW"/backup || exit
        sudo mkdir configurations &>/dev/null
        cd || exit
        cp "$FOLDER_DB"/InstallFullDB.config "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null
        cp "$FOLDER_CORE"/run/etc/*.conf "${FOLDER_WOW:?}"/backup/configurations 2>/dev/null
        sudo rm -R "$FOLDER_DB" &>/dev/null
      fi

      ;;

      # delete database directory (everything) done

      # install database system

    "11")

      # codes
      # check if 'mangos' user exist
      # mariadb
      PACKAGELIST_MARIA=(mariadb-client
        mariadb-server)
      # mysql
      PACKAGELIST_MYSQL=(mysql-client
        mysql-server)
      # codes done
      echo
      printf '%b' "MariaDB, MySQL - Database system"
      echo
      echo " 1) MariaDB"
      echo " 2) MySQL"
      echo
      read -r -n1 -s n
      echo "Please wait"
      case $n in

      "1") # install mariadb

        sudo apt-get install "${PACKAGELIST_MARIA[@]}" -y
        sudo service mariadb stop &>/dev/null
        sudo service mariadb start &>/dev/null

        ;;

      "2") # install mysql

        sudo apt-get install "${PACKAGELIST_MYSQL[@]}" -y
        sudo service mysql stop &>/dev/null
        sudo service mysql start &>/dev/null

        ;;

      "*") ;;

      esac

      ;;

      # install database system done

      # install database client

    "10")

      # codes
      # mariadb-client
      PACKAGELIST_CLIENT_MARIA=(mariadb-client*)
      # mysql-client
      PACKAGELIST_CLIENT_MYSQL=(mysql-client*)
      # codes done

      echo
      printf '%b' "MariaDB, MySQL - Database Client
This is needed to operate local/remote database"
      echo
      echo
      echo " 1 : MariaDB-Client"
      echo " 2 : MySQL-Client"
      echo " q : Quit"
      echo
      read -r -n1 -s n
      echo "Please wait"
      case $n in

      "1") # install mariadb-client

        sudo apt-get install "${PACKAGELIST_CLIENT_MARIA[@]}" -y

        ;;

      "2") # install mysql-client

        sudo apt-get install "${PACKAGELIST_CLIENT_MYSQL[@]}" -y

        ;;

      "q")
        return

        ;;

      "*")
        exit

        ;;

      esac

      ;;

      # install database client done

      # update classic-db

    "1")

      # checking depends

      # mysql
      if sudo dpkg -s mysql-server &>/dev/null; then
        MYSQL_SERVER_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_SERVER_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mysql-client
      if sudo dpkg -s mysql-client &>/dev/null; then
        MYSQL_CLIENT_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_CLIENT_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mariadb
      if sudo dpkg -s mariadb-server &>/dev/null; then
        MARIADB_SERVER_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MARIADB_SERVER_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      # mariadb-client
      if sudo dpkg -s mariadb-client &>/dev/null; then
        MARIADB_CLIENT_INSTALLED=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MARIADB_CLIENT_INSTALLED=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      MYSQL_USER=$(sudo mysql --defaults-extra-file="$SQL_MYCNF" -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = 'mangos')" 2>/dev/null)
      if [ "$MYSQL_USER" = 1 ]; then
        MYSQL_USER=$(printf '%b' "[${G1:?}OK${N0:?}]")
      else
        MYSQL_USER=$(printf '%b' "[${GR:?}NO${N0:?}]")
      fi

      echo
      echo "$MYSQL_SERVER_INSTALLED - mysql-server
$MYSQL_CLIENT_INSTALLED - mysql-client
$MARIADB_SERVER_INSTALLED - mariadb-server
$MARIADB_CLIENT_INSTALLED - mariadb-client
$MYSQL_USER - database user 'mangos'

database user, client/server is needed."
      echo

      # checking depends done

      read -r -p "[YN] Continue? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -r -p "[YN] Restart localhost database service? (SQL SERVER) y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then

          # restart mysql service, if it exists
          if sudo service mysql status 2>/dev/null | grep -E 'mysql'; then
            echo "No database system found
Please install mysql or mariadb database/client"
            echo
            exit
          else
            sudo service mysql stop &>/dev/null
            sudo service mysql restart &>/dev/null
          fi

          # restart mariadb service, if it exists
          if sudo service mariadb status 2>/dev/null | grep -E 'mariadb'; then
            echo "No database system found
Please install mysql or mariadb database/client"
            echo
            exit
          else
            sudo service mariadb stop &>/dev/null
            sudo service mariadb restart &>/dev/null
          fi
        fi
        echo
        printf '%b' "[OK] ${GR:?}Shutting down, realmd & mangosd service${N0:?}\n"
        sleep 1

        # this is for docker users
        if [ -f /.dockerenv ]; then
          echo
          printf '%b' "[OK] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
          cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
        else
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *) sudo service realmd stop ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi

        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        echo
        printf '%b' "Updating classic-db [${G0:?}database${N0:?}]"
        echo

        # backup
        mkdir "$FOLDER_WOW"/backup &>/dev/null
        mkdir "$FOLDER_WOW"/backup/old &>/dev/null
        cp "$FOLDER_WOW"/backup/*.sql "$FOLDER_WOW"/backup/old &>/dev/null
        cd "$FOLDER_WOW"/backup/old/ || exit
        zip "$SERVER_NAME.zip" "$FOLDER_WOW"/backup/*.sql &>/dev/null
        find "$FOLDER_WOW"/backup/*.sql -mtime +7 -exec rm {} \; &>/dev/null
        find "$FOLDER_WOW"/backup/old/*.sql -mtime +14 -exec rm {} \; &>/dev/null
        sleep 1
        # backup <- characters.sql
        echo
        FILE="$FOLDER_WOW/backup/$DB_CHARACTERS-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf '%b' "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Characters' ! Creating backup.."
          mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_CHARACTERS" >"$FOLDER_WOW"/backup/"$DB_CHARACTERS"-"$NOW".sql
          echo
        else
          printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-$NOW.sql exist"
          echo
          read -r -p "[YN] New backup? ($DB_CHARACTERS) y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # backup characters sql
            echo
            printf '%b' "[OK] Making fresh backup${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "${G0:?}.${N0:?}"
            mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_CHARACTERS" >"$FOLDER_WOW"/backup/"$DB_CHARACTERS"-"$NOW".sql
            printf '%b' "${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-$NOW.sql"
            sleep 2
            echo
          fi
        fi
        echo
        # backup <- realmd.sql
        FILE="$FOLDER_WOW/backup/$DB_REALMD-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf '%b' "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Realmd' ! Creating backup.."
          mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_REALMD" >"$FOLDER_WOW"/backup/"$DB_REALMD"-"$NOW".sql
          echo
        else
          printf '%b' "[${G1:?}OK${N0:?}] $DB_REALMD-$NOW.sql exist"
          echo
          read -r -p "[YN] New backup? ($DB_REALMD) y/n " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            # backup characters sql
            echo
            printf '%b' "[OK] Making fresh backup${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "${G0:?}.${N0:?}"
            mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_REALMD" >"$FOLDER_WOW"/backup/"$DB_REALMD"-"$NOW".sql
            printf '%b' "${G0:?}.${N0:?}"
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] $DB_REALMD-$NOW.sql"
            sleep 1
            echo
          fi
        fi
        # InstallFullDB ?
        echo
        read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
          cd "$FOLDER_DB" || exit
          ./InstallFullDB.sh
          sudo service mariadb stop &>/dev/null
          sudo service mysql stop &>/dev/null
          sleep 1
          sudo service mariadb restart &>/dev/null
          sudo service mysql restart &>/dev/null
        fi
        # create ms folder
        sudo mkdir /var/log/ms/ 2>/dev/null
        # fix ownership
        sudo chown -R "${USER:?}":"${GROUP:?}" /var/log/ms
        # create installed mark
        echo "Database was installed at ${NOW:?}" >/var/log/ms/installed_db
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # InstallFullDB done

      # backup done

      # update classic-db done

      # drop/import databases

    "2")

      read -r -p "[YN] Drop/Import Databases? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          echo
          printf '%b' "[OK] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen 2>/dev/null
          # keep old logs
          cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
          cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
        else
          echo
          printf '%b' "[OK] ${GR:?}Shutting down, realmd & mangosd service${N0:?}\n"
          sleep 1
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *) sudo service realmd stop ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        sleep 1
        echo
        # backup <- characters.sql
        FILE="$FOLDER_WOW/backup/$DB_CHARACTERS-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf '%b' "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Characters' ! Creating backup.."
          mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_CHARACTERS" >"$FOLDER_WOW"/backup/"$DB_CHARACTERS"-"$NOW".sql
          echo
        else
          printf '%b' "[${G1:?}OK${N0:?}] $DB_CHARACTERS-$NOW.sql exist"
          echo
        fi
        # backup <- realmd.sql
        FILE="$FOLDER_WOW/backup/$DB_REALMD-$NOW.sql"
        if [ ! -f "$FILE" ]; then
          printf '%b' "[${R0:?}empty${N0:?}/${R0:?}old${N0:?}] 'Realmd' ! Creating backup.."
          mysqldump --defaults-extra-file="$SQL_MYCNF" "$DB_REALMD" >"$FOLDER_WOW"/backup/"$DB_REALMD"-"$NOW".sql
          echo
        else
          printf '%b' "[${G1:?}OK${N0:?}] $DB_REALMD-$NOW.sql exist"
          echo
        fi

        # backup done

        # drop databases

        # drop database 'characters'

        echo
        RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "$DB_CHARACTERS")
        if [ "$RESULT" == "$DB_CHARACTERS" ]; then
          mysqladmin --defaults-extra-file="$SQL_MYCNF" -f DROP "$DB_CHARACTERS"
        fi
        # drop database 'mangos'
        RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "${DB_MANGOS:?}")
        if [ "$RESULT" == "$DB_MANGOS" ]; then
          mysqladmin --defaults-extra-file="$SQL_MYCNF" -f DROP "$DB_MANGOS"
        fi
        read -r -p "[YN] Drop realmd database? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # drop database 'realmd'
          RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "$DB_REALMD")
          if [ "$RESULT" == "$DB_REALMD" ]; then
            mysqladmin --defaults-extra-file="$SQL_MYCNF" -f DROP "$DB_REALMD"
          fi
        fi

        # drop databases done

        # create databases

        # create database 'characters'
        echo
        RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "$DB_CHARACTERS")
        if [ "$RESULT" == "$DB_CHARACTERS" ]; then
          printf '%b' "[${G1:?}OK${N0:?}] 'Characters' database installed."
          echo
        else
          printf '%b' "[${R0:?}empty${N0:?}] 'Characters' importing.."
          echo
          mysql --defaults-extra-file="$SQL_MYCNF" -e "CREATE DATABASE $DB_CHARACTERS CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$SQL_MYCNF" --database="$DB_CHARACTERS" <"${FOLDER_SQL:?}"/base/characters.sql
        fi
        # create database 'mangos'
        RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "$DB_MANGOS")
        if [ "$RESULT" == "$DB_MANGOS" ]; then
          printf '%b' "[${G1:?}OK${N0:?}] 'Mangos' database installed."
          echo
        else
          printf '%b' "[${R0:?}empty${N0:?}] 'Mangos' importing.."
          echo
          mysql --defaults-extra-file="$SQL_MYCNF" -e "CREATE DATABASE $DB_MANGOS CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$SQL_MYCNF" --database="$DB_MANGOS" <"$FOLDER_SQL"/base/mangos.sql
        fi
        # create database 'realmd'
        RESULT=$(mysql --defaults-extra-file="$SQL_MYCNF" -e "SHOW DATABASES" | grep "$DB_REALMD")
        if [ "$RESULT" == "$DB_REALMD" ]; then
          printf '%b' "[${G1:?}OK${N0:?}] 'Realmd' database installed."
          echo
        else
          printf '%b' "[${R0:?}empty${N0:?}] 'Realmd' importing.."
          echo
          mysql --defaults-extra-file="$SQL_MYCNF" -e "CREATE DATABASE $DB_REALMD CHARACTER SET utf8 COLLATE utf8_general_ci"
          mysql --defaults-extra-file="$SQL_MYCNF" --database="$DB_REALMD" <"$FOLDER_SQL"/base/realmd.sql
        fi
        echo

        # create databases done

        # delete and start over done

        # InstallFullDB ?

        read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
          cd "$FOLDER_DB" || exit
          ./InstallFullDB.sh
        fi

        # InstallFullDB done

        # import backup ?

        echo
        ls -lQS "$FOLDER_WOW"/backup
        echo
        read -r -p "[YN] Import latest backup? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sleep 1
          echo -ne '(0%)\r'
          mysql --defaults-extra-file="$SQL_MYCNF" "$DB_CHARACTERS" <"$FOLDER_WOW"/backup/"$DB_CHARACTERS"-"$NOW".sql
          sleep 1
          echo -ne '(25%)\r'
          mysql --defaults-extra-file="$SQL_MYCNF" "$DB_REALMD" <"$FOLDER_WOW"/backup/"$DB_REALMD"-"$NOW".sql
          sleep 1
          echo -ne '(50%)\r'
          sudo service mariadb stop &>/dev/null
          sudo service mysql stop &>/dev/null
          echo -ne '(75%)\r'
          sleep 1
          echo -ne '(90%)\r'
          sudo service mariadb restart &>/dev/null
          sudo service mysql restart &>/dev/null
          echo -ne '(100%)\r'
        fi
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # drop/import databases done

      # update Database done

      # import backup done

      # convert_mysql_engine = myisam -> innodb

    "3")

      read -r -p "[YN] Convert MySQL Engine = myisam -> innodb? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        # this is for docker users
        if [ -f /.dockerenv ]; then
          echo
          printf '%b' "[OK] ${GR:?}${GR:?}Killing screens (realmd, mangosd)${N0:?}\n"
          sleep 3
          sudo killall screen &>/dev/null
          # keep old logs
          cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
          cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
        else
          echo
          printf '%b' "[OK] ${GR:?}Shutting down, realmd & mangosd service${N0:?}\n"
          sleep 1
          # realmd service
          case "$(echo "$PIDOF_REALMD")" in
          0) ;;
          *) sudo service realmd stop ;;
          esac
          # mangosd service
          case "$(echo "$PIDOFMANGOSD")" in
          0) ;;
          *) sudo service mangosd stop ;;
          esac
        fi
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        echo -ne '(0%)\r'
        sleep 1
        echo -ne '(10%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$SQL_MYCNF" --skip-column-names -B -D "$DB_MANGOS" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(20%)\r'
          sudo mysql --defaults-extra-file="$SQL_MYCNF" -D "$DB_MANGOS" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          echo -ne '(30%)\r'
        done
        echo -ne '(40%)\r'
        sleep 1
        echo -ne '(50%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$SQL_MYCNF" --skip-column-names -B -D "$DB_REALMD" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(60%)\r'
          sudo mysql --defaults-extra-file="$SQL_MYCNF" -D "$DB_REALMD" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
        done
        echo -ne '(70%)\r'
        sleep 1
        echo -ne '(80%)\r'
        TABLES=$(sudo mysql --defaults-extra-file="$SQL_MYCNF" --skip-column-names -B -D "$DB_CHARACTERS" -e 'show tables')
        for T in $TABLES; do
          echo -ne '(90%)\r'
          sudo mysql --defaults-extra-file="$SQL_MYCNF" -D "$DB_CHARACTERS" -e "ALTER TABLE $T Engine=InnoDB ROW_FORMAT=DYNAMIC"
          echo -ne '(95%)\r'
        done
        echo -ne '(96%)\r'
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        echo -ne '(97%)\r'
        sleep 1
        echo -ne '(98%)\r'
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        echo -ne '(99%)\r'
        sleep 1
        echo -ne '(100%)\r'
        echo
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # convert_mysql_engine = myisam -> innodb done

      # reinstall (delete /classic-db)

    "4")

      read -r -p "[YN] Reinstall (Delete /classic-db)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        cp "$FOLDER_DB"/InstallFullDB.config "$FOLDER_WOW" &>/dev/null
        sudo rm -r "$FOLDER_DB" &>/dev/null
        cd "$FOLDER_WOW" || exit
        git clone "$GITHUB_DATABASE"
        mv "$FOLDER_WOW"/*.config "$FOLDER_DB" &>/dev/null
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reinstall (delete /classic-db) done

      # reset --hard origin/master

    "5")

      read -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$FOLDER_DB" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # restart mysql/mariadb server (service)

    "6")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Restart MariaDB
 2 : Restart MySQL
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # restart mariadb

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sleep 1
        sudo service mariadb status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart mysql

      "2")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql restart &>/dev/null
        sleep 1
        sudo service mysql status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # restart mysql/mariadb server (service) done

      # Stop mysql/mariadb server (service)

    "7")

      clear
      cat <<EOF
 Database system
 (service)

 1 : Stop MySQL
 2 : Stop MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # stop mysql

      "1")

        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mysql status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # stop mariadb

      "2")

        sudo service mariadb stop &>/dev/null
        sleep 1
        sudo service mariadb status 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # Stop mysql/mariadb server (service) done

      # enable/disable mysql/mariadb server

    "8")

      clear
      cat <<EOF
 Enable/Disable MySQL
 (systemctl)

 1 : Enable MySQL
 2 : Disable MySQL
 3 : Enable MariaDB
 4 : Disable MariaDB
 q : Quit

EOF
      read -r -n1 -s
      case "$REPLY" in

      # enable mysql

      "1")

        sudo systemctl enable mysql 2>/dev/null
        sudo systemctl enable mysql.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mysql

      "2")

        sudo systemctl disable mysql 2>/dev/null
        sudo systemctl disable mysql.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # enable mariadb

      "3")

        sudo systemctl enable mariadb@.service 2>/dev/null
        sudo systemctl enable mariadb@ 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # disable mariadb

      "4")

        sudo systemctl disable mariadb@ 2>/dev/null
        sudo systemctl disable mariadb.service 2>/dev/null
        # reload
        sudo systemctl daemon-reload 2>/dev/null
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

      "q") return ;;
      "Q") echo "case sensitive!!" ;;
      *) echo "invalid option" ;;

      esac

      ;;

      # enable/disable mysql/mariadb server

      # apply all updates [A] to [B]

    "9")

      sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
      printf '%b' "[!!] [${R0:?}Warning${N0:?}]: Only update whats missing.
Check log for which database needs 'applying updates'"
      echo
      # combine [A] to [B] updates individually
      cat "${FOLDER_CORE:?}"/sql/updates/characters/*.sql >"$FOLDER_WOW"/.all_characters.sql
      cat "${FOLDER_CORE:?}"/sql/updates/mangos/*.sql >"$FOLDER_WOW"/.all_mangos.sql
      cat "${FOLDER_CORE:?}"/sql/updates/realmd/*.sql >"$FOLDER_WOW"/.all_realmd.sql

      # apply all updates [A] to [B] characters ?
      echo
      read -r -p "[YN] Characters? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Loading.."
        echo
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *) sudo service realmd stop ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac
        echo
        read -r -p "[YN] Without error output? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_CHARACTERS" <"$FOLDER_WOW"/.all_characters.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_CHARACTERS" <"$FOLDER_WOW"/.all_characters.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}]"
        echo
      fi
      # apply all updates [A] to [B] mangos ?
      read -r -p "[YN] Mangos? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Loading.."
        echo
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *) sudo service realmd stop ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac
        echo
        read -r -p "[YN] Without error output? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_MANGOS" <"$FOLDER_WOW"/.all_mangos.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_MANGOS" <"$FOLDER_WOW"/.all_mangos.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}]"
        echo
      fi
      # apply all updates [A] to [B] realmd ?
      read -r -p "[YN] Realmd? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Loading.."
        echo
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *) sudo service realmd stop ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac
        echo
        read -r -p "[YN] Without error output? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_REALMD" <"$FOLDER_WOW"/.all_realmd.sql 2>/dev/null
        else
          mysql --defaults-extra-file="$SQL_MYCNF" -f --database="$DB_REALMD" <"$FOLDER_WOW"/.all_realmd.sql
        fi
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}]"
        echo
      fi
      # remove old 'combined updates' sql files
      rm "$FOLDER_WOW"/.*.sql 2>/dev/null
      # InstallFullDB ?
      echo
      printf '%b' "${G0:?}Recommended if you applied anything${N0:?}"
      echo
      read -r -p "[YN] InstallFullDB? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        printf '%b' "[OK] Loading.."
        echo
        sleep 1
        # realmd service
        case "$(echo "$PIDOF_REALMD")" in
        0) ;;
        *) sudo service realmd stop ;;
        esac
        # mangosd service
        case "$(echo "$PIDOFMANGOSD")" in
        0) ;;
        *) sudo service mangosd stop ;;
        esac
        printf '%b' "[${G1:?}OK${N0:?}]"
        echo
        sudo chown -R "$USER":"$GROUP" "$FOLDER_WOW"
        cd "$FOLDER_DB" || exit
        ./InstallFullDB.sh
        sudo service mariadb stop &>/dev/null
        sudo service mysql stop &>/dev/null
        sleep 1
        sudo service mariadb restart &>/dev/null
        sudo service mysql restart &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] "
      fi
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # apply all updates [A] to [B] done

    esac

    ;;

    # update database done

    # accounts

  "u")

    echo "User Accounts"
    echo
    mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT username, gmlevel, lockedIp, active_realm_id, id FROM $DB_REALMD.account;" 2>/dev/null
    read -r -p "[YN] Last Logins? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT id, accountId, ip, loginTime, loginSource, id FROM $DB_REALMD.account_logons;" 2>/dev/null
    fi
    read -r -p "[YN] Check database size? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$SQL_MYCNF" <<<"SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' FROM information_schema.TABLES WHERE table_schema = \"$DB_REALMD\" ORDER BY (data_length + index_length) DESC;" | head
      read -r -p "Press Enter to continue" </dev/tty
    fi

    ;;

    # accounts done

    # characters

  "t")

    # get class count
    FILE_CLASSES="/var/log/ms/classes.$NOW"
    if [ ! -f $FILE_CLASSES ]; then
      # remove old file
      rm /var/log/ms/classes.* &>/dev/null
      # get classes from table characters
      mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT class FROM $DB_CHARACTERS.characters;" 2>/dev/null |
        tr -d 'class' >/var/log/ms/classes."$NOW" # update this everyday
    fi

    # index class, count each one
    WARRIOR=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | egrep -x '.{1}' 2>/dev/null | grep "1" 2>/dev/null | wc -l 2>/dev/null)
    PALADIN=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "2" 2>/dev/null | wc -l 2>/dev/null)
    HUNTER=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "3" 2>/dev/null | wc -l 2>/dev/null)
    ROGUE=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "4" 2>/dev/null | wc -l 2>/dev/null)
    PRIEST=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "5" 2>/dev/null | wc -l 2>/dev/null)
    SHAMAN=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "7" 2>/dev/null | wc -l 2>/dev/null)
    MAGE=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "8" 2>/dev/null | wc -l 2>/dev/null)
    WARLOCK=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "9" 2>/dev/null | wc -l 2>/dev/null)
    DRUID=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | egrep -x '.{2}' 2>/dev/null | grep "11" 2>/dev/null | wc -l 2>/dev/null)

    # total count
    CLASS_TOTAL=$(cat /var/log/ms/classes."$NOW" 2>/dev/null | grep "[1-9]" 2>/dev/null | wc -l 2>/dev/null)

    # percentage of each class
    WARRIOR_P=$(echo "100/$CLASS_TOTAL*$WARRIOR" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    PALADIN_P=$(echo "100/$CLASS_TOTAL*$PALADIN" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    HUNTER_P=$(echo "100/$CLASS_TOTAL*$HUNTER" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    ROGUE_P=$(echo "100/$CLASS_TOTAL*$ROGUE" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    PRIEST_P=$(echo "100/$CLASS_TOTAL*$PRIEST" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    SHAMAN_P=$(echo "100/$CLASS_TOTAL*$SHAMAN" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    MAGE_P=$(echo "100/$CLASS_TOTAL*$MAGE" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    WARLOCK_P=$(echo "100/$CLASS_TOTAL*$WARLOCK" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)
    DRUID_P=$(echo "100/$CLASS_TOTAL*$DRUID" 2>/dev/null | bc -l 2>/dev/null | awk -F. '{ print $1 }' 2>/dev/null)

    echo "Characters"
    echo
    mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT name, level, online, account, class FROM $DB_CHARACTERS.characters;" 2>/dev/null
    printf '%b' "
Classes

${GR:?}1 ${N0:?} Warrior\e[32m.:${N0:?} $WARRIOR ${GR:?}$WARRIOR_P%${N0:?}
${GR:?}2 ${N0:?} Paladin\e[32m.:${N0:?} $PALADIN ${GR:?}$PALADIN_P%${N0:?}
${GR:?}3 ${N0:?} Hunter\e[32m..:${N0:?} $HUNTER ${GR:?}$HUNTER_P%${N0:?}
${GR:?}4 ${N0:?} Rogue\e[32m...:${N0:?} $ROGUE ${GR:?}$ROGUE_P%${N0:?}
${GR:?}5 ${N0:?} Priest\e[32m..:${N0:?} $PRIEST ${GR:?}$PRIEST_P%${N0:?}
${GR:?}7 ${N0:?} Shaman\e[32m..:${N0:?} $SHAMAN ${GR:?}$SHAMAN_P%${N0:?}
${GR:?}8 ${N0:?} Mage\e[32m....:${N0:?} $MAGE ${GR:?}$MAGE_P%${N0:?}
${GR:?}9 ${N0:?} Warlock\e[32m.:${N0:?} $WARLOCK ${GR:?}$WARLOCK_P%${N0:?}
${GR:?}11${N0:?} Druid\e[32m...:${N0:?} $DRUID ${GR:?}$DRUID_P%${N0:?}\n"
    echo
    read -r -p "[YN] Check database size? y/n " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      mysql --defaults-extra-file="$SQL_MYCNF" <<<"SELECT table_name AS 'Tables', round(((data_length + index_length) / 1024 / 1024), 2) 'Size in MB' FROM information_schema.TABLES WHERE table_schema = \"$DB_CHARACTERS\" ORDER BY (data_length + index_length) DESC;" | head
      read -r -p "Press Enter to continue" </dev/tty
    fi

    ;;

    # characters done

    # guilds

  "g")

    echo "Guilds"
    echo
    mysql --defaults-extra-file="$SQL_MYCNF" --execute="SELECT name, motd FROM $DB_CHARACTERS.guild;" 2>/dev/null
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # guilds done

    # shutdown server ? >> (ﾉ °益°)ﾉ 彡 ┻━┻ holy *@?!1kek .. need muh grindz x()<zz ! OO

  "s")

    # check if 'mangosd.conf' are installed
    FILE="$FOLDER_CORE/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "[!!] ${GR:?}mangosd.conf${N0:?} not found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "$FOLDER_WOW"/backup/configurations/mangosd.conf "$FOLDER_CORE"/run/etc/ 2>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="$FOLDER_CORE/run/etc/realmd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "[!!] ${GR:?}realmd.conf${N0:?} not found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "$FOLDER_WOW"/backup/configurations/realmd.conf "$FOLDER_CORE"/run/etc/ 2>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      HEIGHT=10
      WIDTH=27
      CHOICE_HEIGHT=4
      BACKTITLE="shutdown server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Shutdown Server"
        2 "Shutdown realmd"
        3 "Shutdown mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # shutdown realmd, mangosd

      "1")

        read -r -p "[YN] Shutdown realmd, mangosd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            # running screen named realmd
            if screen -list 2>/dev/null |
              grep -q "realmd" &>/dev/null; then
              # get realmd screen id
              REALMD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.realmd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $REALMD_ID.realmd\n"
            else
              printf '%b' "[${GR:?}!!${N0:?}] realmd not running!\n"
            fi
            if screen -list 2>/dev/null |
              grep -q "mangosd" &>/dev/null; then
              # get mangosd screen id
              MANGOSD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.mangosd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $MANGOSD_ID.mangosd\n"
            else
              printf '%b' "[${GR:?}!!${N0:?}] mangosd not running!\n"
            fi
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            # this is for docker users
            if [ -f /.dockerenv ]; then
              # keep old logs
              cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
              cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            else
              # realmd service
              case "$(echo "$PIDOF_REALMD")" in
              0)
                printf '%b' "[${GR:?}OK${N0:?}] realmd service not running.\n"
                sleep 1
                ;;
              *)
                printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd.service\n"
                sleep 1
                sudo service realmd stop
                sudo kill -9 "$PIDOF_REALMD" &>/dev/null
                sleep 1
                printf '%b' "[${G1:?}OK${N0:?}] Stopped! realmd.service!\n"
                ;;
              esac
              # mangosd service
              case "$(echo "$PIDOFMANGOSD")" in
              0)
                printf '%b' "[${GR:?}OK${N0:?}] mangosd service not running.\n"
                sleep 1
                ;;
              *)
                printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd.service\n"
                sleep 1
                sudo service mangosd stop
                sudo kill -9 "$PIDOFMANGOSD" &>/dev/null
                sleep 1
                printf '%b' "[${G1:?}OK${N0:?}] Stopped! mangosd.service\n"
                ;;
              esac
            fi
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown realmd, mangosd done

        # shutdown realmd

      "2")

        read -r -p "[YN] Shutdown realmd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd"; then
              # get realmd screen id
              REALMD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.realmd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $REALMD_ID.realmd\n"
              # keep old logs
              cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
              cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            else
              printf '%b' "[${GR:?}!!${N0:?}] realmd not running!\n"
              sleep 2
            fi
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            # realmd service
            case "$(echo "$PIDOF_REALMD")" in
            0)
              printf '%b' "[${GR:?}NO${N0:?}] realmd.service already shutdown!\n"
              sleep 1
              ;;
            *)
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd.service\n"
              sleep 1
              sudo service realmd stop
              sudo kill -9 "$PIDOF_REALMD" &>/dev/null
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! realmd.service!\n"
              sleep 2
              ;;
            esac
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown realmd done

        # shutdown mangosd

      "3")

        read -r -p "[YN] Shutdown mangosd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "mangosd"; then
              # get mangosd screen id
              MANGOSD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.mangosd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $MANGOSD_ID.mangosd\n"
              # keep old logs
              cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
              cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            else
              printf '%b' "[${GR:?}!!${N0:?}] mangosd not running!\n"
              sleep 2
            fi
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            # mangosd service
            case "$(echo "$PIDOFMANGOSD")" in
            0)
              printf '%b' "[${GR:?}OK${N0:?}] mangosd.service already shutdown!\n"
              sleep 1
              ;;
            *)
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd.service\n"
              sleep 1
              sudo service mangosd stop
              sudo kill -9 "$PIDOFMANGOSD" &>/dev/null
              sleep 1
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! mangosd.service\n"
              ;;
            esac
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # shutdown mangosd done

      esac
    fi

    ;;

    # shutdown server done << it's over!!

    # restart server

  "r")

    # check if 'mangosd.conf' are installed
    FILE="$FOLDER_CORE/run/etc/mangosd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "${GR:?}mangosd.conf${N0:?} not found!\n"
      sleep 1
      # restore mangosd configuration from backup if possible
      if cp "$FOLDER_WOW"/backup/configurations/mangosd.conf "$FOLDER_CORE"/run/etc/ 2>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}mangosd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit mangosd.conf.dist into mangosd.conf"
      fi
      sleep 3
    fi
    # check if 'realmd.conf' are installed
    FILE="$FOLDER_CORE/run/etc/realmd.conf"
    if [ ! -f "$FILE" ]; then
      printf '%b' "[!!] ${GR:?}realmd.conf${N0:?} not found!\n"
      sleep 1
      # restore realmd configuration from backup if possible
      if cp "$FOLDER_WOW"/backup/configurations/realmd.conf "$FOLDER_CORE"/run/etc/ 2>/dev/null; then
        printf '%b' "[${G1:?}OK${N0:?}] Restored configuration! (${G1:?}realmd.conf${N0:?})\n"
      else
        echo "[!!] No backup found!"
        echo "[!!] Please edit realmd.conf.dist into realmd.conf"
      fi
      sleep 3
    else
      if ! [ -x "$(command -v screen)" ]; then
        sudo apt-get install screen -y 2>/dev/null
      fi

      HEIGHT=10
      WIDTH=26
      CHOICE_HEIGHT=4
      BACKTITLE="restart server"
      TITLE="Service Control"
      MENU="Choose one option:"

      OPTIONS=(1 "Restart server"
        2 "Restart realmd"
        3 "Restart mangosd")

      CHOICE=$(dialog --clear \
        --backtitle "$BACKTITLE" \
        --title "$TITLE" \
        --menu "$MENU" \
        $HEIGHT $WIDTH $CHOICE_HEIGHT \
        "${OPTIONS[@]}" \
        2>&1 >/dev/tty)

      clear
      case $CHOICE in

      # restart realmd,mangos

      "1")

        read -r -p "[YN] Restart realmd,mangos? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            # running screen named realmd
            if screen -list 2>/dev/null |
              grep -q "realmd" 2>/dev/null; then
              # get realmd screen id
              REALMD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.realmd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$REALMD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping realmd screen\n"
              screen -S "$REALMD_ID" -X quit &>/dev/null
              screen -S realmd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $REALMD_ID.realmd\n"
            else
              printf '%b' "[${GR:?}!!${N0:?}] realmd not running!\n"
            fi
            # running screen named mangosd
            if screen -list 2>/dev/null |
              grep -q "mangosd" &>/dev/null; then
              # get mangosd screen id
              MANGOSD_ID=$(screen -list 2>/dev/null | grep -Eo "[0-9]+.mangosd" 2>/dev/null |
                awk -F. '{ print $1 }' 2>/dev/null)
              printf '%b' "[${G0:?}OK${N0:?}] Killing screen (${GR:?}$MANGOSD_ID${N0:?})\n"
              # kill that screen
              printf '%b' "[${Y1:?}OK${N0:?}] Stopping mangosd screen\n"
              screen -S "$MANGOSD_ID" -X quit &>/dev/null
              screen -S mangosd -X quit &>/dev/null
              printf '%b' "[${G1:?}OK${N0:?}] Stopped! $MANGOSD_ID.mangosd\n"
            else
              printf '%b' "[${GR:?}!!${N0:?}] mangosd not running!\n"
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screens
            screen -dmS realmd &>/dev/null
            screen -dmS mangosd &>/dev/null
            # setup variables ruled by configuration
            REALMD_SCREEN="$FOLDER_CORE/run/bin/./realmd -c $FOLDER_CORE/run/etc/realmd.conf\n"
            MANGOSD_SCREEN="$FOLDER_CORE/run/bin/./mangosd -c $FOLDER_CORE/run/etc/mangosd.conf\n"
            # implement daemons inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN" &>/dev/null
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN" &>/dev/null
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            echo
            read -r -p "Press Enter to continue" </dev/tty
            echo
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            # done
            printf '%b' "[${G1:?}OK${N0:?}] Restarting realmd, mangos service..\n"
            sleep 1
            sudo service realmd restart &>/dev/null
            # realmd service
            case "$(echo "$PIDOF_REALMD")" in
            0) printf '%b' "[${G0:?}OK${N0:?}] realmd.service starting\n" ;;
            1) printf '%b' "[${G1:?}OK${N0:?}] realmd.service started!\n" ;;
            *) printf '%b' "[${Y1:?}0!${N0:?}] realmd.service running?\n" ;;
            esac
            sleep 1
            sudo service mangosd restart &>/dev/null
            # mangosd service
            case "$(echo "$PIDOFMANGOSD")" in
            0) printf '%b' "[${G0:?}OK${N0:?}] mangosd.service starting\n" ;;
            1) printf '%b' "[${G1:?}OK${N0:?}] mangosd.service started!\n" ;;
            *) printf '%b' "[${Y1:?}0!${N0:?}] mangosd.service running?\n" ;;
            esac
            sleep 1
            read -t 5 -r -p "[YN] Wait on mangosd? y/n " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Nn]$ ]]; then
              # wait on mangosd
              until grep -q -o "World initialized" "$FOLDER_CORE"/run/logs/Server.log; do
                printf '%b' "[${GR:?}OK${N0:?}] ${GR:?}Waiting 5 seconds..${N0:?}\n"
                sleep 5
              done
            fi

            # realmd.log #######################################################

            # if realm failed
            if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
              # if any, print "Realm failed or halted"
              printf '%b' "[${R1:?}0H${N0:?}] Realm failed or halted!\n"
            else
              # look for empty tables
              if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                # count empty inside log
                COUNT_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
                # if any, print "empty"
                printf '%b' "[${Y1:?}0E${N0:?}] Realm: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty, doesn't exist!\n"
              fi
              # look for error
              if grep -E -q ".*ERROR*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                # count errors inside log
                COUNT_ERROR_REALM=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
                # error rate (total)
                LOG_LINES=$(wc -l "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null | awk '{ print $1 }' 2>/dev/null)
                # calculate error rate
                CALC_ERROR_REALM=$(echo "100/$LOG_LINES*$COUNT_ERROR_REALM" 2>/dev/null | bc -l 2>/dev/null | awk '{ printf "%.2f%\n", $1 }' 2>/dev/null)
                ERROR_RATE_REALM=$(echo "${CALC_ERROR_REALM:?}%")
                # if any, print "error"
                printf '%b' "[${R1:?}1E${N0:?}] Realm: ${R1:?}$COUNT_ERROR_REALM${N0:?} Error! ${GR:?}$ERROR_RATE_REALM${N0:?}\n"
              else
                # if nothing, print "ok"
                printf '%b' "[${G1:?}OK${N0:?}] Realm: OK!\n"
              fi
              # this database (realmd) is out of date!
              if grep -E -q "You\shave:\s-->" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                printf '%b' "[${Y1:?}0D${N0:?}] Realm database is out of date!\n"
                printf '%b' "[${G0:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
              fi
              # databases is missing or corrupt.
              if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                printf '%b' "[${R1:?}X0${N0:?}] Realm database is missing or corrupt!\n"
              fi
              # reinstall your (realmd) database
              if grep -E -q "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                printf '%b' "[${R1:?}X1${N0:?}] Reinstall your realm database!\n"
              fi
              # can't connect to local mysql through socket
              if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                printf '%b' "[${R1:?}X2${N0:?}] Realm can't connect to local MySQL!\n"
              fi
              # your realmd.conf version indicates your conf file is out of date
              if grep -E -q ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
                printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
              fi
            fi

            # server.log #######################################################

            # if world failed
            if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
              # if any, print "World failed or halted"
              printf '%b' "[${R1:?}0H${N0:?}] World failed or halted!\n"
            else
              # look for empty tables
              if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                # count empty inside log
                COUNT_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
                # if any, print "empty"
                printf '%b' "[${Y1:?}0E${N0:?}] World: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty or doesn't exist!\n"
              fi
              # look for error
              if grep -E -q ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                # count errors inside log
                COUNT_ERROR_SERVER=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
                # error rate (total)
                LOG_LINES=$(wc -l "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null | awk '{ print $1 }' 2>/dev/null)
                # calculate error rate
                CALC_ERROR_SERVER=$(echo "100/$LOG_LINES*$COUNT_ERROR_SERVER" 2>/dev/null | bc -l 2>/dev/null | awk '{ printf "%.2f%\n", $1 }' 2>/dev/null)
                ERROR_RATE_SERVER=$(echo "${CALC_ERROR_SERVER:?}")
                # if any, print "error"
                printf '%b' "[${R1:?}1E${N0:?}] World: ${R1:?}$COUNT_ERROR_SERVER${N0:?} Error! ${GR:?}${ERROR_RATE_SERVER:?} percent${N0:?}\n"
                # look for serious error
                if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                  # count serious errors inside log
                  COUNT_ERROR_SERIOUS=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
                  # if any, print "serious"
                  printf '%b' "[${R1:?}X9${N0:?}] World has ${R1:?}$COUNT_ERROR_SERIOUS${N0:?} serious error!\n"
                fi
              else
                # if nothing, print "ok"
                printf '%b' "[${G1:?}OK${N0:?}] World OK!\n"
              fi
              # world failed
              if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                # if any, print "World failed"
                echo
                printf '%b' "$SERVER_LOG_FAILED"
                echo
              fi
              # this database (mangosd) is out of date!
              if grep -E -q "You\shave:\s-->" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                printf '%b' "[${GR:?}0D${N0:?}] World database is out of date!\n"
                printf '%b' "[${GR:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
              fi
              # databases is missing or corrupt.
              if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                printf '%b' "[${R1:?}X0${N0:?}] World database is missing or corrupt!\n"
              fi
              # reinstall your (mangosd) database
              if grep -E -q "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                printf '%b' "[${R1:?}X1${N0:?}] Reinstall your world database!\n"
              fi
              # can't connect to local mysql through socket
              if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                printf '%b' "[${R1:?}X2${N0:?}] World can't connect to local MySQL!\n"
              fi
              # your mangosd.conf version indicates your conf file is out of date
              if grep -E -q ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
              fi

              # Playerbot loaded
              if grep -E -q "Playerbot: Using configuration file" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                # if any, print "Playerbot ok"
                printf '%b' "[${G1:?}OK${N0:?}] Playerbot\n"
              else
                # offline
                printf '%b' "[${GR:?}NO${N0:?}] Playerbot\n"
              fi
              # ahbot loaded and initialized
              if grep -E -q "Initialize AuctionHouseBot..." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
                # if any, print "AHbot ok"
                printf '%b' "[${G1:?}OK${N0:?}] AHbot\n"
              else
                # off
                printf '%b' "[${GR:?}NO${N0:?}] AHbot\n"
              fi
              # get startup time
              STARTUP_TIME=$(grep "SERVER\sSTARTUP\sTIME*." wow/mangos-classic/run/logs/Server.log 2>/dev/null |
                cut -d\  -f6-9 2>/dev/null)
              printf '%b' "[${G1:?}OK${N0:?}] World initialized! $STARTUP_TIME\n"
            fi
            echo
            printf '%b' "${G0:?}>${N0:?} hit Any key to go back."
            echo
            read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
            echo
            echo
            case $ans in
            "t")
              tail "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null
              echo
              read -r -p "Press Enter to continue" </dev/tty
              ;;
            "f")
              echo
              tail -f "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null
              ;;
            "n")
              echo
              nano "$FOLDER_CORE"/run/logs/Server.log
              ;;
            "N")
              echo
              nano "$FOLDER_CORE"/run/logs/Realmd.log
              ;;

              # lnav

            "l")
              echo
              # codes
              LOGS=("$FOLDER_CORE"/run/logs/EventAIErrors.log
                "$FOLDER_CORE"/run/logs/DBErrors.log
                "$FOLDER_CORE"/run/logs/Realmd.log
                "$FOLDER_CORE"/run/logs/Server.log)
              # codes done
              if ! [ -x "$(command -v lnav)" ]; then
                sudo apt install lnav -y 2>/dev/null
              fi
              lnav "${LOGS[@]}" 2>/dev/null
              ;;

            esac
          fi
        fi

        ;;

        # restart realmd,mangos done

        # restart realmd

      "2")

        read -r -p "[YN] Restart realmd? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "realmd" &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}realmd${N0:?})\n"
              sudo killall screen
              sleep 2
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screen
            screen -dmS realmd &>/dev/null
            # setup variable ruled by configuration
            REALMD_SCREEN="$FOLDER_CORE/run/bin/./realmd -c $FOLDER_CORE/run/etc/realmd.conf\n"
            # implement daemon inside newly made screens
            screen -S realmd -X -p 0 stuff "$REALMD_SCREEN" &>/dev/null
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
            # restart service (realmd)
            printf '%b' "[${Y1:?}OK${N0:?}] Restarting realmd, mangos service..\n"
            sleep 1
            sudo service realmd restart &>/dev/null
            printf '%b' "[${G1:?}OK${N0:?}] realmd service started!\n"
            sleep 2
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart realmd done

        # restart mangosd

      "3")

        read -r -p "[YN] Restart mangos? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # this is for docker users
          if [ -f /.dockerenv ]; then
            if screen -list 2>/dev/null |
              grep -q "mangosd" &>/dev/null; then
              printf '%b' "[${G1:?}OK${N0:?}] Killing screen (${GR:?}mangosd${N0:?})\n"
              sudo killall screen
              sleep 2
            fi
            printf '%b' "[${G1:?}OK${N0:?}] Starting server with screen.\n"
            sleep 2
            # remove dead screens
            screen -wipe &>/dev/null
            # setup screen
            screen -dmS mangosd &>/dev/null
            # setup variables ruled by configuration
            MANGOSD_SCREEN="$FOLDER_CORE/run/bin/./mangosd -c $FOLDER_CORE/run/etc/mangosd.conf\n"
            # implement daemon inside newly made screens
            screen -S mangosd -X -p 0 stuff "$MANGOSD_SCREEN" &>/dev/null
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            cp "$FOLDER_CORE"/run/logs/Realmd.log "$FOLDER_CORE"/run/logs/Realmd.log.old &>/dev/null
          else
            # keep old logs
            cp "$FOLDER_CORE"/run/logs/Server.log "$FOLDER_CORE"/run/logs/Server.log.old &>/dev/null
            # restart service (mangosd)
            printf '%b' "[${Y1:?}OK${N0:?}] Restarting mangos service..\n"
            sleep 1
            sudo service mangosd restart &>/dev/null
            printf '%b' "[${G1:?}OK${N0:?}] mangosd service started!\n"
            sleep 2
          fi
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo

        ;;

        # restart mangosd done

      esac
    fi

    ;;

    # lnav - done

    # restart server done

    # update cmangos-script

  "w")

    # codes
    if ! [ -x "$(command -v dialog)" ]; then
      sudo apt-get install dialog -y
    fi
    # codes done
    HEIGHT=11
    WIDTH=37
    CHOICE_HEIGHT=3
    BACKTITLE="update Helper"
    TITLE="Update cmangos-script [Helper]"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Update helper"
      2 "Reinstall /cmangos-script"
      3 "Reset --hard origin/master")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # update helper

    "1")

      FILE="${FOLDER_INSTALL:?}/cmangos-script/README.md"
      if [ ! -f "$FILE" ]; then
        # not installed
        sudo chown -R "$USER":"$GROUP" "$FOLDER_INSTALL"
        cd "$FOLDER_INSTALL" || exit
        git clone "${GITHUB_HELPER:?}"
      else
        # installed
        read -r -p "[YN] Update/Install Helper? y/n " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          sudo chown -R "$USER":"$GROUP" "$FOLDER_INSTALL"
          echo
          echo "[OK] Checking your current release"
          echo
          sleep 1
          cd "$FOLDER_HELPER" || exit
          if git checkout master &>/dev/null &&
            git fetch origin master &>/dev/null &&
            [ "$(git rev-list HEAD...origin/master --count)" != 0 ] &&
            git merge origin/master; then
            LATEST_DATE=$(git log -1 --format="%at" | xargs -I{} date -d @{} '+%Y/%m/%d %H:%M:%S')
            LATEST_HEAD=$(git rev-parse --short HEAD)
            printf '%b' "[${R0:?}old${N0:?}] (${G0:?}${UND:?}$LATEST_HEAD${N0:?}) ${G0:?}${UND:?}New Updates For Helper${N0:?}! - $LATEST_DATE"
            echo
            cd "$FOLDER_HELPER" || exit
            echo
            sleep 1
            printf '%b' "[${R0:?}old${N0:?}] -> old release installed!"
            sleep 1
            echo
            echo
            printf '%b' "[${G0:?}Updating Helper${N0:?}]"
            echo
            echo
            # keep old mangos
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            # done
            printf '%b' "[${G1:?}OK${N0:?}] -> /usr/local/bin/mangos.old"
            sleep 1
            echo
            printf '%b' "[${G1:?}OK${N0:?}] -> Stripping executable on 'mangos.old'"
            sleep 1
            echo
            sudo chmod -x /usr/local/bin/mangos.old
            sudo chown -R "$USER":"$GROUP" "$FOLDER_HELPER"
            cd "$FOLDER_HELPER" || exit
            printf '%b' "[${G1:?}OK${N0:?}] -> Installing new release"
            sleep 1
            echo
            sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin &>/dev/null
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] -> Installed."
            echo
            echo
            sleep 1 && exit
          else
            # install new upgrades
            sudo cp /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
            sudo chmod -x /usr/local/bin/mangos.old
            sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin/mangos &>/dev/null
            sudo chmod +x /usr/local/bin/mangos
            sleep 1
            printf '%b' "[${G1:?}OK${N0:?}] -> Installed."
            echo
            echo
          fi
          # create ms folder
          sudo mkdir /var/log/ms/ 2>/dev/null
          # fix ownership
          sudo chown -R "${USER:?}":"${GROUP:?}" /var/log/ms
          # create installed mark
          echo "CMaNGOS Script was installed at ${NOW:?}" >/var/log/ms/installed_ms
          sleep 1 && exit
        fi
      fi

      ;;

      # update helper done

      # fresh install (delete/git clone /cmangos-script)

    "2")

      read -r -p "[YN] Reinstall (delete/git clone /cmangos-script)? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        sudo mv /usr/local/bin/mangos /usr/local/bin/mangos.old &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] -> installed mangos removed."
        echo
        sudo rm -r "$FOLDER_HELPER"
        printf '%b' "[${G1:?}OK${N0:?}] -> cmangos-script removed."
        echo
        sudo mkdir "${FOLDER_INSTALL:?}" &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] -> $FOLDER_INSTALL/> git clone.."
        echo
        cd "$FOLDER_INSTALL" || exit
        git clone "$GITHUB_HELPER"
        sudo cp "$FOLDER_HELPER"/mangos /usr/local/bin &>/dev/null
        printf '%b' "[${G1:?}OK${N0:?}] -> Installing new release"
        sudo chmod +x /usr/local/bin/mangos
        echo
        sleep 1
        printf '%b' "[${G1:?}OK${N0:?}] -> Installed."
        echo
        echo
        sleep 2
        exit
      fi

      ;;

      # fresh install (delete/git clone /cmangos-script) done

      # reset --hard origin/master

    "3")

      read -r -p "[YN] Reset --hard origin/master? y/n " -n 1 -r
      echo
      if [[ $REPLY =~ ^[Yy]$ ]]; then

        cd "$FOLDER_HELPER" || exit
        git reset --hard origin/master
        printf '%b' "[${G1:?}OK${N0:?}] "
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # reset --hard origin/master done

      # update cmangos-script done

    esac

    ;;

    # Check logs

  "l")

    clear

    # realmd.log ###############################################################

    if [[ "$PIDOFMANGOSD" -eq "1" ]]; then
      # if realm failed
      if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
        # if any, print "Realm failed or halted"
        printf '%b' "[${R1:?}0H${N0:?}] Realm failed or halted!\n"
      else
        # look for empty tables
        if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          # count empty inside log
          COUNT_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
          # if any, print "empty"
          printf '%b' "[${Y1:?}0E${N0:?}] Realm: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty, doesn't exist!\n"
        fi
        # look for error
        if grep -E -q ".*ERROR*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          # count errors inside log
          COUNT_ERROR_REALM=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null)
          # error rate (total)
          LOG_LINES=$(wc -l "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null | awk '{ print $1 }' 2>/dev/null)
          # calculate error rate
          CALC_ERROR_REALM=$(echo "100/$LOG_LINES*$COUNT_ERROR_REALM" 2>/dev/null | bc -l 2>/dev/null | awk '{ printf "%.2f%\n", $1 }' 2>/dev/null)
          ERROR_RATE_REALM=$(echo "${CALC_ERROR_REALM:?}%")
          # if any, print "error"
          printf '%b' "[${R1:?}1E${N0:?}] Realm: ${R1:?}$COUNT_ERROR_REALM${N0:?} Error! ${GR:?}$ERROR_RATE_REALM${N0:?}\n"
        else
          # if nothing, print "ok"
          printf '%b' "[${G1:?}OK${N0:?}] Realm: OK!\n"
        fi
        # this database (realmd) is out of date!
        if grep -E -q "You\shave:\s-->" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          printf '%b' "[${Y1:?}0D${N0:?}] Realm database is out of date!\n"
          printf '%b' "[${G0:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
        fi
        # databases is missing or corrupt.
        if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          printf '%b' "[${R1:?}X0${N0:?}] Realm database is missing or corrupt!\n"
        fi
        # reinstall your (realmd) database
        if grep -E -q "reinstall\syour|\sUnknown\sdatabase\s|Reinstall\syour\s[REALMD]\sdatabase\s" "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          printf '%b' "[${R1:?}X1${N0:?}] Reinstall your realm database!\n"
        fi
        # can't connect to local mysql through socket
        if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          printf '%b' "[${R1:?}X2${N0:?}] Realm can't connect to local MySQL!\n"
        fi
        # your realmd.conf version indicates your conf file is out of date
        if grep -E -q ".*Your\srealmd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$FOLDER_CORE"/run/logs/Realmd.log 2>/dev/null; then
          printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
        fi
      fi

      # server.log ###############################################################

      # if world failed
      if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
        # if any, print "World failed or halted"
        printf '%b' "[${R1:?}0H${N0:?}] World failed or halted!\n"
      else
        # look for empty tables
        if grep -E -q "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          # count empty inside log
          COUNT_EMPTY=$(grep -c -E "doesn't\sexist|table\s*\sis\sempty.|table\sis\sempty!|is\sempty." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
          # if any, print "empty"
          printf '%b' "[${Y1:?}0E${N0:?}] World: ${Y1:?}$COUNT_EMPTY${N0:?} Tables are empty or doesn't exist!\n"
        fi
        # look for error
        if grep -E -q ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          # count errors inside log
          COUNT_ERROR_SERVER=$(grep -c -E ".*ERROR*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
          # error rate (total)
          LOG_LINES=$(wc -l "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null | awk '{ print $1 }' 2>/dev/null)
          # calculate error rate
          CALC_ERROR_SERVER=$(echo "100/$LOG_LINES*$COUNT_ERROR_SERVER" 2>/dev/null | bc -l 2>/dev/null | awk '{ printf "%.2f%\n", $1 }' 2>/dev/null)
          ERROR_RATE_SERVER=$(echo "${CALC_ERROR_SERVER:?}")
          # if any, print "error"
          printf '%b' "[${R1:?}1E${N0:?}] World: ${R1:?}$COUNT_ERROR_SERVER${N0:?} Error! ${GR:?}${ERROR_RATE_SERVER:?} percent${N0:?}\n"
          # look for serious error
          if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
            # count serious errors inside log
            COUNT_ERROR_SERIOUS=$(grep -c -E "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null)
            # if any, print "serious"
            printf '%b' "[${R1:?}X9${N0:?}] World has ${R1:?}$COUNT_ERROR_SERIOUS${N0:?} serious error!\n"
          fi
        else
          # if nothing, print "ok"
          printf '%b' "[${G1:?}OK${N0:?}] World OK!\n"
        fi
        # world failed
        if grep -E -q "malformed|fatal|critical|Segmentation\sfault|core\sdumped|segfault|file\struncated|Halting\sprocess" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          # if any, print "World failed"
          echo
          printf '%b' "$SERVER_LOG_FAILED"
          echo
        fi
        # this database (mangosd) is out of date!
        if grep -E -q "You\shave:\s-->" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          printf '%b' "[${GR:?}0D${N0:?}] World database is out of date!\n"
          printf '%b' "[${GR:?}1D${N0:?}] Menu: 'd' > Apply all updates [A]-[B]"
        fi
        # databases is missing or corrupt.
        if grep -E -q "\sdatabase\sis\smissing\sor\scorrupt." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          printf '%b' "[${R1:?}X0${N0:?}] World database is missing or corrupt!\n"
        fi
        # reinstall your (mangosd) database
        if grep -E -q "reinstall\syour|Reinstall\syour\s[MANGOS]\sdatabase\s" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          printf '%b' "[${R1:?}X1${N0:?}] Reinstall your world database!\n"
        fi
        # can't connect to local mysql through socket
        if grep -E -q ".*Can't\sconnect\sto\slocal\sMySQL*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          printf '%b' "[${R1:?}X2${N0:?}] World can't connect to local MySQL!\n"
        fi
        # your mangosd.conf version indicates your conf file is out of date
        if grep -E -q ".*Your\smangosd.conf\sversion\sindicates\syour\sconf\sfile\sis\sout\sof\sdate*." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          printf '%b' "[${R1:?}X3${N0:?}] realmd.conf is out of date!\n"
        fi

        # Playerbot loaded
        if grep -E -q "Playerbot: Using configuration file" "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          # if any, print "Playerbot ok"
          printf '%b' "[${G1:?}OK${N0:?}] Playerbot\n"
        else
          # offline
          printf '%b' "[${GR:?}NO${N0:?}] Playerbot\n"
        fi
        # ahbot loaded and initialized
        if grep -E -q "Initialize AuctionHouseBot..." "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null; then
          # if any, print "AHbot ok"
          printf '%b' "[${G1:?}OK${N0:?}] AHbot\n"
        else
          # off
          printf '%b' "[${GR:?}NO${N0:?}] AHbot\n"
        fi
        # get startup time
        if STARTUP_TIME=$(grep "SERVER\sSTARTUP\sTIME*." wow/mangos-classic/run/logs/Server.log 2>/dev/null |
          cut -d\  -f6-9 2>/dev/null); then
          printf '%b' "[${G1:?}OK${N0:?}] World initialized! $STARTUP_TIME\n"
        fi
      fi
    fi
    echo
    printf '%b' "${G0:?}>${N0:?} hit Any key to go back."
    echo
    read -r -n 1 -p "Server.log (tail/follow/nano) / Realmd.log (Nano) / logs (lnav)" ans
    echo
    echo
    case $ans in
    "t")
      tail "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null
      echo
      read -r -p "Press Enter to continue" </dev/tty
      ;;
    "f")
      echo
      tail -f "$FOLDER_CORE"/run/logs/Server.log 2>/dev/null
      ;;
    "n")
      echo
      nano "$FOLDER_CORE"/run/logs/Server.log
      ;;
    "N")
      echo
      nano "$FOLDER_CORE"/run/logs/Realmd.log
      ;;

      # lnav

    "l")
      echo
      # codes
      LOGS=("$FOLDER_CORE"/run/logs/EventAIErrors.log
        "$FOLDER_CORE"/run/logs/DBErrors.log
        "$FOLDER_CORE"/run/logs/Realmd.log
        "$FOLDER_CORE"/run/logs/Server.log)
      # codes done
      if ! [ -x "$(command -v lnav)" ]; then
        sudo apt install lnav -y 2>/dev/null
      fi
      lnav "${LOGS[@]}" 2>/dev/null
      ;;

    esac

    ;;

    # check logs done

    # create/apply .patch file

  "p")

    HEIGHT=13
    WIDTH=34
    CHOICE_HEIGHT=5
    BACKTITLE="Patch"
    TITLE="Patch operations"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "Create new patch"
      2 "Apply existing patch"
      3 "Search for .patch files"
      4 "Delete all .patch files"
      5 "my_bool fix (Daedalus)")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in

    # create patch

    "1")

      echo "Please wait"
      sudo chown -R "$USER":"$GROUP" "$FOLDER_CORE"
      # change directory, core
      cd "$FOLDER_CORE" || exit
      git checkout sql/create/db_create_mysql.sql 2>/dev/null
      # create patch
      git diff >"${PATCH:?}"
      printf '%b' "${G1:?}${PATCH:?}${N0:?} Created!\n"
      sleep 2

      ;;

      # create patch done

      # apply patch

    "2")

      cd "$FOLDER_CORE" || exit
      if [ ! -z "$PATCH" ]; then
        PATCH_FILES=$(sudo find "$FOLDER_WOW" -name "*.patch" 2>/dev/null)
        if [ -z "$PATCH_FILES" ]; then
          # non responsive
          PATCH_FILES="${GR:?}[!!] No files found!${N0:?}"
        fi
        echo "Patch files inside $FOLDER_WOW:"
        echo
        printf '%b' "${G0:?}$PATCH_FILES${N0:?}\n"
        echo
        printf '%b' "${GR:?}Press Enter to go back${N0:?}\n"
        printf '%b' "Enter name /${GR:?}name.patch${N0:?}\n"
        read -r NAMED_PATCH
        if [ -z "$NAMED_PATCH" ]; then
          # non responsive
          echo "[!!] Empty!"
          sleep 1
        else
          # named patch
          patch -p1 <"$NAMED_PATCH"
        fi
      else
        # named patch ruled by config
        patch -p1 <"$PATCH"
      fi

      ;;

      # apply patch done

      # search for .patch files

    "3")

      PATCH_FILES=$(sudo find "$FOLDER_WOW" -name "*.patch" 2>/dev/null)
      if [ -z "$PATCH_FILES" ]; then
        # non responsive
        PATCH_FILES="${GR:?}No files found!${N0:?}"
      fi
      echo "Patch files inside $FOLDER_WOW:"
      echo
      printf '%b' "${G0:?}$PATCH_FILES${N0:?}\n"
      echo
      read -r -p "Press Enter to continue" </dev/tty
      echo

      ;;

      # remove patch files (all of them)

    "4")

      cd "$FOLDER_CORE" || exit
      if [ ! -z "$PATCH" ]; then
        PATCH_FILES=$(sudo find "$FOLDER_WOW" -name "*.patch" 2>/dev/null)
        if [ -z "$PATCH_FILES" ]; then
          NOFILES="1"
          # non responsive
          PATCH_FILES="${GR:?}No files found!${N0:?}"
        else
          NOFILES="0"
        fi
        echo "Removing:"
        echo
        printf '%b' "${GR:?}$PATCH_FILES${N0:?}\n"
        echo
        # remove all .patch files inside core folder
        sudo rm -r "$FOLDER_CORE"/*.patch* &>/dev/null
        if [[ "$NOFILES" -eq "1" ]]; then
          sleep 1
          printf '%b' "[${Y1:?}ok${N0:?}]\n"
          sleep 1
        else
          sleep 1
          printf '%b' "[${G1:?}OK${N0:?}]\n"
          sleep 1
        fi
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo
      fi

      ;;

      # remove patch files (all of them) done

      # my_bool fix - https://github.com/cmangos/issues/issues/2187

    "5")

      if [ ! -f "$FOLDER_CORE"/my_bool.patch ]; then
        sudo chown -R "$USER":"$GROUP" "$FOLDER_CORE"
        cd "$FOLDER_CORE" || exit
        # download patch file
        wget https://raw.githubusercontent.com/Daedalus-code/cmangos-arm/master/arm_pi4.patch
        printf '%b' "${G1:?}Patch downloaded!${N0:?}\n"
        sleep 1
        printf '%b' "${G0:?}Renaming patch into '${G1:?}my_bool.patch${G0:?}'${N0:?}\n"
        # rename patch file
        mv arm_pi4.patch "$FOLDER_CORE"/my_bool.patch
        sleep 1
        # run patch inside core folder
        patch -p1 <my_bool.patch
        printf '%b' "${G1:?}Done!${N0:?}\n"
        echo
        read -r -p "Press Enter to continue" </dev/tty
        echo
      else
        # already did this
        printf '%b' "${G0:?}my_bool.patch ${Y1:?}Already patched, this will reverse it!${N0:?}\n"
        # patching reversed
        cd "$FOLDER_CORE" || exit
        patch -p1 <my_bool.patch
      fi

      ;;

      # my_bool fix done

    esac

    ;;

    # search for .patch files done

    # create/apply .patch file done

    # online check

  "o")

    # is fping installed?
    if ! [ -x "$(command -v fping)" ]; then
      sudo apt-get install fping -y 2>/dev/null
    fi
    echo
    printf '%b' "Online check -> ${G1:?}internet${N0:?}/${G1:?}intranet${N0:?}\n"
    echo
    # internet
    if nc -z "${INTERNET:?}" "${REALM_PORT:?}" 2>/dev/null; then
      PING_MS=$(fping -c 1 "$INTERNET" 2>/dev/null |
        grep -o '[0-9].[0-9][0-9] ms' 2>/dev/null)
      PING_LOSS=$(fping -c 1 "$INTERNET" 2>/dev/null |
        grep -o '[0-100]% loss' 2>/dev/null)
      printf '%b' "${G0:?}✓${N0:?} $INTERNET - ${CY:?}$SERVER_NAME${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$INTERNET - $SERVER_NAME - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    # intranet
    if nc -z "${INTRANET:?}" "${REALM_PORT:?}" 2>/dev/null; then
      PING_MS=$(fping -c 1 "$INTRANET" 2>/dev/null |
        grep -o '[0-9].[0-9][0-9] ms' 2>/dev/null)
      PING_LOSS=$(fping -c 1 "$INTRANET" 2>/dev/null |
        grep -o '[0-100]% loss' 2>/dev/null)
      printf '%b' "${G0:?}✓${N0:?} $INTRANET - ${CY:?}${SERVER_NAME_LAN:?}${N0:?} - $PING_MS - $PING_LOSS\n"
    else
      printf '%b' "${R0:?}✗ ${GR:?}$INTRANET - $SERVER_NAME_LAN - ${GR:?}? ms - 100% loss${N0:?}\n"
    fi
    echo
    read -r -p "Press Enter to continue" </dev/tty

    ;;

    # online check done

    # edit/copy config files ?

  "e")

    HEIGHT=19
    WIDTH=31
    CHOICE_HEIGHT=11
    BACKTITLE="Server configuration"
    TITLE="Configurations"
    MENU="Choose one of the following options:"

    OPTIONS=(1 "server.txt"
      2 "server.cnf"
      3 "mangos.conf.dist"
      4 "mangos.conf"
      5 "realmd.conf.dist"
      6 "realmd.conf"
      7 "ahbot.conf.dist"
      8 "ahbot.conf"
      9 "playerbot.conf.dist"
      10 "playerbot.conf"
      11 "InstallFullDB")

    CHOICE=$(dialog --clear \
      --backtitle "$BACKTITLE" \
      --title "$TITLE" \
      --menu "$MENU" \
      $HEIGHT $WIDTH $CHOICE_HEIGHT \
      "${OPTIONS[@]}" \
      2>&1 >/dev/tty)

    clear
    case $CHOICE in
    "1") nano "$FOLDER_INSTALL"/server.txt ;;
    "2") nano "$FOLDER_INSTALL"/server.cnf ;;
    "3") nano "$FOLDER_CORE"/run/etc/mangosd.conf.dist ;;
    "4") nano "$FOLDER_CORE"/run/etc/mangosd.conf ;;
    "5") nano "$FOLDER_CORE"/run/etc/realmd.conf.dist ;;
    "6") nano "$FOLDER_CORE"/run/etc/realmd.conf ;;
    "7") nano "$FOLDER_CORE"/run/etc/ahbot.conf.dist ;;
    "8") nano "$FOLDER_CORE"/run/etc/ahbot.conf ;;
    "9") nano "$FOLDER_CORE"/run/etc/playerbot.conf.dist ;;
    "10") nano "$FOLDER_CORE"/run/etc/playerbot.conf ;;
    "11") nano "$FOLDER_DB"/InstallFullDB.config ;;
    esac

    ;;

  "q") exit ;;
  "Q") echo "CAPS ON!" ;;
  *) ;;
  esac
done

# edit/copy config files done

# b9ea65cd1e2b40cfcbf777559ef0c9ca

# script done
